[
  {
    "id": "p00000",
    "score": "000",
    "desc": "\n\nWrite a program which prints multiplication tables in the following format:\n\n\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\n\n",
    "constraints": "",
    "input_desc": "\n\nNo input.\n\n",
    "output_desc": "\n\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\n\n",
    "num_id": 1
  },
  {
    "id": "p00001",
    "score": "000",
    "desc": "\n\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\n\n\nWrite a program which prints heights of the top three mountains in descending order.\n\n",
    "constraints": "\n\n0 \u2264 height of mountain (integer) \u2264 10,000\n\n",
    "input_desc": "\n\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\n\n",
    "output_desc": "\n\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\n\n",
    "sample_input1": "\n\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\n\n",
    "sample_output1": "\n\n3776\n2848\n2840\n\n",
    "sample_input2": "\n\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\n\n",
    "sample_output2": "\n\n900\n900\n800\n\n",
    "num_id": 2
  },
  {
    "id": "p00002",
    "score": "000",
    "desc": "\n\nWrite a program which computes the digit number of sum of two integers a and b.\n\n",
    "constraints": "\n\n0 \u2264 a, b \u2264 1,000,000\nThe number of datasets \u2264 200\n\n",
    "input_desc": "\n\nThere are several test cases. Each test case consists of two non-negative integers a and b which are separeted by a space in a line. The input terminates with EOF.\n\n",
    "output_desc": "\n\nPrint the number of digits of a + b for each data set.\n\n",
    "sample_input1": "\n\n5 7\n1 99\n1000 999\n\n",
    "sample_output1": "\n\n2\n3\n4\n\n",
    "num_id": 3
  },
  {
    "id": "p00003",
    "score": "000",
    "desc": "\n\nWrite a program which judges wheather given length of three side form a right triangle. Print \"YES\" if the given sides (integers) form a right triangle, \"NO\" if not so.\n\n",
    "constraints": "\n\n 1 \u2264 length of the side \u2264 1,000\n N \u2264 1,000\n\n",
    "input_desc": "\n\nInput consists of several data sets. In the first line, the number of data set, N is given. Then, N lines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\n\n",
    "output_desc": "\n\nFor each data set, print \"YES\" or \"NO\".\n\n",
    "sample_input1": "\n\n3\n4 3 5\n4 3 6\n8 8 8\n\n",
    "sample_output1": "\n\nYES\nNO\nNO\n\n",
    "num_id": 4
  },
  {
    "id": "p00004",
    "score": "000",
    "desc": "\n\nWrite a program which solve a simultaneous equation:\n\n ax + by = c\n dx + ey = f\n\n\nThe program should print x and y for given a, b, c, d, e and f (-1,000 \u2264 a, b, c, d, e, f \u2264 1,000). You can suppose that given equation has a unique solution.\n\n",
    "constraints": "",
    "input_desc": "\n\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be a, b, c, d, e, f separated by a single space. The input terminates with EOF.\n\n",
    "output_desc": "\n\nFor each data set, print x and y separated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\n\n",
    "sample_input1": "\n\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\n\n",
    "sample_output1": "\n\n-1.000 2.000\n1.000 4.000\n\n",
    "sample_input2": "\n\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\n\n",
    "sample_output2": "\n\n0.000 3.000\n0.000 3.000\n\n",
    "num_id": 5
  },
  {
    "id": "p02257",
    "score": "000",
    "desc": "\n\nA prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\n\n\nWrite a program which reads a list of N integers and prints the number of prime numbers in the list.\n\n",
    "constraints": "\n\n1 \u2264 N \u2264 10000\n\n\n2 \u2264 an element of the list \u2264 108\n\n",
    "input_desc": "\n\nThe first line contains an integer N, the number of elements in the list.\n\n\nN numbers are given in the following lines.\n\n",
    "output_desc": "\n\nPrint the number of prime numbers in the given list.\n\n",
    "sample_input1": "\n\n5\n2\n3\n4\n5\n6\n\n",
    "sample_output1": "\n\n3\n\n",
    "sample_input2": "\n\n11\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n",
    "sample_output2": "\n\n4\n\n",
    "num_id": 6
  },
  {
    "id": "p02258",
    "score": "000",
    "desc": "\n\nYou can obtain profits from foreign exchange margin transactions. For example,  if you buy 1000 dollar at a rate of 100 yen per dollar, and sell them at a rate of 108 yen per dollar, you can obtain (108 - 100) \u00d7 1000 = 8000 yen.\n\n\n  Write a program which reads values of a currency $R_t$ at a certain time $t$ ($t = 0, 1, 2, ... n-1$), and reports the maximum value of $R_j - R_i$ where $j > i$ .\n\n",
    "constraints": "\n\n$2 \\leq n \\leq 200,000$\n$1 \\leq R_t \\leq 10^9$\n\n",
    "input_desc": "\n\nThe first line contains an integer $n$. In the following $n$ lines, $R_t$ ($t = 0, 1, 2, ... n-1$) are given in order.\n\n",
    "output_desc": "\n\nPrint the maximum value in a line.\n\n",
    "sample_input1": "\n\n6\n5\n3\n1\n3\n4\n3\n\n",
    "sample_output1": "\n\n3\n\n",
    "sample_input2": "\n\n3\n4\n3\n2\n\n",
    "sample_output2": "\n\n-1\n\n",
    "num_id": 7
  },
  {
    "id": "p02380",
    "score": "000",
    "desc": "\n\n  For given two sides of a triangle a and b and the angle C between them, calculate the following properties:\n\n\nS: Area of the triangle\nL: The length of the circumference of the triangle\nh: The height of the triangle with side a as a bottom edge\n\n",
    "constraints": "",
    "input_desc": "\n\n  The length of a, the length of b and the angle C are given in integers.\n\n",
    "output_desc": "\n\n  Print S, L and h in a line respectively. The output should not contain an absolute error greater than 10-4.\n\n",
    "sample_input1": "\n\n4 3 90\n\n",
    "sample_output1": "\n\n6.00000000\n12.00000000\n3.00000000\n\n",
    "num_id": 8
  },
  {
    "id": "p02388",
    "score": "000",
    "desc": "\n\nWrite a program which calculates the cube of a given integer x.\n\n",
    "constraints": "\n\n 1 \u2264 x \u2264 100\n\n",
    "input_desc": "\n\nAn integer x is given in a line.\n\n",
    "output_desc": "\n\nPrint the cube of x in a line.\n\n",
    "sample_input1": "\n\n2\n\n",
    "sample_output1": "\n\n8\n\n",
    "sample_input2": "\n\n3\n\n",
    "sample_output2": "\n\n27\n",
    "num_id": 9
  },
  {
    "id": "p02389",
    "score": "000",
    "desc": "\n\nWrite a program which calculates the area and perimeter of a given rectangle.\n\n",
    "constraints": "\n\n 1 \u2264 a, b \u2264 100\n\n",
    "input_desc": "\n\n  The length a and breadth b of the rectangle are given in a line separated by a single space.\n\n",
    "output_desc": "\n\nPrint the area and perimeter of the rectangle in a line. The two integers should be separated by a single space.\n\n",
    "sample_input1": "\n\n3 5\n\n",
    "sample_output1": "\n\n15 16\n",
    "num_id": 10
  },
  {
    "id": "p02390",
    "score": "000",
    "desc": "\n\nWrite a program which reads an integer $S$ [second] and converts it to $h:m:s$ where $h$, $m$, $s$ denote hours, minutes (less than 60) and seconds (less than 60) respectively.\n\n",
    "constraints": "\n\n$0 \\leq S \\leq 86400$\n\n",
    "input_desc": "\n\nAn integer $S$ is given in a line.\n\n",
    "output_desc": "\n\nPrint $h$, $m$ and $s$ separated by ':'. You do not need to put '0' for a value, which consists of a digit.\n\n",
    "sample_input1": "\n\n46979\n\n",
    "sample_output1": "\n\n13:2:59\n",
    "num_id": 11
  },
  {
    "id": "p02391",
    "score": "000",
    "desc": "\n\nWrite a program which prints small/large/equal relation of given two integers a and b.\n\n",
    "constraints": "\n\n -1000 \u2264 a, b \u2264 1000\n\n",
    "input_desc": "\n\n  Two integers a and b separated by a single space are given in a line.\n\n",
    "output_desc": "\n\nFor given two integers a and b, print\n\n\na < b\n\n\n  if a is less than b,\n\n\na > b\n\n\n  if a is greater than b, and\n\n\na == b\n\n\n  if a equals to b.\n\n",
    "sample_input1": "\n\n1 2\n\n",
    "sample_output1": "\n\na < b\n\n",
    "sample_input2": "\n\n4 3\n\n",
    "sample_output2": "\n\na > b\n\n",
    "sample_input3": "\n\n5 5\n\n",
    "sample_output3": "\n\na == b\n",
    "num_id": 12
  },
  {
    "id": "p02392",
    "score": "000",
    "desc": "\n\n  Write a program which reads three integers a, b and c, and prints \"Yes\" if a < b < c, otherwise \"No\".\n\n",
    "constraints": "\n\n 0 \u2264 a, b, c \u2264 100\n\n",
    "input_desc": "\n\n  Three integers a, b and c separated by a single space are given in a line.\n\n",
    "output_desc": "\n\n  Print \"Yes\" or \"No\" in a line.\n\n",
    "sample_input1": "\n\n1 3 8\n\n",
    "sample_output1": "\n\nYes\n\n",
    "sample_input2": "\n\n3 8 1\n\n",
    "sample_output2": "\n\nNo\n",
    "num_id": 13
  },
  {
    "id": "p02393",
    "score": "000",
    "desc": "\n\n  Write a program which reads three integers, and prints them in ascending order.\n\n",
    "constraints": "\n\n 1 \u2264 the three integers \u2264 10000\n\n",
    "input_desc": "\n\n  Three integers separated by a single space are given in a line.\n\n",
    "output_desc": "\n\n  Print the given integers in ascending order in a line. Put a single space between two integers.\n\n",
    "sample_input1": "\n\n3 8 1\n\n",
    "sample_output1": "\n\n1 3 8\n",
    "num_id": 14
  },
  {
    "id": "p02394",
    "score": "000",
    "desc": "\n\n  Write a program which reads a rectangle and a circle, and determines whether the circle is arranged inside the rectangle. As shown in the following figures, the upper right coordinate $(W, H)$ of the rectangle and the central coordinate $(x, y)$ and radius $r$ of the circle are given.\n\n\n\n\n\n\n\n",
    "constraints": "\n\n$ -100  \\leq x, y \\leq 100$\n$ 0  < W, H, r \\leq 100$\n\n",
    "input_desc": "\n\n  Five integers $W$, $H$, $x$, $y$ and $r$ separated by a single space are given in a line.\n\n",
    "output_desc": "\n\n  Print \"Yes\" if the circle is placed inside the rectangle, otherwise \"No\" in a line.\n\n",
    "sample_input1": "\n\n5 4 2 2 1\n\n",
    "sample_output1": "\n\nYes\n\n",
    "sample_input2": "\n\n5 4 2 4 1\n\n",
    "sample_output2": "\n\nNo\n",
    "num_id": 15
  },
  {
    "id": "p02396",
    "score": "000",
    "desc": "\n\nIn the online judge system, a judge file may include multiple datasets to check whether the submitted program outputs a correct answer for each test case. This task is to practice solving a problem with multiple datasets.\n\n\nWrite a program which reads an integer x and print it as is. Note that multiple datasets are given for this problem.\n\n",
    "constraints": "\n\n1 \u2264 x \u2264 10000\nThe number of datasets \u2264 10000\n\n",
    "input_desc": "\n\nThe input consists of multiple datasets. Each dataset consists of an integer x in a line.\n\n\nThe input ends with an integer 0. You program should not process (print) for this terminal symbol.\n\n",
    "output_desc": "\n\nFor each dataset, print x in the following format:\n\n\nCase i: x\n\n\nwhere i is the case number which starts with 1. Put a single space between \"Case\" and i. Also, put a single space between ':' and x.\n  \n",
    "sample_input1": "\n\n3\n5\n11\n7\n8\n19\n0\n\n",
    "sample_output1": "\n\nCase 1: 3\nCase 2: 5\nCase 3: 11\nCase 4: 7\nCase 5: 8\nCase 6: 19\n",
    "num_id": 16
  },
  {
    "id": "p02397",
    "score": "000",
    "desc": "\n\n  Write a program which reads two integers x and y, and prints them in ascending order. \n\n",
    "constraints": "\n\n 0 \u2264 x, y \u2264 10000\n the number of datasets \u2264 3000\n\n",
    "input_desc": "\n\nThe input consists of multiple datasets. Each dataset consists of two integers x and y separated by a single space.\n\n\nThe input ends with two 0 (when both x and y are zero). Your program should not process for these terminal symbols.\n  \n",
    "output_desc": "\n\nFor each dataset, print x and y in ascending order in a line. Put a single space between x and y.\n\n",
    "sample_input1": "\n\n3 2\n2 2\n5 3\n0 0\n\n",
    "sample_output1": "\n\n2 3\n2 2\n3 5\n",
    "num_id": 17
  },
  {
    "id": "p02398",
    "score": "000",
    "desc": "\n\n Write a program which reads three integers a, b and c, and prints the number of divisors of c between a and b. \n\n",
    "constraints": "\n\n 1 \u2264 a, b, c \u2264 10000\n a \u2264 b\n\n",
    "input_desc": "\n\nThree integers a, b and c are given in a line separated by a single space.\n\n",
    "output_desc": "\n\nPrint the number of divisors in a line.\n\n",
    "sample_input1": "\n\n5 14 80\n\n",
    "sample_output1": "\n\n3\n\n",
    "num_id": 18
  },
  {
    "id": "p02399",
    "score": "000",
    "desc": "\n\nWrite a program which reads two integers a and b, and calculates the following values:\n\n\na \u00f7 b:  d (in integer)\nremainder of a \u00f7 b:  r (in integer)\na \u00f7 b:  f (in real number)\n\n",
    "constraints": "\n\n 1 \u2264 a, b \u2264 109\n\n",
    "input_desc": "\n\nTwo integers a and b are given in a line.\n\n",
    "output_desc": "\n\nPrint d, r and f separated by a space in a line. For f, the output should not contain an absolute error greater than 10-5.\n\n",
    "sample_input1": "\n\n3 2\n\n",
    "sample_output1": "\n\n1 1 1.50000\n",
    "num_id": 19
  },
  {
    "id": "p02400",
    "score": "000",
    "desc": "\n\nWrite a program which calculates the area and circumference of a circle for given radius r.\n\n",
    "constraints": "\n\n 0 < r < 10000\n\n",
    "input_desc": "\n\nA real number r is given.\n\n",
    "output_desc": "\n\nPrint the area and circumference of the circle in a line. Put a single space between them. The output should not contain an absolute error greater than 10-5.\n\n",
    "sample_input1": "\n\n2\n\n",
    "sample_output1": "\n\n12.566371 12.566371\n\n",
    "sample_input2": "\n\n3\n\n",
    "sample_output2": "\n\n28.274334 18.849556\n\n",
    "num_id": 20
  },
  {
    "id": "p02401",
    "score": "000",
    "desc": "\n\nWrite a program which reads two integers a, b and an operator op, and then prints the value of a op b.\n\n\nThe operator op is '+', '-', '*' or '/' (sum, difference, product or quotient). The division should truncate any fractional part.\n\n",
    "constraints": "\n\n 0 \u2264 a, b \u2264 20000\nNo divisions by zero are given.\n\n",
    "input_desc": "\n\nThe input consists of multiple datasets. Each dataset is given in the following format.\n\n\na op b\n\n\nThe input ends with a dataset where op = '?'. Your program should not process for this dataset.\n\n",
    "output_desc": "\n\nFor each dataset, print the value in a line.\n\n",
    "sample_input1": "\n\n1 + 2\n56 - 18\n13 * 2\n100 / 10\n27 + 81\n0 ? 0\n\n",
    "sample_output1": "\n\n3\n38\n26\n10\n108\n\n",
    "num_id": 21
  },
  {
    "id": "p02402",
    "score": "000",
    "desc": "\n\nWrite a program which reads a sequence of $n$ integers $a_i (i = 1, 2, ... n)$, and prints the minimum value, maximum value and sum of the sequence.\n\n",
    "constraints": "\n\n$0 < n \\leq 10000$\n$-1000000 \\leq a_i \\leq 1000000$\n\n",
    "input_desc": "\n\n  In the first line, an integer $n$ is given. In the next line, $n$ integers $a_i$ are given in a line.\n\n",
    "output_desc": "\n\n  Print the minimum value, maximum value and sum in a line. Put a single space between the values.\n\n",
    "sample_input1": "\n\n5\n10 1 5 4 17\n\n",
    "sample_output1": "\n\n1 17 37\n\n",
    "num_id": 22
  },
  {
    "id": "p02403",
    "score": "000",
    "desc": "\n\n  Draw a rectangle which has a height of H cm and a width of W cm. Draw a 1-cm square by single '#'.\n\n",
    "constraints": "\n\n1 \u2264 H \u2264 300\n1 \u2264 W \u2264 300\n\n",
    "input_desc": "\n\nThe input consists of multiple datasets. Each dataset consists of two integers H and W separated by a single space.\n\n\n  The input ends with two 0 (when both H and W are zero). \n\n",
    "output_desc": "\n\nFor each dataset, print the rectangle made of H \u00d7 W '#'.\n\n\n  Print a blank line after each dataset.\n\n",
    "sample_input1": "\n\n3 4\n5 6\n2 2\n0 0\n\n",
    "sample_output1": "\n\n####\n####\n####\n\n######\n######\n######\n######\n######\n\n##\n##\n\n\n",
    "num_id": 23
  },
  {
    "id": "p02404",
    "score": "000",
    "desc": "\n\n  Draw a frame which has a height of H cm and a width of W cm. For example, the following figure shows a frame which has a height of 6 cm and a width of 10 cm.\n\n\n##########\n#........#\n#........#\n#........#\n#........#\n##########\n\n",
    "constraints": "\n\n3 \u2264 H \u2264 300\n3 \u2264 W \u2264 300\n\n",
    "input_desc": "\n\nThe input consists of multiple datasets. Each dataset consists of two integers H and W separated by a single space.\n\n\n  The input ends with two 0 (when both H and W are zero). \n\n",
    "output_desc": "\n\nFor each dataset, print the frame made of '#' and '.'.\n\n\n  Print a blank line after each dataset.\n\n",
    "sample_input1": "\n\n3 4\n5 6\n3 3\n0 0\n\n",
    "sample_output1": "\n\n####\n#..#\n####\n\n######\n#....#\n#....#\n#....#\n######\n\n###\n#.#\n###\n\n\n",
    "num_id": 24
  },
  {
    "id": "p02407",
    "score": "000",
    "desc": "\n\n  Write a program which reads a sequence and prints it in the reverse order.\n\n",
    "constraints": "\n\nn \u2264 100\n0 \u2264 ai < 1000\n\n",
    "input_desc": "\n\nThe input is given in the following format:\n\n\nn\na1 a2 . . . an\n\n\nn is the size of the sequence and ai is the ith element of the sequence.\n\n",
    "output_desc": "\n\n  Print the reversed sequence in a line. Print a single space character between adjacent elements (Note that your program should not put a space character after the last element).\n\n",
    "sample_input1": "\n\n5\n1 2 3 4 5\n\n",
    "sample_output1": "\n\n5 4 3 2 1\n\n",
    "sample_input2": "\n\n8\n3 3 4 4 5 8 7 9\n\n",
    "sample_output2": "\n\n9 7 8 5 4 4 3 3\n\n",
    "num_id": 25
  },
  {
    "id": "p02412",
    "score": "000",
    "desc": "\n\n  Write a program which identifies the number of combinations of three integers which satisfy the following conditions:\n\n\nYou should select three distinct integers from 1 to n.\nA total sum of the three integers is x.\n\n\n  For example, there are two combinations for n = 5 and x = 9.\n\n\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\n\n",
    "constraints": "\n\n3 \u2264 n \u2264 100\n0 \u2264 x \u2264 300\n\n",
    "input_desc": "\n\n  The input consists of multiple datasets. For each dataset, two integers n and x are given in a line.\n\n\n  The input ends with two zeros for n and x respectively. Your program should not process for these terminal symbols.\n\n",
    "output_desc": "\n\n  For each dataset, print the number of combinations in a line.\n\n",
    "sample_input1": "\n\n5 9\n0 0\n\n",
    "sample_output1": "\n\n2\n\n",
    "num_id": 26
  },
  {
    "id": "p02417",
    "score": "000",
    "desc": "\n\n  Write a program which counts and reports the number of each alphabetical letter. Ignore the case of characters.\n\n",
    "constraints": "\n\nThe number of characters in the sentence < 1200\n\n",
    "input_desc": "\n\n  A sentence in English is given in several lines.\n\n",
    "output_desc": "\n\n  Prints the number of alphabetical letters in the following format:\n\n\na : The number of 'a'\nb : The number of 'b'\nc : The number of 'c'\n  .\n  .\nz : The number of 'z'\n\n",
    "sample_input1": "\n\nThis is a pen.\n\n",
    "sample_output1": "\n\na : 1\nb : 0\nc : 0\nd : 0\ne : 1\nf : 0\ng : 0\nh : 1\ni : 2\nj : 0\nk : 0\nl : 0\nm : 0\nn : 1\no : 0\np : 1\nq : 0\nr : 0\ns : 2\nt : 1\nu : 0\nv : 0\nw : 0\nx : 0\ny : 0\nz : 0\n\n",
    "num_id": 27
  },
  {
    "id": "p02418",
    "score": "000",
    "desc": "\n\n  Write a program which finds a pattern $p$ in a ring shaped text $s$.\n\n\n\n\n\n\n",
    "constraints": "\n\n$1 \\leq $ length of $p \\leq $ length of $s \\leq 100$\n$s$ and $p$ consists of lower-case letters\n\n",
    "input_desc": "\n\n  In the first line, the text $s$ is given.\n  In the second line, the pattern $p$ is given.\n\n",
    "output_desc": "\n\n  If $p$ is in $s$, print Yes in a line, otherwise No.\n\n",
    "sample_input1": "\n\nvanceknowledgetoad\nadvance\n\n",
    "sample_output1": "\n\nYes\n\n\n",
    "sample_input2": "\n\nvanceknowledgetoad\nadvanced\n\n",
    "sample_output2": "\n\nNo\n\n",
    "num_id": 28
  },
  {
    "id": "p02419",
    "score": "000",
    "desc": "\n\nWrite a program which reads a word W and a text T, and prints the number of word W which appears in text T\n\n\nT consists of string Ti separated by space characters and newlines. Count the number of Ti which equals to W. The word and text are case insensitive.\n\n",
    "constraints": "\n\nThe length of W \u2264 10\nW consists of lower case letters\nThe length of T in a line \u2264 1000\n\n",
    "input_desc": "\n\n  In the first line, the word W is given. In the following lines, the text T is given separated by space characters and newlines.\n\n\n\"END_OF_TEXT\" indicates the end of the text.\n\n",
    "output_desc": "\n\n  Print the number of W in the text.\n\n",
    "sample_input1": "\n\ncomputer\nNurtures computer scientists and highly-skilled computer engineers\nwho will create and exploit \"knowledge\" for the new era.\nProvides an outstanding computer environment.\nEND_OF_TEXT\n\n",
    "sample_output1": "\n\n3\n\n",
    "num_id": 29
  },
  {
    "id": "p02546",
    "score": "100",
    "desc": "\nIn the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.\n",
    "constraints": "\n\nS is a string of length 1 between 1000, inclusive.\nS contains only lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the plural form of the given Taknese word.\n",
    "sample_input1": "\napple\n\n",
    "sample_output1": "\napples\n\napple ends with e, so its plural form is apples.\n",
    "sample_input2": "\nbus\n\n",
    "sample_output2": "\nbuses\n\nbus ends with s, so its plural form is buses.\n",
    "sample_input3": "\nbox\n\n",
    "sample_output3": "\nboxs\n",
    "num_id": 30
  },
  {
    "id": "p02547",
    "score": "200",
    "desc": "\nTak performed the following action N times: rolling two dice.\nThe result of the i-th roll is D_{i,1} and D_{i,2}.\nCheck if doublets occurred at least three times in a row.\nSpecifically, check if there exists at lease one i such that D_{i,1}=D_{i,2}, D_{i+1,1}=D_{i+1,2} and D_{i+2,1}=D_{i+2,2} hold.\n",
    "constraints": "\n\n3 \\leq N \\leq 100\n1\\leq D_{i,j} \\leq 6\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nD_{1,1} D_{1,2}\n\\vdots\nD_{N,1} D_{N,2}\n\n",
    "output_desc": "\nPrint Yes if doublets occurred at least three times in a row. Print No otherwise.\n",
    "sample_input1": "\n5\n1 2\n6 6\n4 4\n3 3\n3 2\n\n",
    "sample_output1": "\nYes\n\nFrom the second roll to the fourth roll, three doublets occurred in a row.\n",
    "sample_input2": "\n5\n1 1\n2 2\n3 4\n5 5\n6 6\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\n6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 31
  },
  {
    "id": "p02548",
    "score": "300",
    "desc": "\nGiven is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?\n",
    "constraints": "\n\n 2 \\leq N \\leq 10^6\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n3\n\n",
    "sample_output1": "\n3\n\nThere are 3 tuples of integers that satisfy A \\times B + C = 3: (A, B, C) = (1, 1, 2), (1, 2, 1), (2, 1, 1).\n",
    "sample_input2": "\n100\n\n",
    "sample_output2": "\n473\n\n",
    "sample_input3": "\n1000000\n\n",
    "sample_output3": "\n13969985\n",
    "num_id": 32
  },
  {
    "id": "p02552",
    "score": "100",
    "desc": "\nGiven is an integer x that is greater than or equal to 0, and less than or equal to 1.\nOutput 1 if x is equal to 0, or 0 if x is equal to 1.\n",
    "constraints": "\n\n0 \\leq x \\leq 1\nx is an integer\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nx\n\n",
    "output_desc": "\nPrint 1 if x is equal to 0, or 0 if x is equal to 1.\n",
    "sample_input1": "\n1\n\n",
    "sample_output1": "\n0\n\n",
    "sample_input2": "\n0\n\n",
    "sample_output2": "\n1\n",
    "num_id": 33
  },
  {
    "id": "p02553",
    "score": "200",
    "desc": "\nGiven are integers a,b,c and d.\nIf x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?\n",
    "constraints": "\n\n-10^9 \\leq a \\leq b \\leq 10^9\n-10^9 \\leq c \\leq d \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na b c d\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n1 2 1 1\n\n",
    "sample_output1": "\n2\n\nIf x = 1 and y = 1 then x \\times y = 1.\nIf x = 2 and y = 1 then x \\times y = 2.\nTherefore, the answer is 2.\n",
    "sample_input2": "\n3 5 -4 -2\n\n",
    "sample_output2": "\n-6\n\nThe answer can be negative.\n",
    "sample_input3": "\n-1000000000 0 -1000000000 0\n\n",
    "sample_output3": "\n1000000000000000000\n",
    "num_id": 34
  },
  {
    "id": "p02554",
    "score": "300",
    "desc": "\nHow many integer sequences A_1,A_2,\\ldots,A_N of length N satisfy all of the following conditions?\n\n0 \\leq A_i \\leq 9\nThere exists some i such that A_i=0 holds.\nThere exists some i such that A_i=9 holds.\n\nThe answer can be very large, so output it modulo 10^9 + 7.\n",
    "constraints": "\n\n1 \\leq N \\leq 10^6\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the answer modulo 10^9 + 7.\n",
    "sample_input1": "\n2\n\n",
    "sample_output1": "\n2\n\nTwo sequences \\{0,9\\} and \\{9,0\\} satisfy all conditions.\n",
    "sample_input2": "\n1\n\n",
    "sample_output2": "\n0\n\n",
    "sample_input3": "\n869121\n\n",
    "sample_output3": "\n2511445\n",
    "num_id": 35
  },
  {
    "id": "p02570",
    "score": "100",
    "desc": "\nTakahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?\n",
    "constraints": "\n\n1 \\leq D \\leq 10000\n1 \\leq T \\leq 10000\n1 \\leq S \\leq 10000\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nD T S\n\n",
    "output_desc": "\nIf Takahashi will reach the place in time, print Yes; otherwise, print No.\n",
    "sample_input1": "\n1000 15 80\n\n",
    "sample_output1": "\nYes\n\nIt takes 12.5 minutes to go 1000 meters to the place at a speed of 80 meters per minute. They have planned to meet in 15 minutes so he will arrive in time.\n",
    "sample_input2": "\n2000 20 100\n\n",
    "sample_output2": "\nYes\n\nIt takes 20 minutes to go 2000 meters to the place at a speed of 100 meters per minute. They have planned to meet in 20 minutes so he will arrive just on time.\n",
    "sample_input3": "\n10000 1 1\n\n",
    "sample_output3": "\nNo\n\nHe will be late.",
    "num_id": 36
  },
  {
    "id": "p02571",
    "score": "200",
    "desc": "\nGiven are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.\n",
    "constraints": "\n\nThe lengths of S and T are each at least 1 and at most 1000.\nThe length of T is at most that of S.\nS and T consist of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\nT\n\n",
    "output_desc": "\nPrint the minimum number of characters in S that need to be changed.\n",
    "sample_input1": "\ncabacc\nabc\n\n",
    "sample_output1": "\n1\n\nFor example, changing the fourth character a in S to c will match the second through fourth characters in S to T.\nSince S itself does not have T as its substring, this number of changes - one - is the minimum needed.\n",
    "sample_input2": "\ncodeforces\natcoder\n\n",
    "sample_output2": "\n6\n",
    "num_id": 37
  },
  {
    "id": "p02572",
    "score": "300",
    "desc": "\nGiven are N integers A_1,\\ldots,A_N.\nFind the sum of A_i \\times A_j over all pairs (i,j) such that 1\\leq i < j \\leq N, modulo (10^9+7).\n",
    "constraints": "\n\n2 \\leq N \\leq 2\\times 10^5\n0 \\leq A_i \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 \\ldots A_N\n\n",
    "output_desc": "\nPrint \\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} A_i A_j, modulo (10^9+7).\n",
    "sample_input1": "\n3\n1 2 3\n\n",
    "sample_output1": "\n11\n\nWe have 1 \\times 2 + 1 \\times 3 + 2 \\times 3 = 11.\n",
    "sample_input2": "\n4\n141421356 17320508 22360679 244949\n\n",
    "sample_output2": "\n437235829\n",
    "num_id": 38
  },
  {
    "id": "p02576",
    "score": "100",
    "desc": "\nTakahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?\n",
    "constraints": "\n\n1 \\leq N,X,T \\leq 1000\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN X T\n\n",
    "output_desc": "\nPrint an integer representing the minimum number of minutes needed to make N pieces of takoyaki.\n",
    "sample_input1": "\n20 12 6\n\n",
    "sample_output1": "\n12\n\nHe can make 12 pieces of takoyaki in the first 6 minutes and 8 more in the next 6 minutes, so he can make 20 in a total of 12 minutes.\nNote that being able to make 12 in 6 minutes does not mean he can make 2 in 1 minute.\n",
    "sample_input2": "\n1000 1 1000\n\n",
    "sample_output2": "\n1000000\n\nIt seems to take a long time to make this kind of takoyaki.",
    "num_id": 39
  },
  {
    "id": "p02577",
    "score": "200",
    "desc": "\nAn integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.\n",
    "constraints": "\n\n0 \\leq N < 10^{200000}\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nIf N is a multiple of 9, print Yes; otherwise, print No.\n",
    "sample_input1": "\n123456789\n\n",
    "sample_output1": "\nYes\n\nThe sum of these digits is 1+2+3+4+5+6+7+8+9=45, which is a multiple of 9, so 123456789 is a multiple of 9.\n",
    "sample_input2": "\n0\n\n",
    "sample_output2": "\nYes\n\n",
    "sample_input3": "\n31415926535897932384626433832795028841971693993751058209749445923078164062862089986280\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 40
  },
  {
    "id": "p02578",
    "score": "300",
    "desc": "\nN persons are standing in a row. The height of the i-th person from the front is A_i.\nWe want to have each person stand on a stool of some heights - at least zero - so that the following condition is satisfied for every person:\nCondition: Nobody in front of the person is taller than the person. Here, the height of a person includes the stool.\nFind the minimum total height of the stools needed to meet this goal.\n",
    "constraints": "\n\n1 \\leq N \\leq 2\\times 10^5\n1 \\leq A_i \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 \\ldots A_N\n\n",
    "output_desc": "\nPrint the minimum total height of the stools needed to meet the goal.\n",
    "sample_input1": "\n5\n2 1 5 4 3\n\n",
    "sample_output1": "\n4\n\nIf the persons stand on stools of heights 0, 1, 0, 1, and 2, respectively, their heights will be 2, 2, 5, 5, and 5, satisfying the condition.\nWe cannot meet the goal with a smaller total height of the stools.\n",
    "sample_input2": "\n5\n3 3 3 3 3\n\n",
    "sample_output2": "\n0\n\nGiving a stool of height 0 to everyone will work.",
    "num_id": 41
  },
  {
    "id": "p02582",
    "score": "100",
    "desc": "\nWe have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.\n",
    "constraints": "\n\n|S| = 3\nEach character of S is S or R.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the maximum number of consecutive rainy days in the period.\n",
    "sample_input1": "\nRRS\n\n",
    "sample_output1": "\n2\n\nWe had rain on the 1-st and 2-nd days in the period. Here, the maximum number of consecutive rainy days is 2, so we should print 2.\n",
    "sample_input2": "\nSSS\n\n",
    "sample_output2": "\n0\n\nIt was sunny throughout the period. We had no rainy days, so we should print 0.\n",
    "sample_input3": "\nRSR\n\n",
    "sample_output3": "\n1\n\nWe had rain on the 1-st and 3-rd days - two \"streaks\" of one rainy day, so we should print 1.",
    "num_id": 42
  },
  {
    "id": "p02584",
    "score": "300",
    "desc": "\nTakahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.\n",
    "constraints": "\n\n-10^{15} \\leq X \\leq 10^{15}\n1 \\leq K \\leq 10^{15}\n1\u00a0\\leq D \\leq 10^{15}\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX K D\n\n",
    "output_desc": "\nPrint the minimum possible absolute value of the coordinate of the destination.\n",
    "sample_input1": "\n6 2 4\n\n",
    "sample_output1": "\n2\n\nTakahashi is now at coordinate 6. It is optimal to make the following moves:\n\nMove from coordinate 6 to (6 - 4 =) 2.\nMove from coordinate 2 to (2 - 4 =) -2.\n\nHere, the absolute value of the coordinate of the destination is 2, and we cannot make it smaller.\n",
    "sample_input2": "\n7 4 3\n\n",
    "sample_output2": "\n1\n\nTakahashi is now at coordinate 7. It is optimal to make, for example, the following moves:\n\nMove from coordinate 7 to 4.\nMove from coordinate 4 to 7.\nMove from coordinate 7 to 4.\nMove from coordinate 4 to 1.\n\nHere, the absolute value of the coordinate of the destination is 1, and we cannot make it smaller.\n",
    "sample_input3": "\n10 1 2\n\n",
    "sample_output3": "\n8\n\n",
    "sample_input4": "\n1000000000000000 1000000000000000 1000000000000000\n\n",
    "sample_output4": "\n1000000000000000\n\nThe answer can be enormous.",
    "num_id": 43
  },
  {
    "id": "p02594",
    "score": "100",
    "desc": "\nYou will turn on the air conditioner if, and only if, the temperature of the room is 30 degrees Celsius or above.\nThe current temperature of the room is X degrees Celsius. Will you turn on the air conditioner?\n",
    "constraints": "\n\n-40 \\leq X \\leq 40\nX is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX\n\n",
    "output_desc": "\nPrint Yes if you will turn on the air conditioner; print No otherwise.\n",
    "sample_input1": "\n25\n\n",
    "sample_output1": "\nNo\n\n",
    "sample_input2": "\n30\n\n",
    "sample_output2": "\nYes\n",
    "num_id": 44
  },
  {
    "id": "p02595",
    "score": "200",
    "desc": "\nWe have N points in the two-dimensional plane. The coordinates of the i-th point are (X_i,Y_i).\nAmong them, we are looking for the points such that the distance from the origin is at most D. How many such points are there?\nWe remind you that the distance between the origin and the point (p, q) can be represented as \\sqrt{p^2+q^2}.\n",
    "constraints": "\n\n1 \\leq N \\leq 2\\times 10^5\n0 \\leq D \\leq 2\\times 10^5\n|X_i|,|Y_i| \\leq 2\\times 10^5\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN D\nX_1 Y_1\n\\vdots\nX_N Y_N\n\n",
    "output_desc": "\nPrint an integer representing the number of points such that the distance from the origin is at most D.\n",
    "sample_input1": "\n4 5\n0 5\n-2 4\n3 4\n4 -4\n\n",
    "sample_output1": "\n3\n\nThe distance between the origin and each of the given points is as follows:\n\n\\sqrt{0^2+5^2}=5\n\\sqrt{(-2)^2+4^2}=4.472\\ldots\n\\sqrt{3^2+4^2}=5\n\\sqrt{4^2+(-4)^2}=5.656\\ldots\n\nThus, we have three points such that the distance from the origin is at most 5.\n",
    "sample_input2": "\n12 3\n1 1\n1 1\n1 1\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3\n\n",
    "sample_output2": "\n7\n\nMultiple points may exist at the same coordinates.\n",
    "sample_input3": "\n20 100000\n14309 -32939\n-56855 100340\n151364 25430\n103789 -113141\n147404 -136977\n-37006 -30929\n188810 -49557\n13419 70401\n-88280 165170\n-196399 137941\n-176527 -61904\n46659 115261\n-153551 114185\n98784 -6820\n94111 -86268\n-30401 61477\n-55056 7872\n5901 -163796\n138819 -185986\n-69848 -96669\n\n",
    "sample_output3": "\n6\n",
    "num_id": 45
  },
  {
    "id": "p02596",
    "score": "300",
    "desc": "\nTakahashi loves the number 7 and multiples of K.\nWhere is the first occurrence of a multiple of K in the sequence 7,77,777,\\ldots? (Also see Output and Sample Input/Output below.)\nIf the sequence contains no multiples of K, print -1 instead.\n",
    "constraints": "\n\n1 \\leq K \\leq 10^6\nK is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nK\n\n",
    "output_desc": "\nPrint an integer representing the position of the first occurrence of a multiple of K. (For example, if the first occurrence is the fourth element of the sequence, print 4.)\n",
    "sample_input1": "\n101\n\n",
    "sample_output1": "\n4\n\nNone of 7, 77, and 777 is a multiple of 101, but 7777 is.\n",
    "sample_input2": "\n2\n\n",
    "sample_output2": "\n-1\n\nAll elements in the sequence are odd numbers; there are no multiples of 2.\n",
    "sample_input3": "\n999983\n\n",
    "sample_output3": "\n999982\n",
    "num_id": 46
  },
  {
    "id": "p02601",
    "score": "200",
    "desc": "\n\nM-kun has the following three cards:\n\nA red card with the integer A.\nA green card with the integer B.\nA blue card with the integer C.\n\nHe is a genius magician who can do the following operation at most K times:\n\nChoose one of the three cards and multiply the written integer by 2.\n\nHis magic is successful if both of the following conditions are satisfied after the operations:\n\nThe integer on the green card is strictly greater than the integer on the red card.\nThe integer on the blue card is strictly greater than the integer on the green card.\n\nDetermine whether the magic can be successful.\n",
    "constraints": "\n\n\n1 \\leq A, B, C \\leq 7\n1 \\leq K \\leq 7\nAll values in input are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nA B C\nK\n\n",
    "output_desc": "\n\nIf the magic can be successful, print Yes; otherwise, print No.\n",
    "sample_input1": "\n7 2 5\n3\n\n",
    "sample_output1": "\nYes\n\nThe magic will be successful if, for example, he does the following operations:\n\nFirst, choose the blue card. The integers on the red, green, and blue cards are now 7, 2, and 10, respectively.\nSecond, choose the green card. The integers on the red, green, and blue cards are now 7, 4, and 10, respectively.\nThird, choose the green card. The integers on the red, green, and blue cards are now 7, 8, and 10, respectively.\n\n",
    "sample_input2": "\n7 4 2\n3\n\n",
    "sample_output2": "\nNo\n\nHe has no way to succeed in the magic with at most three operations.",
    "num_id": 47
  },
  {
    "id": "p02606",
    "score": "100",
    "desc": "\nHow many multiples of d are there among the integers between L and R (inclusive)?\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq L \\leq R \\leq 100\n1 \\leq d \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nL R d\n\n",
    "output_desc": "\nPrint the number of multiples of d among the integers between L and R (inclusive).\n",
    "sample_input1": "\n5 10 2\n\n",
    "sample_output1": "\n3\n\n\nAmong the integers between 5 and 10, there are three multiples of 2: 6, 8, and 10.\n\n",
    "sample_input2": "\n6 20 7\n\n",
    "sample_output2": "\n2\n\n\nAmong the integers between 6 and 20, there are two multiples of 7: 7 and 14.\n\n",
    "sample_input3": "\n1 100 1\n\n",
    "sample_output3": "\n100\n",
    "num_id": 48
  },
  {
    "id": "p02607",
    "score": "200",
    "desc": "\nWe have N squares assigned the numbers 1,2,3,\\ldots,N. Each square has an integer written on it, and the integer written on Square i is a_i.\nHow many squares i satisfy both of the following conditions?\n\nThe assigned number, i, is odd.\nThe written integer is odd.\n\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N, a_i \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\na_1 a_2 \\cdots a_N\n\n",
    "output_desc": "\nPrint the number of squares that satisfy both of the conditions.\n",
    "sample_input1": "\n5\n1 3 4 5 7\n\n",
    "sample_output1": "\n2\n\n\nTwo squares, Square 1 and 5, satisfy both of the conditions.\nFor Square 2 and 4, the assigned numbers are not odd.\nFor Square 3, the written integer is not odd.\n\n",
    "sample_input2": "\n15\n13 76 46 15 50 98 93 77 31 43 84 90 6 24 14\n\n",
    "sample_output2": "\n3\n",
    "num_id": 49
  },
  {
    "id": "p02608",
    "score": "300",
    "desc": "\nLet f(n) be the number of triples of integers (x,y,z) that satisfy both of the following conditions:\n\n1 \\leq x,y,z\nx^2 + y^2 + z^2 + xy + yz + zx = n\n\nGiven an integer N, find each of f(1),f(2),f(3),\\ldots,f(N).\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 10^4\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint N lines. The i-th line should contain the value f(i).\n",
    "sample_input1": "\n20\n\n",
    "sample_output1": "\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n3\n3\n0\n0\n\n\nFor n=6, only (1,1,1) satisfies both of the conditions. Thus, f(6) = 1.\nFor n=11, three triples, (1,1,2), (1,2,1), and (2,1,1), satisfy both of the conditions. Thus, f(6) = 3.\nFor n=17, three triples, (1,2,2), (2,1,2), and (2,2,1), satisfy both of the conditions. Thus, f(17) = 3.\nFor n=18, three triples, (1,1,3), (1,3,1), and (3,1,1), satisfy both of the conditions. Thus, f(18) = 3.\n",
    "num_id": 50
  },
  {
    "id": "p02612",
    "score": "100",
    "desc": "\nWe will buy a product for N yen (the currency of Japan) at a shop.\nIf we use only 1000-yen bills to pay the price, how much change will we receive?\nAssume we use the minimum number of bills required.\n",
    "constraints": "\n\n1 \\leq N \\leq 10000\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the amount of change as an integer.\n",
    "sample_input1": "\n1900\n\n",
    "sample_output1": "\n100\n\nWe will use two 1000-yen bills to pay the price and receive 100 yen in change.\n",
    "sample_input2": "\n3000\n\n",
    "sample_output2": "\n0\n\nWe can pay the exact price.",
    "num_id": 51
  },
  {
    "id": "p02613",
    "score": "200",
    "desc": "\nTakahashi is participating in a programming contest called AXC002, and he has just submitted his code to Problem A.\nThe problem has N test cases.\nFor each test case i (1\\leq i \\leq N), you are given a string S_i representing the verdict for that test case. Find the numbers of test cases for which the verdict is AC, WA, TLE, and RE, respectively.\nSee the Output section for the output format.\n",
    "constraints": "\n\n1 \\leq N \\leq 10^5\nS_i is AC, WA, TLE, or RE.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS_1\n\\vdots\nS_N\n\n",
    "output_desc": "\nLet C_0, C_1, C_2, and C_3 be the numbers of test cases for which the verdict is AC, WA, TLE, and RE, respectively. Print the following:\nAC x C_0\nWA x C_1\nTLE x C_2\nRE x C_3\n\n",
    "sample_input1": "\n6\nAC\nTLE\nAC\nAC\nWA\nTLE\n\n",
    "sample_output1": "\nAC x 3\nWA x 1\nTLE x 2\nRE x 0\n\nWe have 3, 1, 2, and 0 test case(s) for which the verdict is AC, WA, TLE, and RE, respectively.\n",
    "sample_input2": "\n10\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\n\n",
    "sample_output2": "\nAC x 10\nWA x 0\nTLE x 0\nRE x 0\n",
    "num_id": 52
  },
  {
    "id": "p02621",
    "score": "100",
    "desc": "\nGiven an integer a as input, print the value a + a^2 + a^3.\n",
    "constraints": "\n\n1 \\leq a \\leq 10\na is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na\n\n",
    "output_desc": "\nPrint the value a + a^2 + a^3 as an integer.\n",
    "sample_input1": "\n2\n\n",
    "sample_output1": "\n14\n\nWhen a = 2, we have a + a^2 + a^3 = 2 + 2^2 + 2^3 = 2 + 4 + 8 = 14.\nPrint the answer as an input. Outputs such as 14.0 will be judged as incorrect.\n",
    "sample_input2": "\n10\n\n",
    "sample_output2": "\n1110\n",
    "num_id": 53
  },
  {
    "id": "p02622",
    "score": "200",
    "desc": "\nGiven are strings S and T. Consider changing S to T by repeating the operation below. Find the minimum number of operations required to do so.\nOperation: Choose one character of S and replace it with a different character.\n",
    "constraints": "\n\nS and T have lengths between 1 and 2\\times 10^5 (inclusive).\nS and T consists of lowercase English letters.\nS and T have equal lengths.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\nT\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\ncupofcoffee\ncupofhottea\n\n",
    "sample_output1": "\n4\n\nWe can achieve the objective in four operations, such as the following:\n\nFirst, replace the sixth character c with h.\nSecond, replace the eighth character f with t.\nThird, replace the ninth character f with t.\nFourth, replace the eleventh character e with a.\n\n",
    "sample_input2": "\nabcde\nbcdea\n\n",
    "sample_output2": "\n5\n\n",
    "sample_input3": "\napple\napple\n\n",
    "sample_output3": "\n0\n\nNo operations may be needed to achieve the objective.",
    "num_id": 54
  },
  {
    "id": "p02627",
    "score": "100",
    "desc": "\nAn uppercase or lowercase English letter \\alpha will be given as input.\nIf \\alpha is uppercase, print A; if it is lowercase, print a.\n",
    "constraints": "\n\n\\alpha is an uppercase (A - Z) or lowercase (a - z) English letter.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\n\u03b1\n\n",
    "output_desc": "\nIf \\alpha is uppercase, print A; if it is lowercase, print a.\n",
    "sample_input1": "\nB\n\n",
    "sample_output1": "\nA\n\nB is uppercase, so we should print A.\n",
    "sample_input2": "\na\n\n",
    "sample_output2": "\na\n\na is lowercase, so we should print a.",
    "num_id": 55
  },
  {
    "id": "p02628",
    "score": "200",
    "desc": "\nA shop sells N kinds of fruits, Fruit 1, \\ldots, N, at prices of p_1, \\ldots, p_N yen per item, respectively. (Yen is the currency of Japan.)\nHere, we will choose K kinds of fruits and buy one of each chosen kind. Find the minimum possible total price of those fruits.\n",
    "constraints": "\n\n1 \\leq K \\leq N \\leq 1000\n1 \\leq p_i \\leq 1000\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\np_1 p_2 \\ldots p_N\n\n",
    "output_desc": "\nPrint an integer representing the minimum possible total price of fruits.\n",
    "sample_input1": "\n5 3\n50 100 80 120 80\n\n",
    "sample_output1": "\n210\n\nThis shop sells Fruit 1, 2, 3, 4, and 5 for 50 yen, 100 yen, 80 yen, 120 yen, and 80 yen, respectively.\nThe minimum total price for three kinds of fruits is 50 + 80 + 80 = 210 yen when choosing Fruit 1, 3, and 5.\n",
    "sample_input2": "\n1 1\n1000\n\n",
    "sample_output2": "\n1000\n",
    "num_id": 56
  },
  {
    "id": "p02633",
    "score": "200",
    "desc": "\nTakahashi is standing on a two-dimensional plane, facing north. Find the minimum positive integer K such that Takahashi will be at the starting position again after he does the following action K times:\n\nGo one meter in the direction he is facing. Then, turn X degrees counter-clockwise.\n\n",
    "constraints": "\n\n1 \\leq X \\leq 179\nX is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX\n\n",
    "output_desc": "\nPrint the number of times Takahashi will do the action before he is at the starting position again.\n",
    "sample_input1": "\n90\n\n",
    "sample_output1": "\n4\n\nTakahashi's path is a square.\n",
    "sample_input2": "\n1\n\n",
    "sample_output2": "\n360\n",
    "num_id": 57
  },
  {
    "id": "p02639",
    "score": "100",
    "desc": "\nWe have five variables x_1, x_2, x_3, x_4, and x_5.\nThe variable x_i was initially assigned a value of i.\nSnuke chose one of these variables and assigned it 0.\nYou are given the values of the five variables after this assignment.\nFind out which variable Snuke assigned 0.\n",
    "constraints": "\n\nThe values of x_1, x_2, x_3, x_4, and x_5 given as input are a possible outcome of the assignment by Snuke.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nx_1 x_2 x_3 x_4 x_5\n\n",
    "output_desc": "\nIf the variable Snuke assigned 0 was x_i, print the integer i.\n",
    "sample_input1": "\n0 2 3 4 5\n\n",
    "sample_output1": "\n1\n\nIn this case, Snuke assigned 0 to x_1, so we should print 1.\n",
    "sample_input2": "\n1 2 0 4 5\n\n",
    "sample_output2": "\n3\n",
    "num_id": 58
  },
  {
    "id": "p02640",
    "score": "200",
    "desc": "\nThere are some animals in a garden. Each of them is a crane with two legs or a turtle with four legs.\nTakahashi says: \"there are X animals in total in the garden, and they have Y legs in total.\" Determine whether there is a combination of numbers of cranes and turtles in which this statement is correct.\n",
    "constraints": "\n\n1 \\leq X \\leq 100\n1 \\leq Y \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX Y\n\n",
    "output_desc": "\nIf there is a combination of numbers of cranes and turtles in which the statement is correct, print Yes; otherwise, print No.\n",
    "sample_input1": "\n3 8\n\n",
    "sample_output1": "\nYes\n\nThe statement \"there are 3 animals in total in the garden, and they have 8 legs in total\" is correct if there are two cranes and one turtle. Thus, there is a combination of numbers of cranes and turtles in which the statement is correct.\n",
    "sample_input2": "\n2 100\n\n",
    "sample_output2": "\nNo\n\nThere is no combination of numbers of cranes and turtles in which this statement is correct.\n",
    "sample_input3": "\n1 2\n\n",
    "sample_output3": "\nYes\n\nWe also consider the case in which there are only cranes or only turtles.",
    "num_id": 59
  },
  {
    "id": "p02641",
    "score": "300",
    "desc": "\nGiven are an integer X and an integer sequence of length N: p_1, \\ldots, p_N.\nAmong the integers not contained in the sequence p_1, \\ldots, p_N (not necessarily positive), find the integer nearest to X, that is, find the integer whose absolute difference with X is the minimum. If there are multiple such integers, report the smallest such integer.\n",
    "constraints": "\n\n1 \\leq X \\leq 100\n0 \\leq N \\leq 100\n1 \\leq p_i \\leq 100\np_1, \\ldots, p_N are all distinct.\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX N\np_1 ... p_N\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n6 5\n4 7 10 6 5\n\n",
    "sample_output1": "\n8\n\nAmong the integers not contained in the sequence 4, 7, 10, 6, 5, the one nearest to 6 is 8.\n",
    "sample_input2": "\n10 5\n4 7 10 6 5\n\n",
    "sample_output2": "\n9\n\nAmong the integers not contained in the sequence 4, 7, 10, 6, 5, the ones nearest to 10 are 9 and 11. We should print the smaller one, 9.\n",
    "sample_input3": "\n100 0\n\n\n",
    "sample_output3": "\n100\n\nWhen N = 0, the second line in the input will be empty. Also, as seen here, X itself can be the answer.",
    "num_id": 60
  },
  {
    "id": "p02645",
    "score": "100",
    "desc": "\nWhen you asked some guy in your class his name, he called himself S, where S is a string of length between 3 and 20 (inclusive) consisting of lowercase English letters.\nYou have decided to choose some three consecutive characters from S and make it his nickname. Print a string that is a valid nickname for him.\n",
    "constraints": "\n\n3 \\leq |S| \\leq 20\nS consists of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint your answer.\n",
    "sample_input1": "\ntakahashi\n\n",
    "sample_output1": "\ntak\n\n",
    "sample_input2": "\nnaohiro\n\n",
    "sample_output2": "\nnao\n",
    "num_id": 61
  },
  {
    "id": "p02646",
    "score": "200",
    "desc": "\nTwo children are playing tag on a number line. (In the game of tag, the child called \"it\" tries to catch the other child.) The child who is \"it\" is now at coordinate A, and he can travel the distance of V per second.\nThe other child is now at coordinate B, and she can travel the distance of W per second.\nHe can catch her when his coordinate is the same as hers.\nDetermine whether he can catch her within T seconds (including exactly T seconds later).\nWe assume that both children move optimally.\n",
    "constraints": "\n\n-10^9 \\leq A,B \\leq 10^9\n1 \\leq V,W \\leq 10^9\n1 \\leq  T \\leq 10^9\nA \\neq B\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA V\nB W\nT\n\n",
    "output_desc": "\nIf \"it\" can catch the other child, print YES; otherwise, print NO.\n",
    "sample_input1": "\n1 2\n3 1\n3\n\n",
    "sample_output1": "\nYES\n\n",
    "sample_input2": "\n1 2\n3 2\n3\n\n",
    "sample_output2": "\nNO\n\n",
    "sample_input3": "\n1 2\n3 3\n3\n\n",
    "sample_output3": "\nNO\n",
    "num_id": 62
  },
  {
    "id": "p02657",
    "score": "100",
    "desc": "\nCompute A \\times B.\n",
    "constraints": "\n\n1 \\leq A \\leq 100\n1 \\leq B \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nPrint the value A \\times B as an integer.\n",
    "sample_input1": "\n2 5\n\n",
    "sample_output1": "\n10\n\nWe have 2 \\times 5 = 10.\n",
    "sample_input2": "\n100 100\n\n",
    "sample_output2": "\n10000\n",
    "num_id": 63
  },
  {
    "id": "p02658",
    "score": "200",
    "desc": "\nGiven N integers A_1, ..., A_N, compute A_1 \\times ... \\times A_N.\nHowever, if the result exceeds 10^{18}, print -1 instead.\n",
    "constraints": "\n\n2 \\leq N \\leq 10^5\n0 \\leq A_i \\leq 10^{18}\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 ... A_N\n\n",
    "output_desc": "\nPrint the value A_1 \\times ... \\times A_N as an integer, or -1 if the value exceeds 10^{18}.\n",
    "sample_input1": "\n2\n1000000000 1000000000\n\n",
    "sample_output1": "\n1000000000000000000\n\nWe have 1000000000 \\times 1000000000 = 1000000000000000000.\n",
    "sample_input2": "\n3\n101 9901 999999000001\n\n",
    "sample_output2": "\n-1\n\nWe have 101 \\times 9901 \\times 999999000001 = 1000000000000000001, which exceeds 10^{18}, so we should print -1 instead.\n",
    "sample_input3": "\n31\n4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 0\n\n",
    "sample_output3": "\n0\n",
    "num_id": 64
  },
  {
    "id": "p02659",
    "score": "300",
    "desc": "\nCompute A \\times B, truncate its fractional part, and print the result as an integer.\n",
    "constraints": "\n\n0 \\leq A \\leq 10^{15}\n0 \\leq B < 10\nA is an integer.\nB is a number with two digits after the decimal point.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nPrint the answer as an integer.\n",
    "sample_input1": "\n198 1.10\n\n",
    "sample_output1": "\n217\n\nWe have 198 \\times 1.10 = 217.8. After truncating the fractional part, we have the answer: 217.\n",
    "sample_input2": "\n1 0.01\n\n",
    "sample_output2": "\n0\n\n",
    "sample_input3": "\n1000000000000000 9.99\n\n",
    "sample_output3": "\n9990000000000000\n",
    "num_id": 65
  },
  {
    "id": "p02663",
    "score": "100",
    "desc": "\nIn this problem, we use the 24-hour clock.\nTakahashi gets up exactly at the time H_1 : M_1 and goes to bed exactly at the time H_2 : M_2. (See Sample Inputs below for clarity.)\nHe has decided to study for K consecutive minutes while he is up.\nWhat is the length of the period in which he can start studying?\n",
    "constraints": "\n\n0 \\le H_1, H_2 \\le 23\n0 \\le M_1, M_2 \\le 59\nThe time H_1 : M_1 comes before the time H_2 : M_2.\nK \\ge 1\nTakahashi is up for at least K minutes.\nAll values in input are integers (without leading zeros).\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nH_1 M_1 H_2 M_2 K\n\n",
    "output_desc": "\nPrint the length of the period in which he can start studying, as an integer.\n",
    "sample_input1": "\n10 0 15 0 30\n\n",
    "sample_output1": "\n270\n\nTakahashi gets up at exactly ten in the morning and goes to bed at exactly three in the afternoon.\nIt takes 30 minutes to do the study, so he can start it in the period between ten o'clock and half-past two. The length of this period is 270 minutes, so we should print 270.\n",
    "sample_input2": "\n10 0 12 0 120\n\n",
    "sample_output2": "\n0\n\nTakahashi gets up at exactly ten in the morning and goes to bed at exactly noon. It takes 120 minutes to do the study, so he has to start it at exactly ten o'clock. Thus, we should print 0.",
    "num_id": 66
  },
  {
    "id": "p02664",
    "score": "200",
    "desc": "\nFor a string S consisting of the uppercase English letters P and D, let the doctoral and postdoctoral quotient of S be the total number of occurrences of D and PD in S as contiguous substrings. For example, if S = PPDDP, it contains two occurrences of D and one occurrence of PD as contiguous substrings, so the doctoral and postdoctoral quotient of S is 3.\nWe have a string T consisting of P, D, and ?.\nAmong the strings that can be obtained by replacing each ? in T with P or D, find one with the maximum possible doctoral and postdoctoral quotient.\n",
    "constraints": "\n\n1 \\leq |T| \\leq 2 \\times 10^5\nT consists of P, D, and ?.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nT\n\n",
    "output_desc": "\nPrint one string with the maximum possible doctoral and postdoctoral quotient among the strings that can be obtained by replacing each ? in T with P or D.\nIf there are multiple such strings, you may print any of them.\n",
    "sample_input1": "\nPD?D??P\n\n",
    "sample_output1": "\nPDPDPDP\n\nThis string contains three occurrences of D and three occurrences of PD as contiguous substrings, so its doctoral and postdoctoral quotient is 6, which is the maximum doctoral and postdoctoral quotient of a string obtained by replacing each ? in T with P or D.\n",
    "sample_input2": "\nP?P?\n\n",
    "sample_output2": "\nPDPD\n",
    "num_id": 67
  },
  {
    "id": "p02675",
    "score": "100",
    "desc": "\n\nThe cat Snuke wants to play a popular Japanese game called \u00c5tCoder, so Iroha has decided to teach him Japanese.\nWhen counting pencils in Japanese, the counter word \"\u672c\" follows the number. The pronunciation of this word varies depending on the number. Specifically, the pronunciation of \"\u672c\" in the phrase \"N \u672c\" for a positive integer N not exceeding 999 is as follows:\n\nhon when the digit in the one's place of N is 2, 4, 5, 7, or 9;\npon when the digit in the one's place of N is 0, 1, 6 or 8;\nbon when the digit in the one's place of N is 3.\n\nGiven N, print the pronunciation of \"\u672c\" in the phrase \"N \u672c\".\n",
    "constraints": "\n\n\nN is a positive integer not exceeding 999.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\n\nPrint the answer.\n",
    "sample_input1": "\n16\n\n",
    "sample_output1": "\npon\n\nThe digit in the one's place of 16 is 6, so the \"\u672c\" in \"16 \u672c\" is pronounced pon.\n",
    "sample_input2": "\n2\n\n",
    "sample_output2": "\nhon\n\n",
    "sample_input3": "\n183\n\n",
    "sample_output3": "\nbon\n",
    "num_id": 68
  },
  {
    "id": "p02676",
    "score": "200",
    "desc": "\n\nWe have a string S consisting of lowercase English letters.\nIf the length of S is at most K, print S without change.\nIf the length of S exceeds K, extract the first K characters in S, append ... to the end of them, and print the result.\n",
    "constraints": "\n\n\nK is an integer between 1 and 100 (inclusive).\nS is a string consisting of lowercase English letters.\nThe length of S is between 1 and 100 (inclusive).\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nK\nS\n\n",
    "output_desc": "\n\nPrint a string as stated in Problem Statement.\n",
    "sample_input1": "\n7\nnikoandsolstice\n\n",
    "sample_output1": "\nnikoand...\n\nnikoandsolstice has a length of 15, which exceeds K=7.\nWe should extract the first 7 characters in this string, append ... to the end of them, and print the result nikoand....\n",
    "sample_input2": "\n40\nferelibenterhominesidquodvoluntcredunt\n\n",
    "sample_output2": "\nferelibenterhominesidquodvoluntcredunt\n\nThe famous quote from Gaius Julius Caesar.",
    "num_id": 69
  },
  {
    "id": "p02677",
    "score": "300",
    "desc": "\n\nConsider an analog clock whose hour and minute hands are A and B centimeters long, respectively.\nAn endpoint of the hour hand and an endpoint of the minute hand are fixed at the same point, around which each hand rotates clockwise at constant angular velocity. It takes the hour and minute hands 12 hours and 1 hour to make one full rotation, respectively.\nAt 0 o'clock, the two hands overlap each other. H hours and M minutes later, what is the distance in centimeters between the unfixed endpoints of the hands?\n",
    "constraints": "\n\n\nAll values in input are integers.\n1 \\leq A, B \\leq 1000\n0 \\leq H \\leq 11\n0 \\leq M \\leq 59\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nA B H M\n\n",
    "output_desc": "\n\nPrint the answer without units. Your output will be accepted when its absolute or relative error from the correct value is at most 10^{-9}.\n",
    "sample_input1": "\n3 4 9 0\n\n",
    "sample_output1": "\n5.00000000000000000000\n\nThe two hands will be in the positions shown in the figure below, so the answer is 5 centimeters.\n\n",
    "sample_input2": "\n3 4 10 40\n\n",
    "sample_output2": "\n4.56425719433005567605\n\nThe two hands will be in the positions shown in the figure below. Note that each hand always rotates at constant angular velocity.\n",
    "num_id": 70
  },
  {
    "id": "p02681",
    "score": "100",
    "desc": "\nTakahashi wants to be a member of some web service.\nHe tried to register himself with the ID S, which turned out to be already used by another user.\nThus, he decides to register using a string obtained by appending one character at the end of S as his ID.\nHe is now trying to register with the ID T. Determine whether this string satisfies the property above.\n",
    "constraints": "\n\nS and T are strings consisting of lowercase English letters.\n1 \\leq |S| \\leq 10\n|T| = |S| + 1\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\nT\n\n",
    "output_desc": "\nIf T satisfies the property in Problem Statement, print Yes; otherwise, print No.\n",
    "sample_input1": "\nchokudai\nchokudaiz\n\n",
    "sample_output1": "\nYes\n\nchokudaiz can be obtained by appending z at the end of chokudai.\n",
    "sample_input2": "\nsnuke\nsnekee\n\n",
    "sample_output2": "\nNo\n\nsnekee cannot be obtained by appending one character at the end of snuke.\n",
    "sample_input3": "\na\naa\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 71
  },
  {
    "id": "p02682",
    "score": "200",
    "desc": "\nWe have A cards, each of which has an integer 1 written on it. Similarly, we also have B cards with 0s and C cards with -1s.\nWe will pick up K among these cards. What is the maximum possible sum of the numbers written on the cards chosen?\n",
    "constraints": "\n\nAll values in input are integers.\n0 \\leq A, B, C\n1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C K\n\n",
    "output_desc": "\nPrint the maximum possible sum of the numbers written on the cards chosen.\n",
    "sample_input1": "\n2 1 1 3\n\n",
    "sample_output1": "\n2\n\nConsider picking up two cards with 1s and one card with a 0.\nIn this case, the sum of the numbers written on the cards is 2, which is the maximum possible value.\n",
    "sample_input2": "\n1 2 3 4\n\n",
    "sample_output2": "\n0\n\n",
    "sample_input3": "\n2000000000 0 0 2000000000\n\n",
    "sample_output3": "\n2000000000\n",
    "num_id": 72
  },
  {
    "id": "p02687",
    "score": "100",
    "desc": "\nAtCoder Inc. holds a contest every Saturday.\nThere are two types of contests called ABC and ARC, and just one of them is held at a time.\nThe company holds these two types of contests alternately: an ARC follows an ABC and vice versa.\nGiven a string S representing the type of the contest held last week, print the string representing the type of the contest held this week.\n",
    "constraints": "\n\nS is ABC or ARC.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the string representing the type of the contest held this week.\n",
    "sample_input1": "\nABC\n\n",
    "sample_output1": "\nARC\n\nThey held an ABC last week, so they will hold an ARC this week.",
    "num_id": 73
  },
  {
    "id": "p02688",
    "score": "200",
    "desc": "\nN Snukes called Snuke 1, Snuke 2, ..., Snuke N live in a town.\nThere are K kinds of snacks sold in this town, called Snack 1, Snack 2, ..., Snack K. The following d_i Snukes have Snack i: Snuke A_{i, 1}, A_{i, 2}, \\cdots, A_{i, {d_i}}.\nTakahashi will walk around this town and make mischief on the Snukes who have no snacks. How many Snukes will fall victim to Takahashi's mischief?\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 100\n1 \\leq K \\leq 100\n1 \\leq d_i \\leq N\n1 \\leq A_{i, 1} < \\cdots < A_{i, d_i} \\leq N\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\nd_1\nA_{1, 1} \\cdots A_{1, d_1}\n\\vdots\nd_K\nA_{K, 1} \\cdots A_{K, d_K}\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n3 2\n2\n1 3\n1\n3\n\n",
    "sample_output1": "\n1\n\n\nSnuke 1 has Snack 1.\nSnuke 2 has no snacks.\nSnuke 3 has Snack 1 and 2.\n\nThus, there will be one victim: Snuke 2.\n",
    "sample_input2": "\n3 3\n1\n3\n1\n3\n1\n3\n\n",
    "sample_output2": "\n2\n",
    "num_id": 74
  },
  {
    "id": "p02693",
    "score": "100",
    "desc": "\n\nTakahashi the Jumbo will practice golf.\nHis objective is to get a carry distance that is a multiple of K, while he can only make a carry distance of between A and B (inclusive).\nIf he can achieve the objective, print OK; if he cannot, print NG.\n",
    "constraints": "\n\n\nAll values in input are integers.\n1 \\leq A \\leq B \\leq 1000\n1 \\leq K \\leq 1000\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nK\nA B\n\n",
    "output_desc": "\n\nIf he can achieve the objective, print OK; if he cannot, print NG.\n",
    "sample_input1": "\n7\n500 600\n\n",
    "sample_output1": "\nOK\n\nAmong the multiples of 7, for example, 567 lies between 500 and 600.\n",
    "sample_input2": "\n4\n5 7\n\n",
    "sample_output2": "\nNG\n\nNo multiple of 4 lies between 5 and 7.\n",
    "sample_input3": "\n1\n11 11\n\n",
    "sample_output3": "\nOK\n",
    "num_id": 75
  },
  {
    "id": "p02694",
    "score": "200",
    "desc": "\n\nTakahashi has a deposit of 100 yen (the currency of Japan) in AtCoder Bank.\nThe bank pays an annual interest rate of 1 % compounded annually. (A fraction of less than one yen is discarded.)\nAssuming that nothing other than the interest affects Takahashi's balance, in how many years does the balance reach X yen or above for the first time?\n",
    "constraints": "\n\n\n 101 \\le X \\le 10^{18} \nAll values in input are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nX\n\n",
    "output_desc": "\n\nPrint the number of years it takes for Takahashi's balance to reach X yen or above for the first time.\n",
    "sample_input1": "\n103\n\n",
    "sample_output1": "\n3\n\n\nThe balance after one year is 101 yen.\nThe balance after two years is 102 yen.\nThe balance after three years is 103 yen.\n\nThus, it takes three years for the balance to reach 103 yen or above.\n",
    "sample_input2": "\n1000000000000000000\n\n",
    "sample_output2": "\n3760\n\n",
    "sample_input3": "\n1333333333\n\n",
    "sample_output3": "\n1706\n",
    "num_id": 76
  },
  {
    "id": "p02699",
    "score": "100",
    "desc": "\nThere are S sheep and W wolves.\nIf the number of wolves is greater than or equal to that of sheep, the wolves will attack the sheep.\nIf the wolves will attack the sheep, print unsafe; otherwise, print safe.\n",
    "constraints": "\n\n1 \\leq S \\leq 100\n1 \\leq W \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS W\n\n",
    "output_desc": "\nIf the wolves will attack the sheep, print unsafe; otherwise, print safe.\n",
    "sample_input1": "\n4 5\n\n",
    "sample_output1": "\nunsafe\n\nThere are four sheep and five wolves. The number of wolves is not less than that of sheep, so they will attack them.\n",
    "sample_input2": "\n100 2\n\n",
    "sample_output2": "\nsafe\n\nMany a sheep drive away two wolves.\n",
    "sample_input3": "\n10 10\n\n",
    "sample_output3": "\nunsafe\n",
    "num_id": 77
  },
  {
    "id": "p02700",
    "score": "200",
    "desc": "\nTakahashi and Aoki will have a battle using their monsters.\nThe health and strength of Takahashi's monster are A and B, respectively, and those of Aoki's monster are C and D, respectively.\nThe two monsters will take turns attacking, in the order Takahashi's, Aoki's, Takahashi's, Aoki's, ...\nHere, an attack decreases the opponent's health by the value equal to the attacker's strength.\nThe monsters keep attacking until the health of one monster becomes 0 or below. The person with the monster whose health becomes 0 or below loses, and the other person wins.\nIf Takahashi will win, print Yes; if he will lose, print No.\n",
    "constraints": "\n\n1 \\leq A,B,C,D \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C D\n\n",
    "output_desc": "\nIf Takahashi will win, print Yes; if he will lose, print No.\n",
    "sample_input1": "\n10 9 10 10\n\n",
    "sample_output1": "\nNo\n\nFirst, Takahashi's monster attacks Aoki's monster, whose health is now 10-9=1.\nNext, Aoki's monster attacks Takahashi's monster, whose health is now 10-10=0.\nTakahashi's monster is the first to have 0 or less health, so Takahashi loses.\n",
    "sample_input2": "\n46 4 40 5\n\n",
    "sample_output2": "\nYes\n",
    "num_id": 78
  },
  {
    "id": "p02701",
    "score": "300",
    "desc": "\nYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n",
    "constraints": "\n\n1 \\leq N \\leq 2\\times 10^5\nS_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n",
    "output_desc": "\nPrint the number of kinds of items you got.\n",
    "sample_input1": "\n3\napple\norange\napple\n\n",
    "sample_output1": "\n2\n\nYou got two kinds of items: apple and orange.\n",
    "sample_input2": "\n5\ngrape\ngrape\ngrape\ngrape\ngrape\n\n",
    "sample_output2": "\n1\n\n",
    "sample_input3": "\n4\naaaa\na\naaa\naa\n\n",
    "sample_output3": "\n4\n",
    "num_id": 79
  },
  {
    "id": "p02705",
    "score": "100",
    "desc": "\nPrint the circumference of a circle of radius R.\n",
    "constraints": "\n\n1 \\leq R \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nR\n\n",
    "output_desc": "\nPrint the circumference of the circle.\nYour output is considered correct if and only if its absolute or relative error from our answer is at most 10^{-2}.\n",
    "sample_input1": "\n1\n\n",
    "sample_output1": "\n6.28318530717958623200\n\nSince we accept an absolute or relative error of at most 10^{-2}, 6.28 is also an acceptable output, but 6 is not.\n",
    "sample_input2": "\n73\n\n",
    "sample_output2": "\n458.67252742410977361942\n",
    "num_id": 80
  },
  {
    "id": "p02706",
    "score": "200",
    "desc": "\nTakahashi has N days of summer vacation.\nHis teacher gave him M summer assignments. It will take A_i days for him to do the i-th assignment.\nHe cannot do multiple assignments on the same day, or hang out on a day he does an assignment.\nWhat is the maximum number of days Takahashi can hang out during the vacation if he finishes all the assignments during this vacation?\nIf Takahashi cannot finish all the assignments during the vacation, print -1 instead.\n",
    "constraints": "\n\n1 \\leq N \\leq 10^6\n1 \\leq M \\leq 10^4\n1 \\leq A_i \\leq 10^4\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN M\nA_1 ... A_M\n\n",
    "output_desc": "\nPrint the maximum number of days Takahashi can hang out during the vacation, or -1.\n",
    "sample_input1": "\n41 2\n5 6\n\n",
    "sample_output1": "\n30\n\nFor example, he can do the first assignment on the first 5 days, hang out on the next 30 days, and do the second assignment on the last 6 days of the vacation. In this way, he can safely spend 30 days hanging out.\n",
    "sample_input2": "\n10 2\n5 6\n\n",
    "sample_output2": "\n-1\n\nHe cannot finish his assignments.\n",
    "sample_input3": "\n11 2\n5 6\n\n",
    "sample_output3": "\n0\n\nHe can finish his assignments, but he will have no time to hang out.\n",
    "sample_input4": "\n314 15\n9 26 5 35 8 9 79 3 23 8 46 2 6 43 3\n\n",
    "sample_output4": "\n9\n",
    "num_id": 81
  },
  {
    "id": "p02707",
    "score": "300",
    "desc": "\nA company has N members, who are assigned ID numbers 1, ..., N.\nEvery member, except the member numbered 1, has exactly one immediate boss with a smaller ID number.\nWhen a person X is the immediate boss of a person Y, the person Y is said to be an immediate subordinate of the person X.\nYou are given the information that the immediate boss of the member numbered i is the member numbered A_i. For each member, find how many immediate subordinates it has.\n",
    "constraints": "\n\n2 \\leq N \\leq 2 \\times 10^5\n1 \\leq A_i < i\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_2 ... A_N\n\n",
    "output_desc": "\nFor each of the members numbered 1, 2, ..., N, print the number of immediate subordinates it has, in its own line.\n",
    "sample_input1": "\n5\n1 1 2 2\n\n",
    "sample_output1": "\n2\n2\n0\n0\n0\n\nThe member numbered 1 has two immediate subordinates: the members numbered 2 and 3.\nThe member numbered 2 has two immediate subordinates: the members numbered 4 and 5.\nThe members numbered 3, 4, and 5 do not have immediate subordinates.\n",
    "sample_input2": "\n10\n1 1 1 1 1 1 1 1 1\n\n",
    "sample_output2": "\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n",
    "sample_input3": "\n7\n1 2 3 4 5 6\n\n",
    "sample_output3": "\n1\n1\n1\n1\n1\n1\n0\n",
    "num_id": 82
  },
  {
    "id": "p02711",
    "score": "100",
    "desc": "\nGiven is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.\n",
    "constraints": "\n\n100 \\leq N \\leq 999\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nIf N contains the digit 7, print Yes; otherwise, print No.\n",
    "sample_input1": "\n117\n\n",
    "sample_output1": "\nYes\n\n117 contains 7 as its last digit.\n",
    "sample_input2": "\n123\n\n",
    "sample_output2": "\nNo\n\n123 does not contain the digit 7.\n",
    "sample_input3": "\n777\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 83
  },
  {
    "id": "p02712",
    "score": "200",
    "desc": "\nLet us define the FizzBuzz sequence a_1,a_2,... as follows:\n\nIf both 3 and 5 divides i, a_i=\\mbox{FizzBuzz}.\nIf the above does not hold but 3 divides i, a_i=\\mbox{Fizz}.\nIf none of the above holds but 5 divides i, a_i=\\mbox{Buzz}.\nIf none of the above holds, a_i=i.\n\nFind the sum of all numbers among the first N terms of the FizzBuzz sequence.\n",
    "constraints": "\n\n1 \\leq N \\leq 10^6\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the sum of all numbers among the first N terms of the FizzBuzz sequence.\n",
    "sample_input1": "\n15\n\n",
    "sample_output1": "\n60\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\n",
    "sample_input2": "\n1000000\n\n",
    "sample_output2": "\n266666333332\n\nWatch out for overflow.",
    "num_id": 84
  },
  {
    "id": "p02713",
    "score": "300",
    "desc": "\nFind \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\nHere \\gcd(a,b,c) denotes the greatest common divisor of a, b, and c.\n",
    "constraints": "\n\n1 \\leq K \\leq 200\nK is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nK\n\n",
    "output_desc": "\nPrint the value of \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\n",
    "sample_input1": "\n2\n\n",
    "sample_output1": "\n9\n\n\\gcd(1,1,1)+\\gcd(1,1,2)+\\gcd(1,2,1)+\\gcd(1,2,2)\n+\\gcd(2,1,1)+\\gcd(2,1,2)+\\gcd(2,2,1)+\\gcd(2,2,2)\n=1+1+1+1+1+1+1+2=9\nThus, the answer is 9.\n",
    "sample_input2": "\n200\n\n",
    "sample_output2": "\n10813692\n",
    "num_id": 85
  },
  {
    "id": "p02717",
    "score": "100",
    "desc": "\n\nWe have three boxes A, B, and C, each of which contains an integer.\nCurrently, the boxes A, B, and C contain the integers X, Y, and Z, respectively.\nWe will now do the operations below in order. Find the content of each box afterward.  \n\nSwap the contents of the boxes A and B\nSwap the contents of the boxes A and C\n\n",
    "constraints": "\n\n\n1 \\leq X,Y,Z \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nX Y Z\n\n",
    "output_desc": "\n\nPrint the integers contained in the boxes A, B, and C, in this order, with space in between.\n",
    "sample_input1": "\n1 2 3\n\n",
    "sample_output1": "\n3 1 2\n\nAfter the contents of the boxes A and B are swapped, A, B, and C contain 2, 1, and 3, respectively.\nThen, after the contents of A and C are swapped, A, B, and C contain 3, 1, and 2, respectively.  \n",
    "sample_input2": "\n100 100 100\n\n",
    "sample_output2": "\n100 100 100\n\n",
    "sample_input3": "\n41 59 31\n\n",
    "sample_output3": "\n31 41 59\n",
    "num_id": 86
  },
  {
    "id": "p02718",
    "score": "200",
    "desc": "\nWe have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.\n",
    "constraints": "\n\n1 \\leq M \\leq N \\leq 100\n1 \\leq A_i \\leq 1000\nA_i are distinct.\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN M\nA_1 ... A_N\n\n",
    "output_desc": "\nIf M popular items can be selected, print Yes; otherwise, print No.\n",
    "sample_input1": "\n4 1\n5 4 2 1\n\n",
    "sample_output1": "\nYes\n\nThere were 12 votes in total. The most popular item received 5 votes, and we can select it.\n",
    "sample_input2": "\n3 2\n380 19 1\n\n",
    "sample_output2": "\nNo\n\nThere were 400 votes in total. The second and third most popular items received less than \\dfrac{1}{4\\times 2} of the total number of votes, so we cannot select them. Thus, we cannot select two popular items.\n",
    "sample_input3": "\n12 3\n4 56 78 901 2 345 67 890 123 45 6 789\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 87
  },
  {
    "id": "p02719",
    "score": "300",
    "desc": "\nGiven any integer x, Aoki can do the operation below.\nOperation: Replace x with the absolute difference of x and K.\nYou are given the initial value of an integer N. Find the minimum possible value taken by N after Aoki does the operation zero or more times.\n",
    "constraints": "\n\n0 \u2264 N \u2264 10^{18}\n1 \u2264 K \u2264 10^{18}\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\n\n",
    "output_desc": "\nPrint the minimum possible value taken by N after Aoki does the operation zero or more times.\n",
    "sample_input1": "\n7 4\n\n",
    "sample_output1": "\n1\n\nInitially, N=7.\nAfter one operation, N becomes |7-4| = 3.\nAfter two operations, N becomes |3-4| = 1, which is the minimum value taken by N.\n",
    "sample_input2": "\n2 6\n\n",
    "sample_output2": "\n2\n\nN=2 after zero operations is the minimum.\n",
    "sample_input3": "\n1000000000000000000 1\n\n",
    "sample_output3": "\n0\n",
    "num_id": 88
  },
  {
    "id": "p02723",
    "score": "100",
    "desc": "\nA string of length 6 consisting of lowercase English letters is said to be coffee-like if and only if its 3-rd and 4-th characters are equal and its 5-th and 6-th characters are also equal.\nGiven a string S, determine whether it is coffee-like.\n",
    "constraints": "\n\nS is a string of length 6 consisting of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nIf S is coffee-like, print Yes; otherwise, print No.\n",
    "sample_input1": "\nsippuu\n\n",
    "sample_output1": "\nYes\n\nIn sippuu, the 3-rd and 4-th characters are equal, and the 5-th and 6-th characters are also equal.\n",
    "sample_input2": "\niphone\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\ncoffee\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 89
  },
  {
    "id": "p02724",
    "score": "200",
    "desc": "\nTakahashi loves gold coins. He gains 1000 happiness points for each 500-yen coin he has and gains 5 happiness points for each 5-yen coin he has. (Yen is the currency of Japan.)\nTakahashi has X yen. If he exchanges his money so that he will gain the most happiness points, how many happiness points will he earn?\n(We assume that there are six kinds of coins available: 500-yen, 100-yen, 50-yen, 10-yen, 5-yen, and 1-yen coins.)\n",
    "constraints": "\n\n0 \\leq X \\leq 10^9\nX is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX\n\n",
    "output_desc": "\nPrint the maximum number of happiness points that can be earned.\n",
    "sample_input1": "\n1024\n\n",
    "sample_output1": "\n2020\n\nBy exchanging his money so that he gets two 500-yen coins and four 5-yen coins, he gains 2020 happiness points, which is the maximum number of happiness points that can be earned.\n",
    "sample_input2": "\n0\n\n",
    "sample_output2": "\n0\n\nHe is penniless - or yenless.\n",
    "sample_input3": "\n1000000000\n\n",
    "sample_output3": "\n2000000000\n\nHe is a billionaire - in yen.",
    "num_id": 90
  },
  {
    "id": "p02725",
    "score": "300",
    "desc": "\nThere is a circular pond with a perimeter of K meters, and N houses around them.\nThe i-th house is built at a distance of A_i meters from the northmost point of the pond, measured clockwise around the pond.\nWhen traveling between these houses, you can only go around the pond.\nFind the minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.\n",
    "constraints": "\n\n2 \\leq K \\leq 10^6\n2 \\leq N \\leq 2 \\times 10^5\n0 \\leq A_1 < ... < A_N < K\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nK N\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.\n",
    "sample_input1": "\n20 3\n5 10 15\n\n",
    "sample_output1": "\n10\n\nIf you start at the 1-st house and go to the 2-nd and 3-rd houses in this order, the total distance traveled will be 10.\n",
    "sample_input2": "\n20 3\n0 5 15\n\n",
    "sample_output2": "\n10\n\nIf you start at the 2-nd house and go to the 1-st and 3-rd houses in this order, the total distance traveled will be 10.",
    "num_id": 91
  },
  {
    "id": "p02729",
    "score": "100",
    "desc": "\n\nWe have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.\n",
    "constraints": "\n\n\n0 \\leq N,M \\leq 100\n2 \\leq N+M\nAll values in input are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nN M\n\n",
    "output_desc": "\n\nPrint the answer.\n",
    "sample_input1": "\n2 1\n\n",
    "sample_output1": "\n1\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n\nIf we choose the two balls with 1 and 2, the sum is odd;\nIf we choose the two balls with 1 and 4, the sum is odd;\nIf we choose the two balls with 2 and 4, the sum is even.\n\nThus, the answer is 1.\n",
    "sample_input2": "\n4 3\n\n",
    "sample_output2": "\n9\n\n",
    "sample_input3": "\n1 1\n\n",
    "sample_output3": "\n0\n\n",
    "sample_input4": "\n13 3\n\n",
    "sample_output4": "\n81\n\n",
    "sample_input5": "\n0 3\n\n",
    "sample_output5": "\n3\n",
    "num_id": 92
  },
  {
    "id": "p02730",
    "score": "200",
    "desc": "\nA string S of an odd length is said to be a strong palindrome if and only if all of the following conditions are satisfied:\n\nS is a palindrome.\nLet N be the length of S. The string formed by the 1-st through ((N-1)/2)-th characters of S is a palindrome.\nThe string consisting of the (N+3)/2-st through N-th characters of S is a palindrome.\n\nDetermine whether S is a strong palindrome.\n",
    "constraints": "\n\nS consists of lowercase English letters.\nThe length of S is an odd number between 3 and 99 (inclusive).\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nIf S is a strong palindrome, print Yes;\notherwise, print No.\n",
    "sample_input1": "\nakasaka\n\n",
    "sample_output1": "\nYes\n\n\nS is akasaka.\nThe string formed by the 1-st through the 3-rd characters is aka.\nThe string formed by the 5-th through the 7-th characters is aka.\nAll of these are palindromes, so S is a strong palindrome.\n\n",
    "sample_input2": "\nlevel\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\natcoder\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 93
  },
  {
    "id": "p02731",
    "score": "300",
    "desc": "\nGiven is a positive integer L.\nFind the maximum possible volume of a rectangular cuboid whose sum of the dimensions (not necessarily integers) is L.\n",
    "constraints": "\n\n1 \u2264 L \u2264 1000\nL is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nL\n\n",
    "output_desc": "\nPrint the maximum possible volume of a rectangular cuboid whose sum of the dimensions (not necessarily integers) is L.\nYour output is considered correct if its absolute or relative error from our answer is at most 10^{-6}.\n",
    "sample_input1": "\n3\n\n",
    "sample_output1": "\n1.000000000000\n\nFor example, a rectangular cuboid whose dimensions are 0.8, 1, and 1.2 has a volume of 0.96.\nOn the other hand, if the dimensions are 1, 1, and 1, the volume of the rectangular cuboid is 1, which is greater.\n",
    "sample_input2": "\n999\n\n",
    "sample_output2": "\n36926037.000000000000\n",
    "num_id": 94
  },
  {
    "id": "p02742",
    "score": "200",
    "desc": "\nWe have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:\n\n",
    "constraints": "\n\n1 \\leq H, W \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nH \\ W\n\n",
    "output_desc": "\nPrint the number of squares the bishop can reach.\n",
    "sample_input1": "\n4 5\n\n",
    "sample_output1": "\n10\n\nThe bishop can reach the cyan squares in the following figure:\n\n",
    "sample_input2": "\n7 3\n\n",
    "sample_output2": "\n11\n\nThe bishop can reach the cyan squares in the following figure:\n\n",
    "sample_input3": "\n1000000000 1000000000\n\n",
    "sample_output3": "\n500000000000000000\n",
    "num_id": 95
  },
  {
    "id": "p02743",
    "score": "300",
    "desc": "\nDoes \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?\n",
    "constraints": "\n\n1 \\leq a, b, c \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na \\ b \\ c\n\n",
    "output_desc": "\nIf \\sqrt{a} + \\sqrt{b} < \\sqrt{c}, print Yes; otherwise, print No.\n",
    "sample_input1": "\n2 3 9\n\n",
    "sample_output1": "\nNo\n\n\\sqrt{2} + \\sqrt{3} < \\sqrt{9} does not hold.\n",
    "sample_input2": "\n2 3 10\n\n",
    "sample_output2": "\nYes\n\n\\sqrt{2} + \\sqrt{3} < \\sqrt{10} holds.",
    "num_id": 96
  },
  {
    "id": "p02747",
    "score": "100",
    "desc": "\n\nA Hitachi string is a concatenation of one or more copies of the string hi.\nFor example, hi and hihi are Hitachi strings, while ha and hii are not.\nGiven a string S, determine whether S is a Hitachi string.\n",
    "constraints": "\n\n\nThe length of S is between 1 and 10 (inclusive).\nS is a string consisting of lowercase English letters.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\n\nIf S is a Hitachi string, print Yes; otherwise, print No.\n",
    "sample_input1": "\nhihi\n\n",
    "sample_output1": "\nYes\n\nhihi is the concatenation of two copies of hi, so it is a Hitachi string.\n",
    "sample_input2": "\nhi\n\n",
    "sample_output2": "\nYes\n\n",
    "sample_input3": "\nha\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 97
  },
  {
    "id": "p02753",
    "score": "100",
    "desc": "\nIn AtCoder City, there are three stations numbered 1, 2, and 3.\nEach of these stations is operated by one of the two railway companies, A and B. A string S of length 3 represents which company operates each station. If S_i is A, Company A operates Station i; if S_i is B, Company B operates Station i.\nTo improve the transportation condition, for each pair of a station operated by Company A and one operated by Company B, there will be a bus service connecting them.\nDetermine if there is a pair of stations that will be connected by a bus service.\n",
    "constraints": "\n\nEach character of S is A or B.\n|S| = 3\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nIf there is a pair of stations that will be connected by a bus service, print Yes; otherwise, print No.\n",
    "sample_input1": "\nABA\n\n",
    "sample_output1": "\nYes\n\nCompany A operates Station 1 and 3, while Company B operates Station 2.\nThere will be a bus service between Station 1 and 2, and between Station 2 and 3, so print Yes.\n",
    "sample_input2": "\nBBA\n\n",
    "sample_output2": "\nYes\n\nCompany B operates Station 1 and 2, while Company A operates Station 3.\nThere will be a bus service between Station 1 and 3, and between Station 2 and 3, so print Yes.\n",
    "sample_input3": "\nBBB\n\n",
    "sample_output3": "\nNo\n\nCompany B operates all the stations. Thus, there will be no bus service, so print No.",
    "num_id": 98
  },
  {
    "id": "p02754",
    "score": "200",
    "desc": "\nTakahashi has many red balls and blue balls. Now, he will place them in a row.\nInitially, there is no ball placed.\nTakahashi, who is very patient, will do the following operation 10^{100} times:\n\nPlace A blue balls at the end of the row of balls already placed. Then, place B red balls at the end of the row.\n\nHow many blue balls will be there among the first N balls in the row of balls made this way?\n",
    "constraints": "\n\n1 \\leq N \\leq 10^{18}\nA, B \\geq 0\n0 < A + B \\leq 10^{18}\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN A B\n\n",
    "output_desc": "\nPrint the number of blue balls that will be there among the first N balls in the row of balls.\n",
    "sample_input1": "\n8 3 4\n\n",
    "sample_output1": "\n4\n\nLet b denote a blue ball, and r denote a red ball. The first eight balls in the row will be bbbrrrrb, among which there are four blue balls.\n",
    "sample_input2": "\n8 0 4\n\n",
    "sample_output2": "\n0\n\nHe placed only red balls from the beginning.\n",
    "sample_input3": "\n6 2 4\n\n",
    "sample_output3": "\n2\n\nAmong bbrrrr, there are two blue balls.",
    "num_id": 99
  },
  {
    "id": "p02755",
    "score": "300",
    "desc": "\nFind the price of a product before tax such that, when the consumption tax rate is 8 percent and 10 percent, the amount of consumption tax levied on it is A yen and B yen, respectively. (Yen is the currency of Japan.)\nHere, the price before tax must be a positive integer, and the amount of consumption tax is rounded down to the nearest integer.\nIf multiple prices satisfy the condition, print the lowest such price; if no price satisfies the condition, print -1.\n",
    "constraints": "\n\n1 \\leq A \\leq B \\leq 100\nA and B are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nIf there is a price that satisfies the condition, print an integer representing the lowest such price; otherwise, print -1.\n",
    "sample_input1": "\n2 2\n\n",
    "sample_output1": "\n25\n\nIf the price of a product before tax is 25 yen, the amount of consumption tax levied on it is:\n\nWhen the consumption tax rate is 8 percent: \\lfloor 25 \\times 0.08 \\rfloor = \\lfloor 2 \\rfloor = 2 yen.\nWhen the consumption tax rate is 10 percent: \\lfloor 25 \\times 0.1 \\rfloor = \\lfloor 2.5 \\rfloor = 2 yen.\n\nThus, the price of 25 yen satisfies the condition. There are other possible prices, such as 26 yen, but print the minimum such price, 25.\n",
    "sample_input2": "\n8 10\n\n",
    "sample_output2": "\n100\n\nIf the price of a product before tax is 100 yen, the amount of consumption tax levied on it is:\n\nWhen the consumption tax rate is 8 percent: \\lfloor 100 \\times 0.08 \\rfloor = 8 yen.\nWhen the consumption tax rate is 10 percent: \\lfloor 100 \\times 0.1 \\rfloor = 10 yen.\n\n",
    "sample_input3": "\n19 99\n\n",
    "sample_output3": "\n-1\n\nThere is no price before tax satisfying this condition, so print -1.",
    "num_id": 100
  },
  {
    "id": "p02759",
    "score": "100",
    "desc": "\nTakahashi wants to print a document with N pages double-sided, where two pages of data can be printed on one sheet of paper.\nAt least how many sheets of paper does he need?\n",
    "constraints": "\n\nN is an integer.\n1 \\leq N \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n5\n\n",
    "sample_output1": "\n3\n\nBy printing the 1-st, 2-nd pages on the 1-st sheet, 3-rd and 4-th pages on the 2-nd sheet, and 5-th page on the 3-rd sheet, we can print all the data on 3 sheets of paper.\n",
    "sample_input2": "\n2\n\n",
    "sample_output2": "\n1\n\n",
    "sample_input3": "\n100\n\n",
    "sample_output3": "\n50\n",
    "num_id": 101
  },
  {
    "id": "p02761",
    "score": "300",
    "desc": "\nIf there is an integer not less than 0 satisfying the following conditions, print the smallest such integer; otherwise, print -1.\n\nThe integer has exactly N digits in base ten. (We assume 0 to be a 1-digit integer. For other integers, leading zeros are not allowed.)\nThe s_i-th digit from the left is c_i. \\left(i = 1, 2, \\cdots, M\\right)\n\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 3\n0 \\leq M \\leq 5\n1 \\leq s_i \\leq N\n0 \\leq c_i \\leq 9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN M\ns_1 c_1\n\\vdots\ns_M c_M\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n3 3\n1 7\n3 2\n1 7\n\n",
    "sample_output1": "\n702\n\n702 satisfies the conditions - its 1-st and 3-rd digits are 7 and 2, respectively - while no non-negative integer less than 702 satisfies them.\n",
    "sample_input2": "\n3 2\n2 1\n2 3\n\n",
    "sample_output2": "\n-1\n\n",
    "sample_input3": "\n3 1\n1 0\n\n",
    "sample_output3": "\n-1\n",
    "num_id": 102
  },
  {
    "id": "p02765",
    "score": "100",
    "desc": "\nTakahashi is a member of a programming competition site, ButCoder.\nEach member of ButCoder is assigned two values: Inner Rating and Displayed Rating.\nThe Displayed Rating of a member is equal to their Inner Rating if the member has participated in 10 or more contests. Otherwise, the Displayed Rating will be their Inner Rating minus 100 \\times (10 - K) when the member has participated in K contests.\nTakahashi has participated in N contests, and his Displayed Rating is R. Find his Inner Rating.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 100\n0 \\leq R \\leq 4111\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN R\n\n",
    "output_desc": "\nPrint his Inner Rating.\n",
    "sample_input1": "\n2 2919\n\n",
    "sample_output1": "\n3719\n\nTakahashi has participated in 2 contests, which is less than 10, so his Displayed Rating is his Inner Rating minus 100 \\times (10 - 2) = 800.\nThus, Takahashi's Inner Rating is 2919 + 800 = 3719.\n",
    "sample_input2": "\n22 3051\n\n",
    "sample_output2": "\n3051\n",
    "num_id": 103
  },
  {
    "id": "p02766",
    "score": "200",
    "desc": "\nGiven is an integer N. Find the number of digits that N has in base K.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 10^9\n2 \\leq K \\leq 10\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\n\n",
    "output_desc": "\nPrint the number of digits that N has in base K.\n",
    "sample_input1": "\n11 2\n\n",
    "sample_output1": "\n4\n\nIn binary, 11 is represented as 1011.\n",
    "sample_input2": "\n1010101 10\n\n",
    "sample_output2": "\n7\n\n",
    "sample_input3": "\n314159265 3\n\n",
    "sample_output3": "\n18\n",
    "num_id": 104
  },
  {
    "id": "p02767",
    "score": "300",
    "desc": "\nThere are N people living on a number line.\nThe i-th person lives at coordinate X_i.\nYou are going to hold a meeting that all N people have to attend.\nThe meeting can be held at any integer coordinate. If you choose to hold the meeting at coordinate P, the i-th person will spend (X_i - P)^2 points of stamina to attend the meeting.\nFind the minimum total points of stamina the N people have to spend.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 100\n1 \\leq X_i \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nX_1 X_2 ... X_N\n\n",
    "output_desc": "\nPrint the minimum total stamina the N people have to spend.\n",
    "sample_input1": "\n2\n1 4\n\n",
    "sample_output1": "\n5\n\nAssume the meeting is held at coordinate 2. In this case, the first person will spend (1 - 2)^2 points of stamina, and the second person will spend (4 - 2)^2 = 4 points of stamina, for a total of 5 points of stamina. This is the minimum total stamina that the 2 people have to spend.\nNote that you can hold the meeting only at an integer coordinate.\n",
    "sample_input2": "\n7\n14 14 2 13 56 2 37\n\n",
    "sample_output2": "\n2354\n",
    "num_id": 105
  },
  {
    "id": "p02771",
    "score": "100",
    "desc": "\n\nA triple of numbers is said to be poor when two of those numbers are equal but the other number is different from those two numbers.\nYou will be given three integers A, B, and C. If this triple is poor, print Yes; otherwise, print No.\n",
    "constraints": "\n\n\nA, B, and C are all integers between 1 and 9 (inclusive).\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\n\nIf the given triple is poor, print Yes; otherwise, print No.\n",
    "sample_input1": "\n5 7 5\n\n",
    "sample_output1": "\nYes\n\nA and C are equal, but B is different from those two numbers, so this triple is poor.\n",
    "sample_input2": "\n4 4 4\n\n",
    "sample_output2": "\nNo\n\nA, B, and C are all equal, so this triple is not poor.\n",
    "sample_input3": "\n4 9 6\n\n",
    "sample_output3": "\nNo\n\n",
    "sample_input4": "\n3 3 4\n\n",
    "sample_output4": "\nYes\n",
    "num_id": 106
  },
  {
    "id": "p02772",
    "score": "200",
    "desc": "\n\nYou are an immigration officer in the Kingdom of AtCoder. The document carried by an immigrant has some number of integers written on it, and you need to check whether they meet certain criteria.\nAccording to the regulation, the immigrant should be allowed entry to the kingdom if and only if the following condition is satisfied:\n\nAll even numbers written on the document are divisible by 3 or 5.\n\nIf the immigrant should be allowed entry according to the regulation, output APPROVED; otherwise, print DENIED.\n",
    "constraints": "\n\n\nAll values in input are integers.\n1 \\leq N \\leq 100\n1 \\leq A_i \\leq 1000\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n\n",
    "output_desc": "\n\nIf the immigrant should be allowed entry according to the regulation, print APPROVED; otherwise, print DENIED.\n",
    "sample_input1": "\n5\n6 7 9 10 31\n\n",
    "sample_output1": "\nAPPROVED\n\nThe even numbers written on the document are 6 and 10.\nAll of them are divisible by 3 or 5, so the immigrant should be allowed entry.\n",
    "sample_input2": "\n3\n28 27 24\n\n",
    "sample_output2": "\nDENIED\n\n28 violates the condition, so the immigrant should not be allowed entry.",
    "num_id": 107
  },
  {
    "id": "p02773",
    "score": "300",
    "desc": "\n\nWe have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.\n",
    "constraints": "\n\n\n1 \\leq N \\leq 2 \\times 10^5\nS_i (1 \\leq i \\leq N) are strings consisting of lowercase English letters.\nThe length of S_i (1 \\leq i \\leq N) is between 1 and 10 (inclusive).\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n",
    "output_desc": "\n\nPrint all strings in question in lexicographical order.\n",
    "sample_input1": "\n7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet\n\n",
    "sample_output1": "\nbeet\nvet\n\nbeet and vet are written on two sheets each, while beat, bed, and bet are written on one vote each. Thus, we should print the strings beet and vet.\n",
    "sample_input2": "\n8\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\n\n",
    "sample_output2": "\nbuffalo\n\n",
    "sample_input3": "\n7\nbass\nbass\nkick\nkick\nbass\nkick\nkick\n\n",
    "sample_output3": "\nkick\n\n",
    "sample_input4": "\n4\nushi\ntapu\nnichia\nkun\n\n",
    "sample_output4": "\nkun\nnichia\ntapu\nushi\n",
    "num_id": 108
  },
  {
    "id": "p02777",
    "score": "100",
    "desc": "\n\nWe have A balls with the string S written on each of them and B balls with the string T written on each of them.\nFrom these balls, Takahashi chooses one with the string U written on it and throws it away.\nFind the number of balls with the string S and balls with the string T that we have now.\n",
    "constraints": "\n\n\nS, T, and U are strings consisting of lowercase English letters.\nThe lengths of S and T are each between 1 and 10 (inclusive).\nS \\not= T\nS=U or T=U.\n1 \\leq A,B \\leq 10\nA and B are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nS T\nA B\nU\n\n",
    "output_desc": "\n\nPrint the answer, with space in between.\n",
    "sample_input1": "\nred blue\n3 4\nred\n\n",
    "sample_output1": "\n2 4\n\nTakahashi chose a ball with red written on it and threw it away.\nNow we have two balls with the string S and four balls with the string T.\n",
    "sample_input2": "\nred blue\n5 5\nblue\n\n",
    "sample_output2": "\n5 4\n\nTakahashi chose a ball with blue written on it and threw it away.\nNow we have five balls with the string S and four balls with the string T.",
    "num_id": 109
  },
  {
    "id": "p02778",
    "score": "200",
    "desc": "\n\nGiven is a string S. Replace every character in S with x and print the result.\n",
    "constraints": "\n\n\nS is a string consisting of lowercase English letters.\nThe length of S is between 1 and 100 (inclusive).\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\n\nReplace every character in S with x and print the result.\n",
    "sample_input1": "\nsardine\n\n",
    "sample_output1": "\nxxxxxxx\n\nReplacing every character in S with x results in xxxxxxx.\n",
    "sample_input2": "\nxxxx\n\n",
    "sample_output2": "\nxxxx\n\n",
    "sample_input3": "\ngone\n\n",
    "sample_output3": "\nxxxx\n",
    "num_id": 110
  },
  {
    "id": "p02779",
    "score": "300",
    "desc": "\nGiven is a sequence of integers A_1, A_2, ..., A_N.\nIf its elements are pairwise distinct, print YES; otherwise, print NO.\n",
    "constraints": "\n\n2 \u2264 N \u2264 200000\n1 \u2264 A_i \u2264 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 ... A_N\n\n",
    "output_desc": "\nIf the elements of the sequence are pairwise distinct, print YES; otherwise, print NO.\n",
    "sample_input1": "\n5\n2 6 1 4 5\n\n",
    "sample_output1": "\nYES\n\nThe elements are pairwise distinct.\n",
    "sample_input2": "\n6\n4 1 3 1 6 2\n\n",
    "sample_output2": "\nNO\n\nThe second and fourth elements are identical.\n",
    "sample_input3": "\n2\n10000000 10000000\n\n",
    "sample_output3": "\nNO\n",
    "num_id": 111
  },
  {
    "id": "p02783",
    "score": "100",
    "desc": "\nServal is fighting with a monster.\nThe health of the monster is H.\nIn one attack, Serval can decrease the monster's health by A.\nThere is no other way to decrease the monster's health.\nServal wins when the monster's health becomes 0 or below.\nFind the number of attacks Serval needs to make before winning.\n",
    "constraints": "\n\n1 \\leq H \\leq 10^4\n1 \\leq A \\leq 10^4\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nH A\n\n",
    "output_desc": "\nPrint the number of attacks Serval needs to make before winning.\n",
    "sample_input1": "\n10 4\n\n",
    "sample_output1": "\n3\n\n\nAfter one attack, the monster's health will be 6.\nAfter two attacks, the monster's health will be 2.\nAfter three attacks, the monster's health will be -2.\n\nThus, Serval needs to make three attacks to win.\n",
    "sample_input2": "\n1 10000\n\n",
    "sample_output2": "\n1\n\n",
    "sample_input3": "\n10000 1\n\n",
    "sample_output3": "\n10000\n",
    "num_id": 112
  },
  {
    "id": "p02784",
    "score": "200",
    "desc": "\nRaccoon is fighting with a monster.\nThe health of the monster is H.\nRaccoon can use N kinds of special moves. Using the i-th move decreases the monster's health by A_i.\nThere is no other way to decrease the monster's health.\nRaccoon wins when the monster's health becomes 0 or below.\nIf Raccoon can win without using the same move twice or more, print Yes; otherwise, print No.\n",
    "constraints": "\n\n1 \\leq H \\leq 10^9\n1 \\leq N \\leq 10^5\n1 \\leq A_i \\leq 10^4\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nH N\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nIf Raccoon can win without using the same move twice or more, print Yes; otherwise, print No.\n",
    "sample_input1": "\n10 3\n4 5 6\n\n",
    "sample_output1": "\nYes\n\nThe monster's health will become 0 or below after, for example, using the second and third moves.\n",
    "sample_input2": "\n20 3\n4 5 6\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\n210 5\n31 41 59 26 53\n\n",
    "sample_output3": "\nYes\n\n",
    "sample_input4": "\n211 5\n31 41 59 26 53\n\n",
    "sample_output4": "\nNo\n",
    "num_id": 113
  },
  {
    "id": "p02785",
    "score": "300",
    "desc": "\nFennec is fighting with N monsters.\nThe health of the i-th monster is H_i.\nFennec can do the following two actions:\n\nAttack: Fennec chooses one monster. That monster's health will decrease by 1.\nSpecial Move: Fennec chooses one monster. That monster's health will become 0.\n\nThere is no way other than Attack and Special Move to decrease the monsters' health.\nFennec wins when all the monsters' healths become 0 or below.\nFind the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning when she can use Special Move at most K times.\n",
    "constraints": "\n\n1 \\leq N \\leq 2 \\times 10^5\n0 \\leq K \\leq 2 \\times 10^5\n1 \\leq H_i \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\nH_1 ... H_N\n\n",
    "output_desc": "\nPrint the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning.\n",
    "sample_input1": "\n3 1\n4 1 5\n\n",
    "sample_output1": "\n5\n\nBy using Special Move on the third monster, and doing Attack four times on the first monster and once on the second monster, Fennec can win with five Attacks.\n",
    "sample_input2": "\n8 9\n7 9 3 2 3 8 4 6\n\n",
    "sample_output2": "\n0\n\nShe can use Special Move on all the monsters.\n",
    "sample_input3": "\n3 0\n1000000000 1000000000 1000000000\n\n",
    "sample_output3": "\n3000000000\n\nWatch out for overflow.",
    "num_id": 114
  },
  {
    "id": "p02789",
    "score": "100",
    "desc": "\n\nTakahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.\n",
    "constraints": "\n\n\n1 \\leq N \\leq 100\n0 \\leq M \\leq N\nAll values in input are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nN M\n\n",
    "output_desc": "\n\nIf Takahashi's submission gets an AC, print Yes; otherwise, print No.\n",
    "sample_input1": "\n3 3\n\n",
    "sample_output1": "\nYes\n\nAll three test cases have been passed, so his submission gets an AC.\n",
    "sample_input2": "\n3 2\n\n",
    "sample_output2": "\nNo\n\nOnly two out of the three test cases have been passed, so his submission does not get an AC.\n",
    "sample_input3": "\n1 1\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 115
  },
  {
    "id": "p02790",
    "score": "200",
    "desc": "\nGiven are 1-digit positive integers a and b. Consider these two strings: the concatenation of b copies of the digit a, and the concatenation of a copies of the digit b. Which of these is lexicographically smaller?\n",
    "constraints": "\n\n1 \\leq a \\leq 9\n1 \\leq b \\leq 9\na and b are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na b\n\n",
    "output_desc": "\nPrint the lexicographically smaller of the two strings. (If the two strings are equal, print one of them.)\n",
    "sample_input1": "\n4 3\n\n",
    "sample_output1": "\n3333\n\nWe have two strings 444 and 3333. Between them, 3333 is the lexicographically smaller.\n",
    "sample_input2": "\n7 7\n\n",
    "sample_output2": "\n7777777\n",
    "num_id": 116
  },
  {
    "id": "p02791",
    "score": "300",
    "desc": "\n\nGiven is a permutation P_1, \\ldots, P_N of 1, \\ldots, N.\nFind the number of integers i (1 \\leq i \\leq N) that satisfy the following condition:  \n\nFor any integer j (1 \\leq j \\leq i), P_i \\leq P_j.\n\n",
    "constraints": "\n\n\n1 \\leq N \\leq 2 \\times 10^5\nP_1, \\ldots, P_N is a permutation of 1, \\ldots, N.  \nAll values in input are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nN\nP_1 ... P_N\n\n",
    "output_desc": "\n\nPrint the number of integers i that satisfy the condition.\n",
    "sample_input1": "\n5\n4 2 5 1 3\n\n",
    "sample_output1": "\n3\n\ni=1, 2, and 4 satisfy the condition, but i=3 does not - for example, P_i > P_j holds for j = 1.\nSimilarly, i=5 does not satisfy the condition, either. Thus, there are three integers that satisfy the condition.\n",
    "sample_input2": "\n4\n4 3 2 1\n\n",
    "sample_output2": "\n4\n\nAll integers i (1 \\leq i \\leq N) satisfy the condition.\n",
    "sample_input3": "\n6\n1 2 3 4 5 6\n\n",
    "sample_output3": "\n1\n\nOnly i=1 satisfies the condition.\n",
    "sample_input4": "\n8\n5 7 4 2 6 8 1 3\n\n",
    "sample_output4": "\n4\n\n",
    "sample_input5": "\n1\n1\n\n",
    "sample_output5": "\n1\n",
    "num_id": 117
  },
  {
    "id": "p02795",
    "score": "100",
    "desc": "\nWe have a grid with H rows and W columns, where all the squares are initially white.\nYou will perform some number of painting operations on the grid.\nIn one operation, you can do one of the following two actions:\n\nChoose one row, then paint all the squares in that row black.\nChoose one column, then paint all the squares in that column black.\n\nAt least how many operations do you need in order to have N or more black squares in the grid?\nIt is guaranteed that, under the conditions in Constraints, having N or more black squares is always possible by performing some number of operations.\n",
    "constraints": "\n\n1 \\leq H \\leq 100\n1 \\leq W \\leq 100\n1 \\leq N \\leq H \\times W\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nH\nW\nN\n\n",
    "output_desc": "\nPrint the minimum number of operations needed.\n",
    "sample_input1": "\n3\n7\n10\n\n",
    "sample_output1": "\n2\n\nYou can have 14 black squares in the grid by performing the \"row\" operation twice, on different rows.\n",
    "sample_input2": "\n14\n12\n112\n\n",
    "sample_output2": "\n8\n\n",
    "sample_input3": "\n2\n100\n200\n\n",
    "sample_output3": "\n2\n",
    "num_id": 118
  },
  {
    "id": "p02801",
    "score": "100",
    "desc": "\nGiven is a lowercase English letter C that is not z. Print the letter that follows C in alphabetical order.\n",
    "constraints": "\n\nC is a lowercase English letter that is not z.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nC\n\n",
    "output_desc": "\nPrint the letter that follows C in alphabetical order.\n",
    "sample_input1": "\na\n\n",
    "sample_output1": "\nb\n\na is followed by b.\n",
    "sample_input2": "\ny\n\n",
    "sample_output2": "\nz\n\ny is followed by z.",
    "num_id": 119
  },
  {
    "id": "p02811",
    "score": "100",
    "desc": "\nTakahashi has K 500-yen coins. (Yen is the currency of Japan.)\nIf these coins add up to X yen or more, print Yes; otherwise, print No.\n",
    "constraints": "\n\n1 \\leq K \\leq 100\n1 \\leq X \\leq 10^5\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nK X\n\n",
    "output_desc": "\nIf the coins add up to X yen or more, print Yes; otherwise, print No.\n",
    "sample_input1": "\n2 900\n\n",
    "sample_output1": "\nYes\n\nTwo 500-yen coins add up to 1000 yen, which is not less than X = 900 yen.\n",
    "sample_input2": "\n1 501\n\n",
    "sample_output2": "\nNo\n\nOne 500-yen coin is worth 500 yen, which is less than X = 501 yen.\n",
    "sample_input3": "\n4 2000\n\n",
    "sample_output3": "\nYes\n\nFour 500-yen coins add up to 2000 yen, which is not less than X = 2000 yen.",
    "num_id": 120
  },
  {
    "id": "p02812",
    "score": "200",
    "desc": "\nWe have a string S of length N consisting of uppercase English letters.\nHow many times does ABC occur in S as contiguous subsequences (see Sample Inputs and Outputs)?\n",
    "constraints": "\n\n3 \\leq N \\leq 50\nS consists of uppercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS\n\n",
    "output_desc": "\nPrint number of occurrences of ABC in S as contiguous subsequences.\n",
    "sample_input1": "\n10\nZABCDBABCQ\n\n",
    "sample_output1": "\n2\n\nTwo contiguous subsequences of S are equal to ABC: the 2-nd through 4-th characters, and the 7-th through 9-th characters.\n",
    "sample_input2": "\n19\nTHREEONEFOURONEFIVE\n\n",
    "sample_output2": "\n0\n\nNo contiguous subsequences of S are equal to ABC.\n",
    "sample_input3": "\n33\nABCCABCBABCCABACBCBBABCBCBCBCABCB\n\n",
    "sample_output3": "\n5\n",
    "num_id": 121
  },
  {
    "id": "p02813",
    "score": "300",
    "desc": "\nWe have two permutations P and Q of size N (that is, P and Q are both rearrangements of (1,~2,~...,~N)).\nThere are N! possible permutations of size N. Among them, let P and Q be the a-th and b-th lexicographically smallest permutations, respectively. Find |a - b|.\n",
    "constraints": "\n\n2 \\leq N \\leq 8\nP and Q are permutations of size N.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nP_1 P_2 ... P_N\nQ_1 Q_2 ... Q_N\n\n",
    "output_desc": "\nPrint |a - b|.\n",
    "sample_input1": "\n3\n1 3 2\n3 1 2\n\n",
    "sample_output1": "\n3\n\nThere are 6 permutations of size 3: (1,~2,~3), (1,~3,~2), (2,~1,~3), (2,~3,~1), (3,~1,~2), and (3,~2,~1). Among them, (1,~3,~2) and (3,~1,~2) come 2-nd and 5-th in lexicographical order, so the answer is |2 - 5| = 3.\n",
    "sample_input2": "\n8\n7 3 5 4 2 1 6 8\n3 8 2 5 4 6 7 1\n\n",
    "sample_output2": "\n17517\n\n",
    "sample_input3": "\n3\n1 2 3\n1 2 3\n\n",
    "sample_output3": "\n0\n",
    "num_id": 122
  },
  {
    "id": "p02817",
    "score": "100",
    "desc": "\nGiven are two strings S and T consisting of lowercase English letters. Concatenate T and S in this order, without space in between, and print the resulting string.\n",
    "constraints": "\n\nS and T are strings consisting of lowercase English letters.\nThe lengths of S and T are between 1 and 100 (inclusive).\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS T\n\n",
    "output_desc": "\nPrint the resulting string.\n",
    "sample_input1": "\noder atc\n\n",
    "sample_output1": "\natcoder\n\nWhen S =  oder and T =  atc, concatenating T and S in this order results in atcoder.\n",
    "sample_input2": "\nhumu humu\n\n",
    "sample_output2": "\nhumuhumu\n",
    "num_id": 123
  },
  {
    "id": "p02818",
    "score": "200",
    "desc": "\nTakahashi has A cookies, and Aoki has B cookies.\nTakahashi will do the following action K times:\n\nIf Takahashi has one or more cookies, eat one of his cookies.\nOtherwise, if Aoki has one or more cookies, eat one of Aoki's cookies.\nIf they both have no cookies, do nothing.\n\nIn the end, how many cookies will Takahashi and Aoki have, respectively?\n",
    "constraints": "\n\n0 \\leq A \\leq 10^{12}\n0 \\leq B \\leq 10^{12}\n0 \\leq K \\leq 10^{12}\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B K\n\n",
    "output_desc": "\nPrint the numbers of Takahashi's and Aoki's cookies after K actions.\n",
    "sample_input1": "\n2 3 3\n\n",
    "sample_output1": "\n0 2\n\nTakahashi will do the following:\n\nHe has two cookies, so he eats one of them.\nNow he has one cookie left, and he eats it.\nNow he has no cookies left, but Aoki has three, so Takahashi eats one of them.\n\nThus, in the end, Takahashi will have 0 cookies, and Aoki will have 2.\n",
    "sample_input2": "\n500000000000 500000000000 1000000000000\n\n",
    "sample_output2": "\n0 0\n\nWatch out for overflows.",
    "num_id": 124
  },
  {
    "id": "p02819",
    "score": "300",
    "desc": "\n\nFind the minimum prime number greater than or equal to X.\n",
    "constraints": "\n\n\n 2 \\le X \\le 10^5 \nAll values in input are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nX\n\n",
    "output_desc": "\n\nPrint the minimum prime number greater than or equal to X.\n",
    "sample_input1": "\n20\n\n",
    "sample_output1": "\n23\n\nThe minimum prime number greater than or equal to 20 is 23.\n",
    "sample_input2": "\n2\n\n",
    "sample_output2": "\n2\n\nX itself can be a prime number.\n",
    "sample_input3": "\n99992\n\n",
    "sample_output3": "\n100003\n",
    "num_id": 125
  },
  {
    "id": "p02829",
    "score": "100",
    "desc": "\n\nTakahashi is solving quizzes. He has easily solved all but the last one.\nThe last quiz has three choices: 1, 2, and 3.\nWith his supernatural power, Takahashi has found out that the choices A and B are both wrong.\nPrint the correct choice for this problem.\n",
    "constraints": "\n\n\nEach of the numbers A and B is 1, 2, or 3.\nA and B are different.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nA\nB\n\n",
    "output_desc": "\n\nPrint the correct choice.\n",
    "sample_input1": "\n3\n1\n\n",
    "sample_output1": "\n2\n\nWhen we know 3 and 1 are both wrong, the correct choice is 2.\n",
    "sample_input2": "\n1\n2\n\n",
    "sample_output2": "\n3\n",
    "num_id": 126
  },
  {
    "id": "p02830",
    "score": "200",
    "desc": "\nGiven are strings s and t of length N each, both consisting of lowercase English letters.\nLet us form a new string by alternating the characters of S and the characters of T, as follows: the first character of S, the first character of T, the second character of S, the second character of T, ..., the N-th character of S, the N-th character of T. Print this new string.\n",
    "constraints": "\n\n1 \\leq N \\leq 100\n|S| = |T| = N\nS and T are strings consisting of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS T\n\n",
    "output_desc": "\nPrint the string formed.\n",
    "sample_input1": "\n2\nip cc\n\n",
    "sample_output1": "\nicpc\n\n",
    "sample_input2": "\n8\nhmhmnknk uuuuuuuu\n\n",
    "sample_output2": "\nhumuhumunukunuku\n\n",
    "sample_input3": "\n5\naaaaa aaaaa\n\n",
    "sample_output3": "\naaaaaaaaaa\n",
    "num_id": 127
  },
  {
    "id": "p02831",
    "score": "300",
    "desc": "\n\nTakahashi is organizing a party.\nAt the party, each guest will receive one or more snack pieces.\nTakahashi predicts that the number of guests at this party will be A or B.\nFind the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.\nWe assume that a piece cannot be divided and distributed to multiple guests.\n",
    "constraints": "\n\n\n1 \\leq A, B \\leq 10^5\nA \\neq B\nAll values in input are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\n\nPrint the minimum number of pieces that can be evenly distributed to the guests in both of the cases with A guests and B guests.\n",
    "sample_input1": "\n2 3\n\n",
    "sample_output1": "\n6\n\nWhen we have six snack pieces, each guest can take three pieces if we have two guests, and each guest can take two if we have three guests.\n",
    "sample_input2": "\n123 456\n\n",
    "sample_output2": "\n18696\n\n",
    "sample_input3": "\n100000 99999\n\n",
    "sample_output3": "\n9999900000\n",
    "num_id": 128
  },
  {
    "id": "p02835",
    "score": "100",
    "desc": "\nGiven are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n",
    "constraints": "\n\n1 \\leq A_i \\leq 13 \\ \\ (i=1,2,3)\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA_1 A_2 A_3\n\n",
    "output_desc": "\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.\n",
    "sample_input1": "\n5 7 9\n\n",
    "sample_output1": "\nwin\n\n5+7+9=21, so print win.\n",
    "sample_input2": "\n13 7 2\n\n",
    "sample_output2": "\nbust\n\n13+7+2=22, so print bust.",
    "num_id": 129
  },
  {
    "id": "p02836",
    "score": "200",
    "desc": "\n\nTakahashi loves palindromes. Non-palindromic strings are unacceptable to him. Each time he hugs a string, he can change one of its characters to any character of his choice.\nGiven is a string S. Find the minimum number of hugs needed to make S palindromic.\n",
    "constraints": "\n\n\nS is a string consisting of lowercase English letters.\nThe length of S is between 1 and 100 (inclusive).\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\n\nPrint the minimum number of hugs needed to make S palindromic.\n",
    "sample_input1": "\nredcoder\n\n",
    "sample_output1": "\n1\n\nFor example, we can change the fourth character to o and get a palindrome redooder.\n",
    "sample_input2": "\nvvvvvv\n\n",
    "sample_output2": "\n0\n\nWe might need no hugs at all.\n",
    "sample_input3": "\nabcdabc\n\n",
    "sample_output3": "\n2\n",
    "num_id": 130
  },
  {
    "id": "p02841",
    "score": "100",
    "desc": "\n\nIn this problem, a date is written as Y-M-D. For example, 2019-11-30 means November 30, 2019.\nIntegers M_1, D_1, M_2, and D_2 will be given as input.\nIt is known that the date 2019-M_2-D_2 follows 2019-M_1-D_1.\nDetermine whether the date 2019-M_1-D_1 is the last day of a month.\n",
    "constraints": "\n\n\nBoth 2019-M_1-D_1 and 2019-M_2-D_2 are valid dates in the Gregorian calendar.\nThe date 2019-M_2-D_2 follows 2019-M_1-D_1.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nM_1 D_1\nM_2 D_2\n\n",
    "output_desc": "\n\nIf the date 2019-M_1-D_1 is the last day of a month, print 1; otherwise, print 0.\n",
    "sample_input1": "\n11 16\n11 17\n\n",
    "sample_output1": "\n0\n\nNovember 16 is not the last day of a month.\n",
    "sample_input2": "\n11 30\n12 1\n\n",
    "sample_output2": "\n1\n\nNovember 30 is the last day of November.",
    "num_id": 131
  },
  {
    "id": "p02842",
    "score": "200",
    "desc": "\n\nTakahashi bought a piece of apple pie at ABC Confiserie. According to his memory, he paid N yen (the currency of Japan) for it.\nThe consumption tax rate for foods in this shop is 8 percent. That is, to buy an apple pie priced at X yen before tax, you have to pay X \\times 1.08 yen (rounded down to the nearest integer).\nTakahashi forgot the price of his apple pie before tax, X, and wants to know it again. Write a program that takes N as input and finds X. We assume X is an integer.\nIf there are multiple possible values for X, find any one of them. Also, Takahashi's memory of N, the amount he paid, may be incorrect. If no value could be X, report that fact.\n",
    "constraints": "\n\n\n1 \\leq N \\leq 50000\nN is an integer.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\n\nIf there are values that could be X, the price of the apple pie before tax, print any one of them.\nIf there are multiple such values, printing any one of them will be accepted.\nIf no value could be X, print :(.\n",
    "sample_input1": "\n432\n\n",
    "sample_output1": "\n400\n\nIf the apple pie is priced at 400 yen before tax, you have to pay 400 \\times 1.08 = 432 yen to buy one.\nOtherwise, the amount you have to pay will not be 432 yen.\n",
    "sample_input2": "\n1079\n\n",
    "sample_output2": "\n:(\n\nThere is no possible price before tax for which you have to pay 1079 yen with tax.\n",
    "sample_input3": "\n1001\n\n",
    "sample_output3": "\n927\n\nIf the apple pie is priced 927 yen before tax, by rounding down 927 \\times 1.08 = 1001.16, you have to pay 1001 yen.",
    "num_id": 132
  },
  {
    "id": "p02843",
    "score": "300",
    "desc": "\n\nAtCoder Mart sells 1000000 of each of the six items below:\n\nRiceballs, priced at 100 yen (the currency of Japan) each\nSandwiches, priced at 101 yen each\nCookies, priced at 102 yen each\nCakes, priced at 103 yen each\nCandies, priced at 104 yen each\nComputers, priced at 105 yen each\n\nTakahashi wants to buy some of them that cost exactly X yen in total.\nDetermine whether this is possible.\n(Ignore consumption tax.)\n",
    "constraints": "\n\n\n1 \\leq X \\leq 100000\nX is an integer.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nX\n\n",
    "output_desc": "\n\nIf it is possible to buy some set of items that cost exactly X yen in total, print 1; otherwise, print 0.\n",
    "sample_input1": "\n615\n\n",
    "sample_output1": "\n1\n\nFor example, we can buy one of each kind of item, which will cost 100+101+102+103+104+105=615 yen in total.\n",
    "sample_input2": "\n217\n\n",
    "sample_output2": "\n0\n\nNo set of items costs 217 yen in total.",
    "num_id": 133
  },
  {
    "id": "p02847",
    "score": "100",
    "desc": "\nGiven is a string S representing the day of the week today.\nS is SUN, MON, TUE, WED, THU, FRI, or SAT, for Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively.\nAfter how many days is the next Sunday (tomorrow or later)?\n",
    "constraints": "\n\nS is SUN, MON, TUE, WED, THU, FRI, or SAT.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the number of days before the next Sunday.\n",
    "sample_input1": "\nSAT\n\n",
    "sample_output1": "\n1\n\nIt is Saturday today, and tomorrow will be Sunday.\n",
    "sample_input2": "\nSUN\n\n",
    "sample_output2": "\n7\n\nIt is Sunday today, and seven days later, it will be Sunday again.",
    "num_id": 134
  },
  {
    "id": "p02848",
    "score": "200",
    "desc": "\nWe have a string S consisting of uppercase English letters. Additionally, an integer N will be given.\nShift each character of S by N in alphabetical order (see below), and print the resulting string.\nWe assume that A follows Z. For example, shifting A by 2 results in C (A \\to B \\to C), and shifting Y by 3 results in B (Y \\to Z \\to A \\to B).\n",
    "constraints": "\n\n0 \\leq N \\leq 26\n1 \\leq |S| \\leq 10^4\nS consists of uppercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS\n\n",
    "output_desc": "\nPrint the string resulting from shifting each character of S by N in alphabetical order.\n",
    "sample_input1": "\n2\nABCXYZ\n\n",
    "sample_output1": "\nCDEZAB\n\nNote that A follows Z.\n",
    "sample_input2": "\n0\nABCXYZ\n\n",
    "sample_output2": "\nABCXYZ\n\n",
    "sample_input3": "\n13\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n",
    "sample_output3": "\nNOPQRSTUVWXYZABCDEFGHIJKLM\n",
    "num_id": 135
  },
  {
    "id": "p02853",
    "score": "100",
    "desc": "\n\nWe held two competitions: Coding Contest and Robot Maneuver.\nIn each competition, the contestants taking the 3-rd, 2-nd, and 1-st places receive 100000, 200000, and 300000 yen (the currency of Japan), respectively. Furthermore, a contestant taking the first place in both competitions receives an additional 400000 yen.\nDISCO-Kun took the X-th place in Coding Contest and the Y-th place in Robot Maneuver.\nFind the total amount of money he earned.\n",
    "constraints": "\n\n\n1 \\leq X \\leq 205\n1 \\leq Y \\leq 205\nX and Y are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nX Y\n\n",
    "output_desc": "\n\nPrint the amount of money DISCO-Kun earned, as an integer.\n",
    "sample_input1": "\n1 1\n\n",
    "sample_output1": "\n1000000\n\nIn this case, he earned 300000 yen in Coding Contest and another 300000 yen in Robot Maneuver. Furthermore, as he won both competitions, he got an additional 400000 yen.\nIn total, he made 300000 + 300000 + 400000 = 1000000 yen.\n",
    "sample_input2": "\n3 101\n\n",
    "sample_output2": "\n100000\n\nIn this case, he earned 100000 yen in Coding Contest.\n",
    "sample_input3": "\n4 4\n\n",
    "sample_output3": "\n0\n\nIn this case, unfortunately, he was the highest-ranked contestant without prize money in both competitions.",
    "num_id": 136
  },
  {
    "id": "p02859",
    "score": "100",
    "desc": "\nGiven is an integer r.\nHow many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proved that the answer is always an integer under the constraints given.\n",
    "constraints": "\n\n1 \\leq r \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nr\n\n",
    "output_desc": "\nPrint the area of a circle of radius r, divided by the area of a circle of radius 1, as an integer.\n",
    "sample_input1": "\n2\n\n",
    "sample_output1": "\n4\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\nNote that output must be an integer - for example, 4.0 will not be accepted.\n",
    "sample_input2": "\n100\n\n",
    "sample_output2": "\n10000\n",
    "num_id": 137
  },
  {
    "id": "p02860",
    "score": "200",
    "desc": "\nGiven are a positive integer N and a string S of length N consisting of lowercase English letters.\nDetermine whether the string is a concatenation of two copies of some string.\nThat is, determine whether there is a string T such that S = T + T.\n",
    "constraints": "\n\n1 \\leq N \\leq 100\nS consists of lowercase English letters.\n|S| = N\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS\n\n",
    "output_desc": "\nIf S is a concatenation of two copies of some string, print Yes; otherwise, print No.\n",
    "sample_input1": "\n6\nabcabc\n\n",
    "sample_output1": "\nYes\n\nLet T =  abc, and S = T + T.\n",
    "sample_input2": "\n6\nabcadc\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\n1\nz\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 138
  },
  {
    "id": "p02865",
    "score": "100",
    "desc": "\nHow many ways are there to choose two distinct positive integers totaling N, disregarding the order?\n",
    "constraints": "\n\n1 \\leq N \\leq 10^6\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n4\n\n",
    "sample_output1": "\n1\n\nThere is only one way to choose two distinct integers totaling 4: to choose 1 and 3. (Choosing 3 and 1 is not considered different from this.)\n",
    "sample_input2": "\n999999\n\n",
    "sample_output2": "\n499999\n",
    "num_id": 139
  },
  {
    "id": "p02866",
    "score": "300",
    "desc": "\nGiven is an integer sequence D_1,...,D_N of N elements. Find the number, modulo 998244353, of trees with N vertices numbered 1 to N that satisfy the following condition:\n\nFor every integer i from 1 to N, the distance between Vertex 1 and Vertex i is D_i.\n\n",
    "constraints": "\n\n1 \\leq N \\leq 10^5\n0 \\leq D_i \\leq N-1\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nD_1 D_2 ... D_N\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n4\n0 1 1 2\n\n",
    "sample_output1": "\n2\n\nFor example, a tree with edges (1,2), (1,3), and (2,4) satisfies the condition.\n",
    "sample_input2": "\n4\n1 1 1 1\n\n",
    "sample_output2": "\n0\n\n",
    "sample_input3": "\n7\n0 3 2 1 2 2 1\n\n",
    "sample_output3": "\n24\n",
    "num_id": 140
  },
  {
    "id": "p02879",
    "score": "100",
    "desc": "\nHaving learned the multiplication table, Takahashi can multiply two integers between 1 and 9 (inclusive) together. He cannot do any other calculation.\nGiven are two integers A and B.\nIf Takahashi can calculate A \\times B, print the result; if he cannot, print -1 instead.\n",
    "constraints": "\n\n1 \\leq A \\leq 20\n1 \\leq B \\leq 20\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nIf Takahashi can calculate A \\times B, print the result; if he cannot, print -1.\n",
    "sample_input1": "\n2 5\n\n",
    "sample_output1": "\n10\n\n2 \\times 5 = 10.\n",
    "sample_input2": "\n5 10\n\n",
    "sample_output2": "\n-1\n\n5\\times 10 = 50, but Takahashi cannot do this calculation, so print -1 instead.\n",
    "sample_input3": "\n9 9\n\n",
    "sample_output3": "\n81\n",
    "num_id": 141
  },
  {
    "id": "p02880",
    "score": "200",
    "desc": "\nHaving learned the multiplication table, Takahashi can multiply two integers between 1 and 9 (inclusive) together.\nGiven an integer N, determine whether N can be represented as the product of two integers between 1 and 9. If it can, print Yes; if it cannot, print No.\n",
    "constraints": "\n\n1 \\leq N \\leq 100\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nIf N can be represented as the product of two integers between 1 and 9 (inclusive), print Yes; if it cannot, print No.\n",
    "sample_input1": "\n10\n\n",
    "sample_output1": "\nYes\n\n10 can be represented as, for example, 2 \\times 5.\n",
    "sample_input2": "\n50\n\n",
    "sample_output2": "\nNo\n\n50 cannot be represented as the product of two integers between 1 and 9.\n",
    "sample_input3": "\n81\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 142
  },
  {
    "id": "p02881",
    "score": "300",
    "desc": "\nTakahashi is standing on a multiplication table with infinitely many rows and columns.\nThe square (i,j) contains the integer i \\times j. Initially, Takahashi is standing at (1,1).\nIn one move, he can move from (i,j) to either (i+1,j) or (i,j+1).\nGiven an integer N, find the minimum number of moves needed to reach a square that contains N.\n",
    "constraints": "\n\n2 \\leq N \\leq 10^{12}\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the minimum number of moves needed to reach a square that contains the integer N.\n",
    "sample_input1": "\n10\n\n",
    "sample_output1": "\n5\n\n(2,5) can be reached in five moves. We cannot reach a square that contains 10 in less than five moves.\n",
    "sample_input2": "\n50\n\n",
    "sample_output2": "\n13\n\n(5, 10) can be reached in 13 moves.\n",
    "sample_input3": "\n10000000019\n\n",
    "sample_output3": "\n10000000018\n\nBoth input and output may be enormous.",
    "num_id": 143
  },
  {
    "id": "p02885",
    "score": "100",
    "desc": "\nThe window of Takahashi's room has a width of A. There are two curtains hung over the window, each of which has a horizontal length of B. (Vertically, the curtains are long enough to cover the whole window.)\nWe will close the window so as to minimize the total horizontal length of the uncovered part of the window.\nFind the total horizontal length of the uncovered parts of the window then.\n",
    "constraints": "\n\n1 \\leq A \\leq 100\n1 \\leq B \\leq 100\nA and B are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nPrint the total horizontal length of the uncovered parts of the window.\n",
    "sample_input1": "\n12 4\n\n",
    "sample_output1": "\n4\n\nWe have a window with a horizontal length of 12, and two curtains, each of length 4, that cover both ends of the window, for example. The uncovered part has a horizontal length of 4.\n",
    "sample_input2": "\n20 15\n\n",
    "sample_output2": "\n0\n\nIf the window is completely covered, print 0.\n",
    "sample_input3": "\n20 30\n\n",
    "sample_output3": "\n0\n\nEach curtain may be longer than the window.",
    "num_id": 144
  },
  {
    "id": "p02886",
    "score": "200",
    "desc": "\nIt's now the season of TAKOYAKI FESTIVAL!\nThis year, N takoyaki (a ball-shaped food with a piece of octopus inside) will be served. The deliciousness of the i-th takoyaki is d_i.\nAs is commonly known, when you eat two takoyaki of deliciousness x and y together, you restore x \\times y health points.\nThere are \\frac{N \\times (N - 1)}{2} ways to choose two from the N takoyaki served in the festival. For each of these choices, find the health points restored from eating the two takoyaki, then compute the sum of these \\frac{N \\times (N - 1)}{2} values.\n",
    "constraints": "\n\nAll values in input are integers.\n2 \\leq N \\leq 50\n0 \\leq d_i \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nd_1 d_2 ... d_N\n\n",
    "output_desc": "\nPrint the sum of the health points restored from eating two takoyaki over all possible choices of two takoyaki from the N takoyaki served.\n",
    "sample_input1": "\n3\n3 1 2\n\n",
    "sample_output1": "\n11\n\nThere are three possible choices:\n\nEat the first and second takoyaki. You will restore 3 health points.\nEat the second and third takoyaki. You will restore 2 health points.\nEat the first and third takoyaki. You will restore 6 health points.\n\nThe sum of these values is 11.\n",
    "sample_input2": "\n7\n5 0 7 8 3 3 2\n\n",
    "sample_output2": "\n312\n",
    "num_id": 145
  },
  {
    "id": "p02887",
    "score": "300",
    "desc": "\nThere are N slimes lining up from left to right. The colors of these slimes will be given as a string S of length N consisting of lowercase English letters. The i-th slime from the left has the color that corresponds to the i-th character of S.\nAdjacent slimes with the same color will fuse into one larger slime without changing the color. If there were a slime adjacent to this group of slimes before fusion, that slime is now adjacent to the new larger slime.\nUltimately, how many slimes will be there?\n",
    "constraints": "\n\n1 \\leq N \\leq 10^5\n|S| = N\nS consists of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS\n\n",
    "output_desc": "\nPrint the final number of slimes.\n",
    "sample_input1": "\n10\naabbbbaaca\n\n",
    "sample_output1": "\n5\n\nUltimately, these slimes will fuse into abaca.\n",
    "sample_input2": "\n5\naaaaa\n\n",
    "sample_output2": "\n1\n\nAll the slimes will fuse into one.\n",
    "sample_input3": "\n20\nxxzaffeeeeddfkkkkllq\n\n",
    "sample_output3": "\n10\n",
    "num_id": 146
  },
  {
    "id": "p02891",
    "score": "300",
    "desc": "\nGiven is a string S. Let T be the concatenation of K copies of S.\nWe can repeatedly perform the following operation: choose a character in T and replace it with a different character.\nFind the minimum number of operations required to satisfy the following condition: any two adjacent characters in T are different.\n",
    "constraints": "\n\n1 \\leq |S| \\leq 100\nS consists of lowercase English letters.\n1 \\leq K \\leq 10^9\nK is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\nK\n\n",
    "output_desc": "\nPrint the minimum number of operations required.\n",
    "sample_input1": "\nissii\n2\n\n",
    "sample_output1": "\n4\n\nT is issiiissii.  For example, we can rewrite it into ispiqisyhi, and now any two adjacent characters are different.\n",
    "sample_input2": "\nqq\n81\n\n",
    "sample_output2": "\n81\n\n",
    "sample_input3": "\ncooooooooonteeeeeeeeeest\n999993333\n\n",
    "sample_output3": "\n8999939997\n",
    "num_id": 147
  },
  {
    "id": "p02897",
    "score": "100",
    "desc": "\nGiven is an integer N.\nTakahashi chooses an integer a from the positive integers not greater than N with equal probability.\nFind the probability that a is odd.\n",
    "constraints": "\n\n1 \\leq N \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the probability that a is odd.\nYour output will be considered correct when its absolute or relative error from the judge's output is at most 10^{-6}.\n",
    "sample_input1": "\n4\n\n",
    "sample_output1": "\n0.5000000000\n\nThere are four positive integers not greater than 4: 1, 2, 3, and 4. Among them, we have two odd numbers: 1 and 3. Thus, the answer is \\frac{2}{4} = 0.5.\n",
    "sample_input2": "\n5\n\n",
    "sample_output2": "\n0.6000000000\n\n",
    "sample_input3": "\n1\n\n",
    "sample_output3": "\n1.0000000000\n",
    "num_id": 148
  },
  {
    "id": "p02898",
    "score": "200",
    "desc": "\n\nN friends of Takahashi has come to a theme park.\nTo ride the most popular roller coaster in the park, you must be at least K centimeters tall.\nThe i-th friend is h_i centimeters tall.\nHow many of the Takahashi's friends can ride the roller coaster?\n",
    "constraints": "\n\n\n 1 \\le N \\le 10^5 \n 1 \\le K \\le 500 \n 1 \\le h_i \\le 500\nAll values in input are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nN K\nh_1 h_2 \\ldots h_N\n\n",
    "output_desc": "\n\nPrint the number of people among the Takahashi's friends who can ride the roller coaster.\n",
    "sample_input1": "\n4 150\n150 140 100 200\n\n",
    "sample_output1": "\n2\n\nTwo of them can ride the roller coaster: the first and fourth friends.\n",
    "sample_input2": "\n1 500\n499\n\n",
    "sample_output2": "\n0\n\n",
    "sample_input3": "\n5 1\n100 200 300 400 500\n\n",
    "sample_output3": "\n5\n",
    "num_id": 149
  },
  {
    "id": "p02899",
    "score": "300",
    "desc": "\n\nTakahashi is a teacher responsible for a class of N students.\nThe students are given distinct student numbers from 1 to N.\nToday, all the students entered the classroom at different times.\nAccording to Takahashi's record, there were A_i students in the classroom when student number i entered the classroom (including student number i).\nFrom these records, reconstruct the order in which the students entered the classroom.\n",
    "constraints": "\n\n\n 1 \\le N \\le 10^5 \n 1 \\le A_i \\le N \n A_i \\neq A_j  (i \\neq j)\nAll values in input are integers.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n",
    "output_desc": "\n\nPrint the student numbers of the students in the order the students entered the classroom.\n",
    "sample_input1": "\n3\n2 3 1\n\n",
    "sample_output1": "\n3 1 2\n\nFirst, student number 3 entered the classroom.\nThen, student number 1 entered the classroom.\nFinally, student number 2 entered the classroom.\n",
    "sample_input2": "\n5\n1 2 3 4 5\n\n",
    "sample_output2": "\n1 2 3 4 5\n\n",
    "sample_input3": "\n8\n8 2 7 3 4 5 6 1\n\n",
    "sample_output3": "\n8 2 4 5 6 7 3 1\n",
    "num_id": 150
  },
  {
    "id": "p02909",
    "score": "100",
    "desc": "\n\nThe weather in Takahashi's town changes day by day, in the following cycle: Sunny, Cloudy, Rainy, Sunny, Cloudy, Rainy, ...\nGiven is a string S representing the weather in the town today. Predict the weather tomorrow.\n",
    "constraints": "\n\n\nS is Sunny, Cloudy, or Rainy.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\n\nPrint a string representing the expected weather tomorrow, in the same format in which input is given.\n",
    "sample_input1": "\nSunny\n\n",
    "sample_output1": "\nCloudy\n\nIn Takahashi's town, a sunny day is followed by a cloudy day.\n",
    "sample_input2": "\nRainy\n\n",
    "sample_output2": "\nSunny\n",
    "num_id": 151
  },
  {
    "id": "p02910",
    "score": "200",
    "desc": "\n\nTakahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.\n",
    "constraints": "\n\n\nS is a string of length between 1 and 100 (inclusive).\nEach character of S is L, R, U, or D.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\n\nPrint Yes if S is easily playable, and No otherwise.\n",
    "sample_input1": "\nRUDLUDR\n\n",
    "sample_output1": "\nYes\n\nEvery character in an odd position (1-st, 3-rd, 5-th, 7-th) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th) is L, U, or D.\nThus, S is easily playable.\n",
    "sample_input2": "\nDULL\n\n",
    "sample_output2": "\nNo\n\nThe 3-rd character is not R, U, nor D, so S is not easily playable.\n",
    "sample_input3": "\nUUUUUUUUUUUUUUU\n\n",
    "sample_output3": "\nYes\n\n",
    "sample_input4": "\nULURU\n\n",
    "sample_output4": "\nNo\n\n",
    "sample_input5": "\nRDULULDURURLRDULRLR\n\n",
    "sample_output5": "\nYes\n",
    "num_id": 152
  },
  {
    "id": "p02915",
    "score": "100",
    "desc": "\nTakahashi is going to set a 3-character password.\nHow many possible passwords are there if each of its characters must be a digit between 1 and N (inclusive)?\n",
    "constraints": "\n\n1 \\leq N \\leq 9\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the number of possible passwords.\n",
    "sample_input1": "\n2\n\n",
    "sample_output1": "\n8\n\nThere are eight possible passwords: 111, 112, 121, 122, 211, 212, 221, and 222.\n",
    "sample_input2": "\n1\n\n",
    "sample_output2": "\n1\n\nThere is only one possible password if you can only use one kind of character.",
    "num_id": 153
  },
  {
    "id": "p02916",
    "score": "200",
    "desc": "\nTakahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.\n",
    "constraints": "\n\nAll values in input are integers.\n2 \\leq N \\leq 20\n1 \\leq A_i \\leq N\nA_1, A_2, ..., A_N are all different.\n1 \\leq B_i \\leq 50\n1 \\leq C_i \\leq 50\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\nB_1 B_2 ... B_N\nC_1 C_2 ... C_{N-1}\n\n",
    "output_desc": "\nPrint the sum of the satisfaction points Takahashi gained, as an integer.\n",
    "sample_input1": "\n3\n3 1 2\n2 5 4\n3 6\n\n",
    "sample_output1": "\n14\n\nTakahashi gained 14 satisfaction points in total, as follows:\n\nFirst, he ate Dish 3 and gained 4 satisfaction points.\nNext, he ate Dish 1 and gained 2 satisfaction points.\nLastly, he ate Dish 2 and gained 5 + 3 = 8 satisfaction points.\n\n",
    "sample_input2": "\n4\n2 3 4 1\n13 5 8 24\n45 9 15\n\n",
    "sample_output2": "\n74\n\n",
    "sample_input3": "\n2\n1 2\n50 50\n50\n\n",
    "sample_output3": "\n150\n",
    "num_id": 154
  },
  {
    "id": "p02917",
    "score": "300",
    "desc": "\nThere is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.\n",
    "constraints": "\n\nAll values in input are integers.\n2 \\leq N \\leq 100\n0 \\leq B_i \\leq 10^5\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nB_1 B_2 ... B_{N-1}\n\n",
    "output_desc": "\nPrint the maximum possible sum of the elements of A.\n",
    "sample_input1": "\n3\n2 5\n\n",
    "sample_output1": "\n9\n\nA can be, for example, ( 2 , 1 , 5 ), ( -1 , -2 , -3 ), or ( 2 , 2 , 5 ). Among those candidates, A = ( 2 , 2 , 5 ) has the maximum possible sum.\n",
    "sample_input2": "\n2\n3\n\n",
    "sample_output2": "\n6\n\n",
    "sample_input3": "\n6\n0 153 10 10 23\n\n",
    "sample_output3": "\n53\n",
    "num_id": 155
  },
  {
    "id": "p02921",
    "score": "100",
    "desc": "\nYou will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.\n",
    "constraints": "\n\nS and T are strings of length 3 each.\nS and T consist of S, C, and R.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\nT\n\n",
    "output_desc": "\nPrint the number of days for which the forecast was correct.\n",
    "sample_input1": "\nCSS\nCSR\n\n",
    "sample_output1": "\n2\n\n\nFor the first day, it was forecast to be cloudy, and it was indeed cloudy.\nFor the second day, it was forecast to be sunny, and it was indeed sunny.\nFor the third day, it was forecast to be sunny, but it was rainy.\n\nThus, the forecast was correct for two days in this case.\n",
    "sample_input2": "\nSSR\nSSR\n\n",
    "sample_output2": "\n3\n\n",
    "sample_input3": "\nRRR\nSSS\n\n",
    "sample_output3": "\n0\n",
    "num_id": 156
  },
  {
    "id": "p02922",
    "score": "200",
    "desc": "\nTakahashi's house has only one socket.\nTakahashi wants to extend it with some number of power strips, each with A sockets, into B or more empty sockets.\nOne power strip with A sockets can extend one empty socket into A empty sockets.\nFind the minimum number of power strips required.\n",
    "constraints": "\n\nAll values in input are integers.\n2 \\leq A \\leq 20\n1 \\leq B \\leq 20\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nPrint the minimum number of power strips required.\n",
    "sample_input1": "\n4 10\n\n",
    "sample_output1": "\n3\n\n3 power strips, each with 4 sockets, extend the socket into 10 empty sockets.\n",
    "sample_input2": "\n8 9\n\n",
    "sample_output2": "\n2\n\n2 power strips, each with 8 sockets, extend the socket into 15 empty sockets.\n",
    "sample_input3": "\n8 8\n\n",
    "sample_output3": "\n1\n",
    "num_id": 157
  },
  {
    "id": "p02923",
    "score": "300",
    "desc": "\nThere are N squares arranged in a row from left to right.\nThe height of the i-th square from the left is H_i.\nYou will land on a square of your choice, then repeat moving to the adjacent square on the right as long as the height of the next square is not greater than that of the current square.\nFind the maximum number of times you can move.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 10^5\n1 \\leq H_i \\leq 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nH_1 H_2 ... H_N\n\n",
    "output_desc": "\nPrint the maximum number of times you can move.\n",
    "sample_input1": "\n5\n10 4 8 7 3\n\n",
    "sample_output1": "\n2\n\nBy landing on the third square from the left, you can move to the right twice.\n",
    "sample_input2": "\n7\n4 4 5 6 6 5 5\n\n",
    "sample_output2": "\n3\n\nBy landing on the fourth square from the left, you can move to the right three times.\n",
    "sample_input3": "\n4\n1 2 3 4\n\n",
    "sample_output3": "\n0\n",
    "num_id": 158
  },
  {
    "id": "p02933",
    "score": "100",
    "desc": "\nYou will be given an integer a and a string s consisting of lowercase English letters as input.\nWrite a program that prints s if a is not less than 3200 and prints red if a is less than 3200.\n",
    "constraints": "\n\n2800 \\leq a < 5000\ns is a string of length between 1 and 10 (inclusive).\nEach character of s is a lowercase English letter.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na\ns\n\n",
    "output_desc": "\nIf a is not less than 3200, print s; if a is less than 3200, print red.\n",
    "sample_input1": "\n3200\npink\n\n",
    "sample_output1": "\npink\n\na = 3200 is not less than 3200, so we print s = pink.\n",
    "sample_input2": "\n3199\npink\n\n",
    "sample_output2": "\nred\n\na = 3199 is less than 3200, so we print red.\n",
    "sample_input3": "\n4049\nred\n\n",
    "sample_output3": "\nred\n\na = 4049 is not less than 3200, so we print s = red.",
    "num_id": 159
  },
  {
    "id": "p02934",
    "score": "200",
    "desc": "\nGiven is a sequence of N integers A_1, \\ldots, A_N.\nFind the (multiplicative) inverse of the sum of the inverses of these numbers, \\frac{1}{\\frac{1}{A_1} + \\ldots + \\frac{1}{A_N}}.\n",
    "constraints": "\n\n1 \\leq N \\leq 100\n1 \\leq A_i \\leq 1000\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n",
    "output_desc": "\nPrint a decimal number (or an integer) representing the value of \\frac{1}{\\frac{1}{A_1} + \\ldots + \\frac{1}{A_N}}.\nYour output will be judged correct when its absolute or relative error from the judge's output is at most 10^{-5}.\n",
    "sample_input1": "\n2\n10 30\n\n",
    "sample_output1": "\n7.5\n\n\\frac{1}{\\frac{1}{10} + \\frac{1}{30}} = \\frac{1}{\\frac{4}{30}} = \\frac{30}{4} = 7.5.\nPrinting 7.50001, 7.49999, and so on will also be accepted.\n",
    "sample_input2": "\n3\n200 200 200\n\n",
    "sample_output2": "\n66.66666666666667\n\n\\frac{1}{\\frac{1}{200} + \\frac{1}{200} + \\frac{1}{200}} = \\frac{1}{\\frac{3}{200}} = \\frac{200}{3} = 66.6666....\nPrinting 6.66666e+1 and so on will also be accepted.\n",
    "sample_input3": "\n1\n1000\n\n",
    "sample_output3": "\n1000\n\n\\frac{1}{\\frac{1}{1000}} = 1000.\nPrinting +1000.0 and so on will also be accepted.",
    "num_id": 160
  },
  {
    "id": "p02935",
    "score": "300",
    "desc": "\nYou have a pot and N ingredients. Each ingredient has a real number parameter called value, and the value of the i-th ingredient (1 \\leq i \\leq N) is v_i.\nWhen you put two ingredients in the pot, they will vanish and result in the formation of a new ingredient. The value of the new ingredient will be (x + y) / 2 where x and y are the values of the ingredients consumed, and you can put this ingredient again in the pot.\nAfter you compose ingredients in this way N-1 times, you will end up with one ingredient. Find the maximum possible value of this ingredient.\n",
    "constraints": "\n\n2 \\leq N \\leq 50\n1 \\leq v_i \\leq 1000\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nv_1 v_2 \\ldots v_N\n\n",
    "output_desc": "\nPrint a decimal number (or an integer) representing the maximum possible value of the last ingredient remaining.\nYour output will be judged correct when its absolute or relative error from the judge's output is at most 10^{-5}.\n",
    "sample_input1": "\n2\n3 4\n\n",
    "sample_output1": "\n3.5\n\nIf you start with two ingredients, the only choice is to put both of them in the pot. The value of the ingredient resulting from the ingredients of values 3 and 4 is (3 + 4) / 2 = 3.5.\nPrinting 3.50001, 3.49999, and so on will also be accepted.\n",
    "sample_input2": "\n3\n500 300 200\n\n",
    "sample_output2": "\n375\n\nYou start with three ingredients this time, and you can choose what to use in the first composition. There are three possible choices:\n\nUse the ingredients of values 500 and 300 to produce an ingredient of value (500 + 300) / 2 = 400. The next composition will use this ingredient and the ingredient of value 200, resulting in an ingredient of value (400 + 200) / 2 = 300.\nUse the ingredients of values 500 and 200 to produce an ingredient of value (500 + 200) / 2 = 350. The next composition will use this ingredient and the ingredient of value 300, resulting in an ingredient of value (350 + 300) / 2 = 325.\nUse the ingredients of values 300 and 200 to produce an ingredient of value (300 + 200) / 2 = 250. The next composition will use this ingredient and the ingredient of value 500, resulting in an ingredient of value (250 + 500) / 2 = 375.\n\nThus, the maximum possible value of the last ingredient remaining is 375.\nPrinting 375.0 and so on will also be accepted.\n",
    "sample_input3": "\n5\n138 138 138 138 138\n\n",
    "sample_output3": "\n138\n",
    "num_id": 161
  },
  {
    "id": "p02939",
    "score": "300",
    "desc": "\nGiven is a string S consisting of lowercase English letters. Find the maximum positive integer K that satisfies the following condition:\n\nThere exists a partition of S into K non-empty strings S=S_1S_2...S_K such that S_i \\neq S_{i+1} (1 \\leq i \\leq K-1).\n\nHere S_1S_2...S_K represents the concatenation of S_1,S_2,...,S_K in this order.\n",
    "constraints": "\n\n1 \\leq |S| \\leq 2 \\times 10^5\nS consists of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the maximum positive integer K that satisfies the condition.\n",
    "sample_input1": "\naabbaa\n\n",
    "sample_output1": "\n4\n\nWe can, for example, divide S into four strings aa, b, ba, and a.\n",
    "sample_input2": "\naaaccacabaababc\n\n",
    "sample_output2": "\n12\n",
    "num_id": 162
  },
  {
    "id": "p02945",
    "score": "100",
    "desc": "\nWe have two integers: A and B.\nPrint the largest number among A + B, A - B, and A \\times B.\n",
    "constraints": "\n\nAll values in input are integers.\n-100 \\leq A,\\ B \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nPrint the largest number among A + B, A - B, and A \\times B.\n",
    "sample_input1": "\n-13 3\n\n",
    "sample_output1": "\n-10\n\nThe largest number among A + B = -10, A - B = -16, and A \\times B = -39 is -10.\n",
    "sample_input2": "\n1 -33\n\n",
    "sample_output2": "\n34\n\nThe largest number among A + B = -32, A - B = 34, and A \\times B = -33 is 34.\n",
    "sample_input3": "\n13 3\n\n",
    "sample_output3": "\n39\n\nThe largest number among A + B = 16, A - B = 10, and A \\times B = 39 is 39.",
    "num_id": 163
  },
  {
    "id": "p02946",
    "score": "200",
    "desc": "\nThere are 2000001 stones placed on a number line. The coordinates of these stones are -1000000, -999999, -999998, \\ldots, 999999, 1000000.\nAmong them, some K consecutive stones are painted black, and the others are painted white.\nAdditionally, we know that the stone at coordinate X is painted black.\nPrint all coordinates that potentially contain a stone painted black, in ascending order.\n",
    "constraints": "\n\n1 \\leq K \\leq 100\n0 \\leq X \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nK X\n\n",
    "output_desc": "\nPrint all coordinates that potentially contain a stone painted black, in ascending order, with spaces in between.\n",
    "sample_input1": "\n3 7\n\n",
    "sample_output1": "\n5 6 7 8 9\n\nWe know that there are three stones painted black, and the stone at coordinate 7 is painted black. There are three possible cases:\n\nThe three stones painted black are placed at coordinates 5, 6, and 7.\nThe three stones painted black are placed at coordinates 6, 7, and 8.\nThe three stones painted black are placed at coordinates 7, 8, and 9.\n\nThus, five coordinates potentially contain a stone painted black: 5, 6, 7, 8, and 9.\n",
    "sample_input2": "\n4 0\n\n",
    "sample_output2": "\n-3 -2 -1 0 1 2 3\n\nNegative coordinates can also contain a stone painted black.\n",
    "sample_input3": "\n1 100\n\n",
    "sample_output3": "\n100\n",
    "num_id": 164
  },
  {
    "id": "p02947",
    "score": "300",
    "desc": "\nWe will call a string obtained by arranging the characters contained in a string a in some order, an anagram of a.\nFor example, greenbin is an anagram of beginner. As seen here, when the same character occurs multiple times, that character must be used that number of times.\nGiven are N strings s_1, s_2, \\ldots, s_N. Each of these strings has a length of 10 and consists of lowercase English characters. Additionally, all of these strings are distinct. Find the number of pairs of integers i, j (1 \\leq i < j \\leq N) such that s_i is an anagram of s_j.\n",
    "constraints": "\n\n2 \\leq N \\leq 10^5\ns_i is a string of length 10.\nEach character in s_i is a lowercase English letter.\ns_1, s_2, \\ldots, s_N are all distinct.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\ns_1\ns_2\n:\ns_N\n\n",
    "output_desc": "\nPrint the number of pairs of integers i, j (1 \\leq i < j \\leq N) such that s_i is an anagram of s_j.\n",
    "sample_input1": "\n3\nacornistnt\npeanutbomb\nconstraint\n\n",
    "sample_output1": "\n1\n\ns_1 = acornistnt is an anagram of s_3 = constraint. There are no other pairs i, j such that s_i is an anagram of s_j, so the answer is 1.\n",
    "sample_input2": "\n2\noneplustwo\nninemodsix\n\n",
    "sample_output2": "\n0\n\nIf there is no pair i, j such that s_i is an anagram of s_j, print 0.\n",
    "sample_input3": "\n5\nabaaaaaaaa\noneplustwo\naaaaaaaaba\ntwoplusone\naaaabaaaaa\n\n",
    "sample_output3": "\n4\n\nNote that the answer may not fit into a 32-bit integer type, though we cannot put such a case here.",
    "num_id": 165
  },
  {
    "id": "p02951",
    "score": "100",
    "desc": "\nWe have two bottles for holding water.\nBottle 1 can hold up to A milliliters of water, and now it contains B milliliters of water.\nBottle 2 contains C milliliters of water.\nWe will transfer water from Bottle 2 to Bottle 1 as much as possible.\nHow much amount of water will remain in Bottle 2?\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq B \\leq A \\leq 20\n1 \\leq C \\leq 20\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nPrint the integer representing the amount of water, in milliliters, that will remain in Bottle 2.\n",
    "sample_input1": "\n6 4 3\n\n",
    "sample_output1": "\n1\n\nWe will transfer two milliliters of water from Bottle 2 to Bottle 1, and one milliliter of water will remain in Bottle 2.\n",
    "sample_input2": "\n8 3 9\n\n",
    "sample_output2": "\n4\n\n",
    "sample_input3": "\n12 3 7\n\n",
    "sample_output3": "\n0\n",
    "num_id": 166
  },
  {
    "id": "p02952",
    "score": "200",
    "desc": "\nGiven is an integer N. Find the number of positive integers less than or equal to N that have an odd number of digits (in base ten without leading zeros).\n",
    "constraints": "\n\n1 \\leq N \\leq 10^5\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the number of positive integers less than or equal to N that have an odd number of digits.\n",
    "sample_input1": "\n11\n\n",
    "sample_output1": "\n9\n\nAmong the positive integers less than or equal to 11, nine integers have an odd number of digits: 1, 2, \\ldots, 9.\n",
    "sample_input2": "\n136\n\n",
    "sample_output2": "\n46\n\nIn addition to 1, 2, \\ldots, 9, another 37 integers also have an odd number of digits: 100, 101, \\ldots, 136.\n",
    "sample_input3": "\n100000\n\n",
    "sample_output3": "\n90909\n",
    "num_id": 167
  },
  {
    "id": "p02953",
    "score": "300",
    "desc": "\nThere are N squares arranged in a row from left to right. The height of the i-th square from the left is H_i.\nFor each square, you will perform either of the following operations once:\n\nDecrease the height of the square by 1.\nDo nothing.\n\nDetermine if it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 10^5\n1 \\leq H_i \\leq 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nH_1 H_2 ... H_N\n\n",
    "output_desc": "\nIf it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right, print Yes; otherwise, print No.\n",
    "sample_input1": "\n5\n1 2 1 1 3\n\n",
    "sample_output1": "\nYes\n\nYou can achieve the objective by decreasing the height of only the second square from the left by 1.\n",
    "sample_input2": "\n4\n1 3 2 1\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\n5\n1 2 3 4 5\n\n",
    "sample_output3": "\nYes\n\n",
    "sample_input4": "\n1\n1000000000\n\n",
    "sample_output4": "\nYes\n",
    "num_id": 168
  },
  {
    "id": "p02957",
    "score": "100",
    "desc": "\nWe have two distinct integers A and B.\nPrint the integer K such that |A - K| = |B - K|.\nIf such an integer does not exist, print IMPOSSIBLE instead.\n",
    "constraints": "\n\nAll values in input are integers.\n0 \\leq A,\\ B \\leq 10^9\nA and B are distinct.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nPrint the integer K satisfying the condition.\nIf such an integer does not exist, print IMPOSSIBLE instead.\n",
    "sample_input1": "\n2 16\n\n",
    "sample_output1": "\n9\n\n|2 - 9| = 7 and |16 - 9| = 7, so 9 satisfies the condition.\n",
    "sample_input2": "\n0 3\n\n",
    "sample_output2": "\nIMPOSSIBLE\n\nNo integer satisfies the condition.\n",
    "sample_input3": "\n998244353 99824435\n\n",
    "sample_output3": "\n549034394\n",
    "num_id": 169
  },
  {
    "id": "p02958",
    "score": "200",
    "desc": "\nWe have a sequence p = {p_1,\\ p_2,\\ ...,\\ p_N} which is a permutation of {1,\\ 2,\\ ...,\\ N}.\nYou can perform the following operation at most once: choose integers i and j (1 \\leq i < j \\leq N), and swap p_i and p_j. Note that you can also choose not to perform it.\nPrint YES if you can sort p in ascending order in this way, and NO otherwise.\n",
    "constraints": "\n\nAll values in input are integers.\n2 \\leq N \\leq 50\np is a permutation of {1,\\ 2,\\ ...,\\ N}.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\np_1 p_2 ... p_N\n\n",
    "output_desc": "\nPrint YES if you can sort p in ascending order in the way stated in the problem statement, and NO otherwise.\n",
    "sample_input1": "\n5\n5 2 3 4 1\n\n",
    "sample_output1": "\nYES\n\nYou can sort p in ascending order by swapping p_1 and p_5.\n",
    "sample_input2": "\n5\n2 4 3 5 1\n\n",
    "sample_output2": "\nNO\n\nIn this case, swapping any two elements does not sort p in ascending order.\n",
    "sample_input3": "\n7\n1 2 3 4 5 6 7\n\n",
    "sample_output3": "\nYES\n\np is already sorted in ascending order, so no operation is needed.",
    "num_id": 170
  },
  {
    "id": "p02959",
    "score": "300",
    "desc": "\nThere are N+1 towns. The i-th town is being attacked by A_i monsters.\nWe have N heroes. The i-th hero can defeat monsters attacking the i-th or (i+1)-th town, for a total of at most B_i monsters.\nWhat is the maximum total number of monsters the heroes can cooperate to defeat?\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 10^5\n1 \\leq A_i \\leq 10^9\n1 \\leq B_i \\leq 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_{N+1}\nB_1 B_2 ... B_N\n\n",
    "output_desc": "\nPrint the maximum total number of monsters the heroes can defeat.\n",
    "sample_input1": "\n2\n3 5 2\n4 5\n\n",
    "sample_output1": "\n9\n\nIf the heroes choose the monsters to defeat as follows, they can defeat nine monsters in total, which is the maximum result.\n\nThe first hero defeats two monsters attacking the first town and two monsters attacking the second town.\nThe second hero defeats three monsters attacking the second town and two monsters attacking the third town.\n\n",
    "sample_input2": "\n3\n5 6 3 8\n5 100 8\n\n",
    "sample_output2": "\n22\n\n",
    "sample_input3": "\n2\n100 1 1\n1 100\n\n",
    "sample_output3": "\n3\n",
    "num_id": 171
  },
  {
    "id": "p02970",
    "score": "200",
    "desc": "\nThere are N apple trees in a row. People say that one of them will bear golden apples.\nWe want to deploy some number of inspectors so that each of these trees will be inspected.\nEach inspector will be deployed under one of the trees. For convenience, we will assign numbers from 1 through N to the trees. An inspector deployed under the i-th tree (1 \\leq i \\leq N) will inspect the trees with numbers between i-D and i+D (inclusive).\nFind the minimum number of inspectors that we need to deploy to achieve the objective.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 20\n1 \\leq D \\leq 20\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN D\n\n",
    "output_desc": "\nPrint the minimum number of inspectors that we need to deploy to achieve the objective.\n",
    "sample_input1": "\n6 2\n\n",
    "sample_output1": "\n2\n\nWe can achieve the objective by, for example, placing an inspector under Tree 3 and Tree 4.\n",
    "sample_input2": "\n14 3\n\n",
    "sample_output2": "\n2\n\n",
    "sample_input3": "\n20 4\n\n",
    "sample_output3": "\n3\n",
    "num_id": 172
  },
  {
    "id": "p02971",
    "score": "300",
    "desc": "\nYou are given a sequence of length N: A_1, A_2, ..., A_N.\nFor each integer i between 1 and N (inclusive), answer the following question:\n\nFind the maximum value among the N-1 elements other than A_i in the sequence.\n\n",
    "constraints": "\n\n2 \\leq N \\leq 200000\n1 \\leq A_i \\leq 200000\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1\n:\nA_N\n\n",
    "output_desc": "\nPrint N lines. The i-th line (1 \\leq i \\leq N) should contain the maximum value among the N-1 elements other than A_i in the sequence.\n",
    "sample_input1": "\n3\n1\n4\n3\n\n",
    "sample_output1": "\n4\n3\n4\n\n\nThe maximum value among the two elements other than A_1, that is, A_2 = 4 and A_3 = 3, is 4.\nThe maximum value among the two elements other than A_2, that is, A_1 = 1 and A_3 = 3, is 3.\nThe maximum value among the two elements other than A_3, that is, A_1 = 1 and A_2 = 4, is 4.\n\n",
    "sample_input2": "\n2\n5\n5\n\n",
    "sample_output2": "\n5\n5\n",
    "num_id": 173
  },
  {
    "id": "p02981",
    "score": "100",
    "desc": "\nN of us are going on a trip, by train or taxi.\nThe train will cost each of us A yen (the currency of Japan).\nThe taxi will cost us a total of B yen.\nHow much is our minimum total travel expense?\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 20\n1 \\leq A \\leq 50\n1 \\leq B \\leq 50\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN A B\n\n",
    "output_desc": "\nPrint an integer representing the minimum total travel expense.\n",
    "sample_input1": "\n4 2 9\n\n",
    "sample_output1": "\n8\n\nThe train will cost us 4 \\times 2 = 8 yen, and the taxi will cost us 9 yen, so the minimum total travel expense is 8 yen.\n",
    "sample_input2": "\n4 2 7\n\n",
    "sample_output2": "\n7\n\n",
    "sample_input3": "\n4 2 8\n\n",
    "sample_output3": "\n8\n",
    "num_id": 174
  },
  {
    "id": "p02983",
    "score": "300",
    "desc": "\nYou are given two non-negative integers L and R.\nWe will choose two integers i and j such that L \\leq i < j \\leq R.\nFind the minimum possible value of (i \\times j) \\mbox{ mod } 2019.\n",
    "constraints": "\n\nAll values in input are integers.\n0 \\leq L < R \\leq 2 \\times 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nL R\n\n",
    "output_desc": "\nPrint the minimum possible value of (i \\times j) \\mbox{ mod } 2019 when i and j are chosen under the given condition.\n",
    "sample_input1": "\n2020 2040\n\n",
    "sample_output1": "\n2\n\nWhen (i, j) = (2020, 2021), (i \\times j) \\mbox{ mod } 2019  = 2.\n",
    "sample_input2": "\n4 5\n\n",
    "sample_output2": "\n20\n\nWe have only one choice: (i, j) = (4, 5).",
    "num_id": 175
  },
  {
    "id": "p02987",
    "score": "100",
    "desc": "\nYou are given a 4-character string S consisting of uppercase English letters.\nDetermine if S consists of exactly two kinds of characters which both appear twice in S.\n",
    "constraints": "\n\nThe length of S is 4.\nS consists of uppercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nIf S consists of exactly two kinds of characters which both appear twice in S, print Yes; otherwise, print No.\n",
    "sample_input1": "\nASSA\n\n",
    "sample_output1": "\nYes\n\nS consists of A and S which both appear twice in S.\n",
    "sample_input2": "\nSTOP\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\nFFEE\n\n",
    "sample_output3": "\nYes\n\n",
    "sample_input4": "\nFREE\n\n",
    "sample_output4": "\nNo\n",
    "num_id": 176
  },
  {
    "id": "p02988",
    "score": "200",
    "desc": "\nWe have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\np_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.\n\n",
    "constraints": "\n\nAll values in input are integers.\n3 \\leq n \\leq 20\np is a permutation of {1,\\ 2,\\ ...,\\ n}.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nn\np_1 p_2 ... p_n\n\n",
    "output_desc": "\nPrint the number of elements p_i (1 < i < n) that satisfy the condition.\n",
    "sample_input1": "\n5\n1 3 5 4 2\n\n",
    "sample_output1": "\n2\n\np_2 = 3 is the second smallest number among p_1 = 1, p_2 = 3, and p_3 = 5. Also, p_4 = 4 is the second smallest number among p_3 = 5, p_4 = 4, and p_5 = 2. These two elements satisfy the condition.\n",
    "sample_input2": "\n9\n9 6 3 2 5 8 7 4 1\n\n",
    "sample_output2": "\n5\n",
    "num_id": 177
  },
  {
    "id": "p02989",
    "score": "300",
    "desc": "\n\n2 \\leq N \\leq 10^5\nN is an even number.\n1 \\leq d_i \\leq 10^5\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nd_1 d_2 ... d_N\n\n",
    "output_desc": "\nPrint the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same.\n",
    "sample_input1": "\n6\n9 1 4 4 6 7\n\n",
    "sample_output1": "\n2\n\nIf we choose K=5 or 6, Problem 1, 5, and 6 will be for ARCs, Problem 2, 3, and 4 will be for ABCs, and the objective is achieved.\nThus, the answer is 2.\n",
    "sample_input2": "\n8\n9 1 14 5 5 4 4 14\n\n",
    "sample_output2": "\n0\n\nThere may be no choice of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same.\n",
    "sample_input3": "\n14\n99592 10342 29105 78532 83018 11639 92015 77204 30914 21912 34519 80835 100000 1\n\n",
    "sample_output3": "\n42685\n",
    "num_id": 178
  },
  {
    "id": "p02993",
    "score": "100",
    "desc": "\n\nThe door of Snuke's laboratory is locked with a security code.\nThe security code is a 4-digit number. We say the security code is hard to enter when it contains two consecutive digits that are the same.\nYou are given the current security code S. If S is hard to enter, print Bad; otherwise, print Good.\n",
    "constraints": "\n\n\nS is a 4-character string consisting of digits.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\n\nIf S is hard to enter, print Bad; otherwise, print Good.\n",
    "sample_input1": "\n3776\n\n",
    "sample_output1": "\nBad\n\nThe second and third digits are the same, so 3776 is hard to enter.\n",
    "sample_input2": "\n8080\n\n",
    "sample_output2": "\nGood\n\nThere are no two consecutive digits that are the same, so 8080 is not hard to enter.\n",
    "sample_input3": "\n1333\n\n",
    "sample_output3": "\nBad\n\n",
    "sample_input4": "\n0024\n\n",
    "sample_output4": "\nBad\n",
    "num_id": 179
  },
  {
    "id": "p02995",
    "score": "300",
    "desc": "\nYou are given four integers A, B, C, and D. Find the number of integers between A and B (inclusive) that can be evenly divided by neither C nor D.\n",
    "constraints": "\n\n1\\leq A\\leq B\\leq 10^{18}\n1\\leq C,D\\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C D\n\n",
    "output_desc": "\nPrint the number of integers between A and B (inclusive) that can be evenly divided by neither C nor D.\n",
    "sample_input1": "\n4 9 2 3\n\n",
    "sample_output1": "\n2\n\n5 and 7 satisfy the condition.\n",
    "sample_input2": "\n10 40 6 8\n\n",
    "sample_output2": "\n23\n\n",
    "sample_input3": "\n314159265358979323 846264338327950288 419716939 937510582\n\n",
    "sample_output3": "\n532105071133627368\n",
    "num_id": 180
  },
  {
    "id": "p02999",
    "score": "100",
    "desc": "\nX and A are integers between 0 and 9 (inclusive).\nIf X is less than A, print 0; if X is not less than A, print 10.\n",
    "constraints": "\n\n0 \\leq X, A \\leq 9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX A\n\n",
    "output_desc": "\nIf X is less than A, print 0; if X is not less than A, print 10.\n",
    "sample_input1": "\n3 5\n\n",
    "sample_output1": "\n0\n\n3 is less than 5, so we should print 0.\n",
    "sample_input2": "\n7 5\n\n",
    "sample_output2": "\n10\n\n7 is not less than 5, so we should print 10.\n",
    "sample_input3": "\n6 6\n\n",
    "sample_output3": "\n10\n\n6 is not less than 6, so we should print 10.",
    "num_id": 181
  },
  {
    "id": "p03000",
    "score": "200",
    "desc": "\nA ball will bounce along a number line, making N + 1 bounces. It will make the first bounce at coordinate D_1 = 0, and the i-th bounce (2 \\leq i \\leq N+1) at coordinate D_i = D_{i-1} + L_{i-1}.\nHow many times will the ball make a bounce where the coordinate is at most X?\n",
    "constraints": "\n\n1 \\leq N \\leq 100\n1 \\leq L_i \\leq 100\n1 \\leq X \\leq 10000\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN X\nL_1 L_2 ... L_{N-1} L_N\n\n",
    "output_desc": "\nPrint the number of times the ball will make a bounce where the coordinate is at most X.\n",
    "sample_input1": "\n3 6\n3 4 5\n\n",
    "sample_output1": "\n2\n\nThe ball will make a bounce at the coordinates 0, 3, 7 and 12, among which two are less than or equal to 6.\n",
    "sample_input2": "\n4 9\n3 3 3 3\n\n",
    "sample_output2": "\n4\n\nThe ball will make a bounce at the coordinates 0, 3, 6, 9 and 12, among which four are less than or equal to 9.",
    "num_id": 182
  },
  {
    "id": "p03001",
    "score": "300",
    "desc": "\nThere is a rectangle in a coordinate plane. The coordinates of the four vertices are (0,0), (W,0), (W,H), and (0,H).\nYou are given a point (x,y) which is within the rectangle or on its border. We will draw a straight line passing through (x,y) to cut the rectangle into two parts. Find the maximum possible area of the part whose area is not larger than that of the other. Additionally, determine if there are multiple ways to cut the rectangle and achieve that maximum.\n",
    "constraints": "\n\n1 \\leq W,H \\leq 10^9\n0\\leq x\\leq W\n0\\leq y\\leq H\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nW H x y\n\n",
    "output_desc": "\nPrint the maximum possible area of the part whose area is not larger than that of the other, followed by 1 if there are multiple ways to cut the rectangle and achieve that maximum, and 0 otherwise.\nThe area printed will be judged correct when its absolute or relative error is at most 10^{-9}.\n",
    "sample_input1": "\n2 3 1 2\n\n",
    "sample_output1": "\n3.000000 0\n\nThe line x=1 gives the optimal cut, and no other line does.\n",
    "sample_input2": "\n2 2 1 1\n\n",
    "sample_output2": "\n2.000000 1\n",
    "num_id": 183
  },
  {
    "id": "p03005",
    "score": "100",
    "desc": "\nTakahashi is distributing N balls to K persons.\nIf each person has to receive at least one ball, what is the maximum possible difference in the number of balls received between the person with the most balls and the person with the fewest balls?\n",
    "constraints": "\n\n1 \\leq K \\leq N \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\n\n",
    "output_desc": "\nPrint the maximum possible difference in the number of balls received.\n",
    "sample_input1": "\n3 2\n\n",
    "sample_output1": "\n1\n\nThe only way to distribute three balls to two persons so that each of them receives at least one ball is to give one ball to one person and give two balls to the other person.\nThus, the maximum possible difference in the number of balls received is 1.\n",
    "sample_input2": "\n3 1\n\n",
    "sample_output2": "\n0\n\nWe have no choice but to give three balls to the only person, in which case the difference in the number of balls received is 0.\n",
    "sample_input3": "\n8 5\n\n",
    "sample_output3": "\n3\n\nFor example, if we give 1, 4, 1, 1, 1 balls to the five persons, the number of balls received between the person with the most balls and the person with the fewest balls would be 3, which is the maximum result.",
    "num_id": 184
  },
  {
    "id": "p03011",
    "score": "100",
    "desc": "\nThere are three airports A, B and C, and flights between each pair of airports in both directions.\nA one-way flight between airports A and B takes P hours, a one-way flight between airports B and C takes Q hours, and a one-way flight between airports C and A takes R hours.\nConsider a route where we start at one of the airports, fly to another airport and then fly to the other airport.\nWhat is the minimum possible sum of the flight times?\n",
    "constraints": "\n\n1 \\leq P,Q,R \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nP Q R\n\n",
    "output_desc": "\nPrint the minimum possible sum of the flight times.\n",
    "sample_input1": "\n1 3 4\n\n",
    "sample_output1": "\n4\n\n\nThe sum of the flight times in the route A \\rightarrow B \\rightarrow C: 1 + 3 = 4 hours\nThe sum of the flight times in the route A \\rightarrow C \\rightarrow C: 4 + 3 = 7 hours\nThe sum of the flight times in the route B \\rightarrow A \\rightarrow C: 1 + 4 = 5 hours\nThe sum of the flight times in the route B \\rightarrow C \\rightarrow A: 3 + 4 = 7 hours\nThe sum of the flight times in the route C \\rightarrow A \\rightarrow B: 4 + 1 = 5 hours\nThe sum of the flight times in the route C \\rightarrow B \\rightarrow A: 3 + 1 = 4 hours\n\nThe minimum of these is 4 hours.\n",
    "sample_input2": "\n3 2 3\n\n",
    "sample_output2": "\n5\n",
    "num_id": 185
  },
  {
    "id": "p03012",
    "score": "200",
    "desc": "\nWe have N weights indexed 1 to N. The \bmass of the weight indexed i is W_i.\nWe will divide these weights into two groups: the weights with indices not greater than T, and those with indices greater than T, for some integer 1 \\leq T < N. Let S_1 be the sum of the masses of the weights in the former group, and S_2 be the sum of the masses of the weights in the latter group.\nConsider all possible such divisions and find the minimum possible absolute difference of S_1 and S_2.\n",
    "constraints": "\n\n2 \\leq N \\leq 100\n1 \\leq W_i \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nW_1 W_2 ... W_{N-1} W_N\n\n",
    "output_desc": "\nPrint the minimum possible absolute difference of S_1 and S_2.\n",
    "sample_input1": "\n3\n1 2 3\n\n",
    "sample_output1": "\n0\n\nIf T = 2, S_1 = 1 + 2 = 3 and S_2 = 3, with the absolute difference of 0.\n",
    "sample_input2": "\n4\n1 3 1 1\n\n",
    "sample_output2": "\n2\n\nIf T = 2, S_1 = 1 + 3 = 4 and S_2 = 1 + 1 = 2, with the absolute difference of 2. We cannot have a smaller absolute difference.\n",
    "sample_input3": "\n8\n27 23 76 2 3 5 62 52\n\n",
    "sample_output3": "\n2\n",
    "num_id": 186
  },
  {
    "id": "p03024",
    "score": "200",
    "desc": "\nTakahashi is competing in a sumo tournament.\nThe tournament lasts for 15 days, during which he performs in one match per day.\nIf he wins 8 or more matches, he can also participate in the next tournament.\nThe matches for the first k days have finished.\nYou are given the results of Takahashi's matches as a string S consisting of o and x.\nIf the i-th character in S is o, it means that Takahashi won the match on the i-th day; if that character is x, it means that Takahashi lost the match on the i-th day.\nPrint YES if there is a possibility that Takahashi can participate in the next tournament, and print NO if there is no such possibility.\n",
    "constraints": "\n\n1 \\leq k \\leq 15\nS is a string of length k consisting of o and x.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint YES if there is a possibility that Takahashi can participate in the next tournament, and print NO otherwise.\n",
    "sample_input1": "\noxoxoxoxoxoxox\n\n",
    "sample_output1": "\nYES\n\nTakahashi has 7 wins and 7 losses before the last match. If he wins that match, he will have 8 wins.\n",
    "sample_input2": "\nxxxxxxxx\n\n",
    "sample_output2": "\nNO\n",
    "num_id": 187
  },
  {
    "id": "p03029",
    "score": "100",
    "desc": "\nWe have A apples and P pieces of apple.\nWe can cut an apple into three pieces of apple, and make one apple pie by simmering two pieces of apple in a pan.\nFind the maximum number of apple pies we can make with what we have now.\n",
    "constraints": "\n\nAll values in input are integers.\n0 \\leq A, P \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA P\n\n",
    "output_desc": "\nPrint the maximum number of apple pies we can make with what we have.\n",
    "sample_input1": "\n1 3\n\n",
    "sample_output1": "\n3\n\nWe can first make one apple pie by simmering two of the three pieces of apple. Then, we can make two more by simmering the remaining piece and three more pieces obtained by cutting the whole apple.\n",
    "sample_input2": "\n0 1\n\n",
    "sample_output2": "\n0\n\nWe cannot make an apple pie in this case, unfortunately.\n",
    "sample_input3": "\n32 21\n\n",
    "sample_output3": "\n58\n",
    "num_id": 188
  },
  {
    "id": "p03030",
    "score": "200",
    "desc": "\nYou have decided to write a book introducing good restaurants.\nThere are N restaurants that you want to introduce: Restaurant 1, Restaurant 2, ..., Restaurant N. Restaurant i is in city S_i, and your assessment score of that restaurant on a 100-point scale is P_i.\nNo two restaurants have the same score.\nYou want to introduce the restaurants in the following order:\n\nThe restaurants are arranged in lexicographical order of the names of their cities.\nIf there are multiple restaurants in the same city, they are arranged in descending order of score.\n\nPrint the identification numbers of the restaurants in the order they are introduced in the book.\n",
    "constraints": "\n\n1 \u2264 N \u2264 100\nS is a string of length between 1 and 10 (inclusive) consisting of lowercase English letters.\n0 \u2264 P_i \u2264 100\nP_i is an integer.\nP_i \u2260 P_j (1 \u2264 i < j \u2264 N)\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS_1 P_1\n:\nS_N P_N\n\n",
    "output_desc": "\nPrint N lines. The i-th line (1 \u2264 i \u2264 N) should contain the identification number of the restaurant that is introduced i-th in the book.\n",
    "sample_input1": "\n6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n\n",
    "sample_output1": "\n3\n4\n6\n1\n5\n2\n\nThe lexicographical order of the names of the three cities is kazan < khabarovsk < moscow. For each of these cities, the restaurants in it are introduced in descending order of score. Thus, the restaurants are introduced in the order 3,4,6,1,5,2.\n",
    "sample_input2": "\n10\nyakutsk 10\nyakutsk 20\nyakutsk 30\nyakutsk 40\nyakutsk 50\nyakutsk 60\nyakutsk 70\nyakutsk 80\nyakutsk 90\nyakutsk 100\n\n",
    "sample_output2": "\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n",
    "num_id": 189
  },
  {
    "id": "p03035",
    "score": "100",
    "desc": "\nTakahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.\n",
    "constraints": "\n\n0 \u2264 A \u2264 100\n2 \u2264 B \u2264 1000\nB is an even number.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nPrint the cost of the Ferris wheel for Takahashi.\n",
    "sample_input1": "\n30 100\n\n",
    "sample_output1": "\n100\n\nTakahashi is 30 years old now, and the cost of the Ferris wheel is 100 yen.\n",
    "sample_input2": "\n12 100\n\n",
    "sample_output2": "\n50\n\nTakahashi is 12 years old, and the cost of the Ferris wheel is the half of 100 yen, that is, 50 yen.\n",
    "sample_input3": "\n0 100\n\n",
    "sample_output3": "\n0\n\nTakahashi is 0 years old, and he can ride the Ferris wheel for free.",
    "num_id": 190
  },
  {
    "id": "p03036",
    "score": "200",
    "desc": "\nThe development of algae in a pond is as follows.\nLet the total weight of the algae at the beginning of the year i be x_i gram. For i\u22652000, the following formula holds:\n\nx_{i+1} = rx_i - D\n\nYou are given r, D and x_{2000}. Calculate x_{2001}, ..., x_{2010} and print them in order.\n",
    "constraints": "\n\n2 \u2264 r \u2264 5\n1 \u2264 D \u2264 100\nD < x_{2000} \u2264 200\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nr D x_{2000}\n\n",
    "output_desc": "\nPrint 10 lines. The i-th line (1 \u2264 i \u2264 10) should contain x_{2000+i} as an integer.\n",
    "sample_input1": "\n2 10 20\n\n",
    "sample_output1": "\n30\n50\n90\n170\n330\n650\n1290\n2570\n5130\n10250\n\nFor example, x_{2001} = rx_{2000} - D = 2 \\times 20 - 10 = 30 and x_{2002} = rx_{2001} - D = 2 \\times 30 - 10 = 50.\n",
    "sample_input2": "\n4 40 60\n\n",
    "sample_output2": "\n200\n760\n3000\n11960\n47800\n191160\n764600\n3058360\n12233400\n48933560\n",
    "num_id": 191
  },
  {
    "id": "p03037",
    "score": "300",
    "desc": "\nWe have N ID cards, and there are M gates.\nWe can pass the i-th gate if we have one of the following ID cards: the L_i-th, (L_i+1)-th, ..., and R_i-th ID cards.\nHow many of the ID cards allow us to pass all the gates alone?\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 10^5\n1 \\leq M \\leq 10^5\n1 \\leq L_i \\leq R_i \\leq N\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN M\nL_1 R_1\nL_2 R_2\n\\vdots\nL_M R_M\n\n",
    "output_desc": "\nPrint the number of ID cards that allow us to pass all the gates alone.\n",
    "sample_input1": "\n4 2\n1 3\n2 4\n\n",
    "sample_output1": "\n2\n\nTwo ID cards allow us to pass all the gates alone, as follows:\n\nThe first ID card does not allow us to pass the second gate.\nThe second ID card allows us to pass all the gates.\nThe third ID card allows us to pass all the gates.\nThe fourth ID card does not allow us to pass the first gate.\n\n",
    "sample_input2": "\n10 3\n3 6\n5 7\n6 9\n\n",
    "sample_output2": "\n1\n\n",
    "sample_input3": "\n100000 1\n1 100000\n\n",
    "sample_output3": "\n100000\n",
    "num_id": 192
  },
  {
    "id": "p03041",
    "score": "100",
    "desc": "\nYou are given a string S of length N consisting of A, B and C, and an integer K which is between 1 and N (inclusive).\nPrint the string S after lowercasing the K-th character in it.\n",
    "constraints": "\n\n1 \u2264 N \u2264 50\n1 \u2264 K \u2264 N\nS is a string of length N consisting of A, B and C.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\nS\n\n",
    "output_desc": "\nPrint the string S after lowercasing the K-th character in it.\n",
    "sample_input1": "\n3 1\nABC\n\n",
    "sample_output1": "\naBC\n\n",
    "sample_input2": "\n4 3\nCABA\n\n",
    "sample_output2": "\nCAbA\n",
    "num_id": 193
  },
  {
    "id": "p03042",
    "score": "200",
    "desc": "\nYou have a digit sequence S of length 4. You are wondering which of the following formats S is in:\n\nYYMM format: the last two digits of the year and the two-digit representation of the month (example: 01 for January), concatenated in this order\nMMYY format: the two-digit representation of the month and the last two digits of the year, concatenated in this order\n\nIf S is valid in only YYMM format, print YYMM; if S is valid in only MMYY format, print MMYY; if S is valid in both formats, print AMBIGUOUS; if S is valid in neither format, print NA.\n",
    "constraints": "\n\nS is a digit sequence of length 4.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the specified string: YYMM, MMYY, AMBIGUOUS or NA.\n",
    "sample_input1": "\n1905\n\n",
    "sample_output1": "\nYYMM\n\nMay XX19 is a valid date, but 19 is not valid as a month. Thus, this string is only valid in YYMM format.\n",
    "sample_input2": "\n0112\n\n",
    "sample_output2": "\nAMBIGUOUS\n\nBoth December XX01 and January XX12 are valid dates. Thus, this string is valid in both formats.\n",
    "sample_input3": "\n1700\n\n",
    "sample_output3": "\nNA\n\nNeither 0 nor 17 is valid as a month. Thus, this string is valid in neither format.",
    "num_id": 194
  },
  {
    "id": "p03043",
    "score": "300",
    "desc": "\nSnuke has a fair N-sided die that shows the integers from 1 to N with equal probability and a fair coin. He will play the following game with them:\n\nThrow the die. The current score is the result of the die.\nAs long as the score is between 1 and K-1 (inclusive), keep flipping the coin. The score is doubled each time the coin lands heads up, and the score becomes 0 if the coin lands tails up.\nThe game ends when the score becomes 0 or becomes K or above. Snuke wins if the score is K or above, and loses if the score is 0.\n\nYou are given N and K. Find the probability that Snuke wins the game.\n",
    "constraints": "\n\n1 \u2264 N \u2264 10^5\n1 \u2264 K \u2264 10^5\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\n\n",
    "output_desc": "\nPrint the probability that Snuke wins the game. The output is considered correct when the absolute or relative error is at most 10^{-9}.\n",
    "sample_input1": "\n3 10\n\n",
    "sample_output1": "\n0.145833333333\n\n\nIf the die shows 1, Snuke needs to get four consecutive heads from four coin flips to obtain a score of 10 or above. The probability of this happening is \\frac{1}{3} \\times (\\frac{1}{2})^4 = \\frac{1}{48}.\nIf the die shows 2, Snuke needs to get three consecutive heads from three coin flips to obtain a score of 10 or above. The probability of this happening is \\frac{1}{3} \\times (\\frac{1}{2})^3 = \\frac{1}{24}.\nIf the die shows 3, Snuke needs to get two consecutive heads from two coin flips to obtain a score of 10 or above. The probability of this happening is \\frac{1}{3} \\times (\\frac{1}{2})^2 = \\frac{1}{12}.\n\nThus, the probability that Snuke wins is \\frac{1}{48} + \\frac{1}{24} + \\frac{1}{12} = \\frac{7}{48} \\simeq 0.1458333333.\n",
    "sample_input2": "\n100000 5\n\n",
    "sample_output2": "\n0.999973749998\n",
    "num_id": 195
  },
  {
    "id": "p03048",
    "score": "200",
    "desc": "\nSnuke has come to a store that sells boxes containing balls. The store sells the following three kinds of boxes:\n\nRed boxes, each containing R red balls\nGreen boxes, each containing G green balls\nBlue boxes, each containing B blue balls\n\nSnuke wants to get a total of exactly N balls by buying r red boxes, g green boxes and b blue boxes.\nHow many triples of non-negative integers (r,g,b) achieve this?\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq R,G,B,N \\leq 3000\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nR G B N\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n1 2 3 4\n\n",
    "sample_output1": "\n4\n\nFour triples achieve the objective, as follows:\n\n(4,0,0)\n(2,1,0)\n(1,0,1)\n(0,2,0)\n\n",
    "sample_input2": "\n13 1 4 3000\n\n",
    "sample_output2": "\n87058\n",
    "num_id": 196
  },
  {
    "id": "p03059",
    "score": "100",
    "desc": "\nA biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq A, B, T \\leq 20\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B T\n\n",
    "output_desc": "\nPrint the total number of biscuits produced within T + 0.5 seconds after activation.\n",
    "sample_input1": "\n3 5 7\n\n",
    "sample_output1": "\n10\n\n\nFive biscuits will be produced three seconds after activation.\nAnother five biscuits will be produced six seconds after activation.\nThus, a total of ten biscuits will be produced within 7.5 seconds after activation.\n\n",
    "sample_input2": "\n3 2 9\n\n",
    "sample_output2": "\n6\n\n",
    "sample_input3": "\n20 20 19\n\n",
    "sample_output3": "\n0\n",
    "num_id": 197
  },
  {
    "id": "p03060",
    "score": "200",
    "desc": "\nThere are N gems. The value of the i-th gem is V_i.\nYou will choose some of these gems, possibly all or none, and get them.\nHowever, you need to pay a cost of C_i to get the i-th gem.\nLet X be the sum of the values of the gems obtained, and Y be the sum of the costs paid.\nFind the maximum possible value of X-Y.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 20\n1 \\leq C_i, V_i \\leq 50\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nV_1 V_2 ... V_N\nC_1 C_2 ... C_N\n\n",
    "output_desc": "\nPrint the maximum possible value of X-Y.\n",
    "sample_input1": "\n3\n10 2 5\n6 3 4\n\n",
    "sample_output1": "\n5\n\nIf we choose the first and third gems, X = 10 + 5 = 15 and Y = 6 + 4 = 10.\nWe have X-Y = 5 here, which is the maximum possible value.\n",
    "sample_input2": "\n4\n13 21 6 19\n11 30 6 15\n\n",
    "sample_output2": "\n6\n\n",
    "sample_input3": "\n1\n1\n50\n\n",
    "sample_output3": "\n0\n",
    "num_id": 198
  },
  {
    "id": "p03061",
    "score": "300",
    "desc": "\nThere are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.\n",
    "constraints": "\n\nAll values in input are integers.\n2 \\leq N \\leq 10^5\n1 \\leq A_i \\leq 10^9\n\n",
    "output_desc": "\nPrint the maximum possible greatest common divisor of the N integers on the blackboard after your move.\n",
    "sample_input1": "\n3\n7 6 8\n\n",
    "sample_output1": "\n2\n\nIf we replace 7 with 4, the greatest common divisor of the three integers on the blackboard will be 2, which is the maximum possible value.\n",
    "sample_input2": "\n3\n12 15 18\n\n",
    "sample_output2": "\n6\n\n",
    "sample_input3": "\n2\n1000000000 1000000000\n\n",
    "sample_output3": "\n1000000000\n\nWe can replace an integer with itself.",
    "num_id": 199
  },
  {
    "id": "p03067",
    "score": "100",
    "desc": "\nThere are three houses on a number line: House 1, 2 and 3, with coordinates A, B and C, respectively.\nPrint Yes if we pass the coordinate of House 3 on the straight way from House 1 to House 2 without making a detour, and print No otherwise.\n",
    "constraints": "\n\n0\\leq A,B,C\\leq 100\nA, B and C are distinct integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nPrint Yes if we pass the coordinate of House 3 on the straight way from House 1 to House 2 without making a detour, and print No otherwise.\n",
    "sample_input1": "\n3 8 5\n\n",
    "sample_output1": "\nYes\n\nWe pass the coordinate 5 on the straight way from the house at coordinate 3 to the house at coordinate 8.\n",
    "sample_input2": "\n7 3 1\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\n10 2 4\n\n",
    "sample_output3": "\nYes\n\n",
    "sample_input4": "\n31 41 59\n\n",
    "sample_output4": "\nNo\n",
    "num_id": 200
  },
  {
    "id": "p03068",
    "score": "200",
    "desc": "\nYou are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.\n",
    "constraints": "\n\n1 \\leq K \\leq N\\leq 10\nS is a string of length N consisting of lowercase English letters.\nN and K are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS\nK\n\n",
    "output_desc": "\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.\n",
    "sample_input1": "\n5\nerror\n2\n\n",
    "sample_output1": "\n*rr*r\n\nThe second character of S is r. When we replace every character in error that differs from r with *, we get the string *rr*r.\n",
    "sample_input2": "\n6\neleven\n5\n\n",
    "sample_output2": "\ne*e*e*\n\n",
    "sample_input3": "\n9\neducation\n7\n\n",
    "sample_output3": "\n******i**\n",
    "num_id": 201
  },
  {
    "id": "p03069",
    "score": "300",
    "desc": "\nThere are N stones arranged in a row. Every stone is painted white or black.\nA string S represents the color of the stones. The i-th stone from the left is white if the i-th character of S is ., and the stone is black if the character is #.\nTakahashi wants to change the colors of some stones to black or white so that there will be no white stone immediately to the right of a black stone.\nFind the minimum number of stones that needs to be recolored.\n",
    "constraints": "\n\n1 \\leq N \\leq 2\\times 10^5\nS is a string of length N consisting of . and #.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS\n\n",
    "output_desc": "\nPrint the minimum number of stones that needs to be recolored.\n",
    "sample_input1": "\n3\n#.#\n\n",
    "sample_output1": "\n1\n\nIt is enough to change the color of the first stone to white.\n",
    "sample_input2": "\n5\n#.##.\n\n",
    "sample_output2": "\n2\n\n",
    "sample_input3": "\n9\n.........\n\n",
    "sample_output3": "\n0\n",
    "num_id": 202
  },
  {
    "id": "p03071",
    "score": "100",
    "desc": "\nThere are two buttons, one of size A and one of size B.\nWhen you press a button of size X, you get X coins and the size of that button decreases by 1.\nYou will press a button twice. Here, you can press the same button twice, or press both buttons once.\nAt most how many coins can you get?\n",
    "constraints": "\n\nAll values in input are integers.\n3 \\leq A, B \\leq 20\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nPrint the maximum number of coins you can get.\n",
    "sample_input1": "\n5 3\n\n",
    "sample_output1": "\n9\n\nYou can get 5 + 4 = 9 coins by pressing the button of size 5 twice, and this is the maximum result.\n",
    "sample_input2": "\n3 4\n\n",
    "sample_output2": "\n7\n\n",
    "sample_input3": "\n6 6\n\n",
    "sample_output3": "\n12\n",
    "num_id": 203
  },
  {
    "id": "p03072",
    "score": "200",
    "desc": "\nThere are N mountains ranging from east to west, and an ocean to the west.\nAt the top of each mountain, there is an inn. You have decided to choose where to stay from these inns.\nThe height of the i-th mountain from the west is H_i.\nYou can certainly see the ocean from the inn at the top of the westmost mountain.\nFor the inn at the top of the i-th mountain from the west (i = 2, 3, ..., N), you can see the ocean if and only if H_1 \\leq H_i, H_2 \\leq H_i, ..., and H_{i-1} \\leq H_i.\nFrom how many of these N inns can you see the ocean?\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 20\n1 \\leq H_i \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nH_1 H_2 ... H_N\n\n",
    "output_desc": "\nPrint the number of inns from which you can see the ocean.\n",
    "sample_input1": "\n4\n6 5 6 8\n\n",
    "sample_output1": "\n3\n\nYou can see the ocean from the first, third and fourth inns from the west.\n",
    "sample_input2": "\n5\n4 5 3 5 4\n\n",
    "sample_output2": "\n3\n\n",
    "sample_input3": "\n5\n9 5 6 8 4\n\n",
    "sample_output3": "\n1\n",
    "num_id": 204
  },
  {
    "id": "p03073",
    "score": "300",
    "desc": "\nN tiles are arranged in a row from left to right. The initial color of each tile is represented by a string S of length N.\nThe i-th tile from the left is painted black if the i-th character of S is 0, and painted white if that character is 1.\nYou want to repaint some of the tiles black or white, so that any two adjacent tiles have different colors.\nAt least how many tiles need to be repainted to satisfy the condition?\n",
    "constraints": "\n\n1 \\leq |S| \\leq 10^5\nS_i is 0 or 1.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the minimum number of tiles that need to be repainted to satisfy the condition.\n",
    "sample_input1": "\n000\n\n",
    "sample_output1": "\n1\n\nThe condition can be satisfied by repainting the middle tile white.\n",
    "sample_input2": "\n10010010\n\n",
    "sample_output2": "\n3\n\n",
    "sample_input3": "\n0\n\n",
    "sample_output3": "\n0\n",
    "num_id": 205
  },
  {
    "id": "p03075",
    "score": "100",
    "desc": "\n\nIn AtCoder city, there are five antennas standing in a straight line. They are called Antenna A, B, C, D and E from west to east, and their coordinates are a, b, c, d and e, respectively.\nTwo antennas can communicate directly if the distance between them is k or less, and they cannot if the distance is greater than k.\nDetermine if there exists a pair of antennas that cannot communicate directly.\nHere, assume that the distance between two antennas at coordinates p and q (p < q) is q - p.  \n",
    "constraints": "\n\n\na, b, c, d, e and k are integers between 0 and 123 (inclusive).\na < b < c < d < e\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\na\nb\nc\nd\ne\nk\n\n",
    "output_desc": "\n\nPrint :( if there exists a pair of antennas that cannot communicate directly, and print Yay! if there is no such pair.\n",
    "sample_input1": "\n1\n2\n4\n8\n9\n15\n\n",
    "sample_output1": "\nYay!\n\nIn this case, there is no pair of antennas that cannot communicate directly, because:\n\nthe distance between A and B is 2 - 1 = 1\nthe distance between A and C is 4 - 1 = 3\nthe distance between A and D is 8 - 1 = 7\nthe distance between A and E is 9 - 1 = 8\nthe distance between B and C is 4 - 2 = 2\nthe distance between B and D is 8 - 2 = 6\nthe distance between B and E is 9 - 2 = 7\nthe distance between C and D is 8 - 4 = 4\nthe distance between C and E is 9 - 4 = 5\nthe distance between D and E is 9 - 8 = 1\n\nand none of them is greater than 15. Thus, the correct output is Yay!.\n",
    "sample_input2": "\n15\n18\n26\n35\n36\n18\n\n",
    "sample_output2": "\n:(\n\nIn this case, the distance between antennas A and D is 35 - 15 = 20 and exceeds 18, so they cannot communicate directly.\nThus, the correct output is :(.",
    "num_id": 206
  },
  {
    "id": "p03079",
    "score": "100",
    "desc": "\n\nYou are given three integers A, B and C.\nDetermine if there exists an equilateral triangle whose sides have lengths A, B and C.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq A,B,C \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nIf there exists an equilateral triangle whose sides have lengths A, B and C, print Yes; otherwise, print No.\n",
    "sample_input1": "\n2 2 2\n\n",
    "sample_output1": "\nYes\n\n\nThere exists an equilateral triangle whose sides have lengths 2, 2 and 2.\n\n",
    "sample_input2": "\n3 4 5\n\n",
    "sample_output2": "\nNo\n\n\nThere is no equilateral triangle whose sides have lengths 3, 4 and 5.\n",
    "num_id": 207
  },
  {
    "id": "p03080",
    "score": "200",
    "desc": "\n\nThere are N people numbered 1 to N. Each person wears a red hat or a blue hat.\nYou are given a string s representing the colors of the people. Person i wears a red hat if s_i is R, and a blue hat if s_i is B.\nDetermine if there are more people wearing a red hat than people wearing a blue hat.\n",
    "constraints": "\n\n1 \\leq N \\leq 100\n|s| = N\ns_i is R or B.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\ns\n\n",
    "output_desc": "\nIf there are more people wearing a red hat than there are people wearing a blue hat, print Yes; otherwise, print No.\n",
    "sample_input1": "\n4\nRRBR\n\n",
    "sample_output1": "\nYes\n\n\nThere are three people wearing a red hat, and one person wearing a blue hat.\nSince there are more people wearing a red hat than people wearing a blue hat, the answer is Yes.\n\n",
    "sample_input2": "\n4\nBRBR\n\n",
    "sample_output2": "\nNo\n\n\nThere are two people wearing a red hat, and two people wearing a blue hat.\nSince there are as many people wearing a red hat as people wearing a blue hat, the answer is No.\n",
    "num_id": 208
  },
  {
    "id": "p03085",
    "score": "100",
    "desc": "\nOn the Planet AtCoder, there are four types of bases: A, C, G and T. A bonds with T, and C bonds with G.\nYou are given a letter b as input, which is A, C, G or T. Write a program that prints the letter representing the base that bonds with the base b.\n",
    "constraints": "\n\nb is one of the letters A, C, G and T.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nb\n\n",
    "output_desc": "\nPrint the letter representing the base that bonds with the base b.\n",
    "sample_input1": "\nA\n\n",
    "sample_output1": "\nT\n\n",
    "sample_input2": "\nG\n\n",
    "sample_output2": "\nC\n",
    "num_id": 209
  },
  {
    "id": "p03086",
    "score": "200",
    "desc": "\nYou are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.\nHere, a ACGT string is a string that contains no characters other than A, C, G and T.\n",
    "constraints": "\n\nS is a string of length between 1 and 10 (inclusive).\nEach character in S is an uppercase English letter.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the length of the longest ACGT string that is a substring of S.\n",
    "sample_input1": "\nATCODER\n\n",
    "sample_output1": "\n3\n\nAmong the ACGT strings that are substrings of ATCODER, the longest one is ATC.\n",
    "sample_input2": "\nHATAGAYA\n\n",
    "sample_output2": "\n5\n\nAmong the ACGT strings that are substrings of HATAGAYA, the longest one is ATAGA.\n",
    "sample_input3": "\nSHINJUKU\n\n",
    "sample_output3": "\n0\n\nAmong the ACGT strings that are substrings of SHINJUKU, the longest one is  (the empty string).",
    "num_id": 210
  },
  {
    "id": "p03087",
    "score": "300",
    "desc": "\nYou are given a string S of length N consisting of A, C, G and T. Answer the following Q queries:\n\nQuery i (1 \\leq i \\leq Q): You will be given integers l_i and r_i (1 \\leq l_i < r_i \\leq N). Consider the substring of S starting at index l_i and ending at index r_i (both inclusive). In this string, how many times does AC occurs as a substring?\n\n",
    "constraints": "\n\n2 \\leq N \\leq 10^5\n1 \\leq Q \\leq 10^5\nS is a string of length N.\nEach character in S is A, C, G or T.\n1 \\leq l_i < r_i \\leq N\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN Q\nS\nl_1 r_1\n:\nl_Q r_Q\n\n",
    "output_desc": "\nPrint Q lines. The i-th line should contain the answer to the i-th query.\n",
    "sample_input1": "\n8 3\nACACTACG\n3 7\n2 3\n1 8\n\n",
    "sample_output1": "\n2\n0\n3\n\n\nQuery 1: the substring of S starting at index 3 and ending at index 7 is ACTAC. In this string, AC occurs twice as a substring.\nQuery 2: the substring of S starting at index 2 and ending at index 3 is CA. In this string, AC occurs zero times as a substring.\nQuery 3: the substring of S starting at index 1 and ending at index 8 is ACACTACG. In this string, AC occurs three times as a substring.\n",
    "num_id": 211
  },
  {
    "id": "p03095",
    "score": "200",
    "desc": "\nYou are given a string S of length N.\nAmong its subsequences, count the ones such that all characters are different, modulo 10^9+7. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.\nHere, a subsequence of a string is a concatenation of one or more characters from the string without changing the order.\n",
    "constraints": "\n\n1 \\leq N \\leq 100000\nS consists of lowercase English letters.\n|S|=N\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS\n\n",
    "output_desc": "\nPrint the number of the subsequences such that all characters are different, modulo 10^9+7.\n",
    "sample_input1": "\n4\nabcd\n\n",
    "sample_output1": "\n15\n\nSince all characters in S itself are different, all its subsequences satisfy the condition.\n",
    "sample_input2": "\n3\nbaa\n\n",
    "sample_output2": "\n5\n\nThe answer is five: b, two occurrences of a, two occurrences of ba. Note that we do not count baa, since it contains two as.\n",
    "sample_input3": "\n5\nabcab\n\n",
    "sample_output3": "\n17\n",
    "num_id": 212
  },
  {
    "id": "p03101",
    "score": "100",
    "desc": "\nThere are H rows and W columns of white square cells.\nYou will choose h of the rows and w of the columns, and paint all of the cells contained in those rows or columns.\nHow many white cells will remain?\nIt can be proved that this count does not depend on what rows and columns are chosen.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq H, W \\leq 20\n1 \\leq h \\leq H\n1 \\leq w \\leq W\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nH W\nh w\n\n",
    "output_desc": "\nPrint the number of white cells that will remain.\n",
    "sample_input1": "\n3 2\n2 1\n\n",
    "sample_output1": "\n1\n\nThere are 3 rows and 2 columns of cells. When two rows and one column are chosen and painted in black, there is always one white cell that remains.\n",
    "sample_input2": "\n5 5\n2 3\n\n",
    "sample_output2": "\n6\n\n",
    "sample_input3": "\n2 4\n2 4\n\n",
    "sample_output3": "\n0\n",
    "num_id": 213
  },
  {
    "id": "p03105",
    "score": "100",
    "desc": "\nTakahashi likes the sound when he buys a drink from a vending machine.\nThat sound can be heard by spending A yen (the currency of Japan) each time.\nTakahashi has B yen. He will hear the sound as many times as he can with that money, but at most C times, as he would be satisfied at that time.\nHow many times will he hear the sound?\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq A, B, C \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nPrint the number of times Takahashi will hear his favorite sound.\n",
    "sample_input1": "\n2 11 4\n\n",
    "sample_output1": "\n4\n\nSince he has not less than 8 yen, he will hear the sound four times and be satisfied.\n",
    "sample_input2": "\n3 9 5\n\n",
    "sample_output2": "\n3\n\nHe may not be able to be satisfied.\n",
    "sample_input3": "\n100 1 10\n\n",
    "sample_output3": "\n0\n",
    "num_id": 214
  },
  {
    "id": "p03106",
    "score": "200",
    "desc": "\nYou are given positive integers A and B.\nFind the K-th largest positive integer that divides both A and B.\nThe input guarantees that there exists such a number.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq A, B \\leq 100\nThe K-th largest positive integer that divides both A and B exists.\nK \\geq 1\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B K\n\n",
    "output_desc": "\nPrint the K-th largest positive integer that divides both A and B.\n",
    "sample_input1": "\n8 12 2\n\n",
    "sample_output1": "\n2\n\nThree positive integers divides both 8 and 12: 1, 2 and 4.\nAmong them, the second largest is 2.\n",
    "sample_input2": "\n100 50 4\n\n",
    "sample_output2": "\n5\n\n",
    "sample_input3": "\n1 1 1\n\n",
    "sample_output3": "\n1\n",
    "num_id": 215
  },
  {
    "id": "p03107",
    "score": "300",
    "desc": "\nThere are N cubes stacked vertically on a desk.\nYou are given a string S of length N. The color of the i-th cube from the bottom is red if the i-th character in S is 0, and blue if that character is 1.\nYou can perform the following operation any number of times: choose a red cube and a blue cube that are adjacent, and remove them. Here, the cubes that were stacked on the removed cubes will fall down onto the object below them.\nAt most how many cubes can be removed?\n",
    "constraints": "\n\n1 \\leq N \\leq 10^5\n|S| = N\nEach character in S is 0 or 1.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the maximum number of cubes that can be removed.\n",
    "sample_input1": "\n0011\n\n",
    "sample_output1": "\n4\n\nAll four cubes can be removed, by performing the operation as follows:\n\nRemove the second and third cubes from the bottom. Then, the fourth cube drops onto the first cube.\nRemove the first and second cubes from the bottom.\n\n",
    "sample_input2": "\n11011010001011\n\n",
    "sample_output2": "\n12\n\n",
    "sample_input3": "\n0\n\n",
    "sample_output3": "\n0\n",
    "num_id": 216
  },
  {
    "id": "p03109",
    "score": "100",
    "desc": "\nYou are given a string S as input. This represents a valid date in the year 2019 in the yyyy/mm/dd format. (For example, April 30, 2019 is represented as 2019/04/30.)\nWrite a program that prints Heisei if the date represented by S is not later than April 30, 2019, and prints TBD otherwise.\n",
    "constraints": "\n\nS is a string that represents a valid date in the year 2019 in the yyyy/mm/dd format.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint Heisei if the date represented by S is not later than April 30, 2019, and print TBD otherwise.\n",
    "sample_input1": "\n2019/04/30\n\n",
    "sample_output1": "\nHeisei\n\n",
    "sample_input2": "\n2019/11/01\n\n",
    "sample_output2": "\nTBD\n",
    "num_id": 217
  },
  {
    "id": "p03125",
    "score": "100",
    "desc": "\nYou are given positive integers A and B.\nIf A is a divisor of B, print A + B; otherwise, print B - A.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq A \\leq B \\leq 20\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nIf A is a divisor of B, print A + B; otherwise, print B - A.\n",
    "sample_input1": "\n4 12\n\n",
    "sample_output1": "\n16\n\nAs 4 is a divisor of 12, 4 + 12 = 16 should be printed.\n",
    "sample_input2": "\n8 20\n\n",
    "sample_output2": "\n12\n\n",
    "sample_input3": "\n1 1\n\n",
    "sample_output3": "\n2\n\n1 is a divisor of 1.",
    "num_id": 218
  },
  {
    "id": "p03126",
    "score": "200",
    "desc": "\nKatsusando loves omelette rice.\nBesides, he loves cr\u00e8me br\u00fbl\u00e9e, tenderloin steak and so on, and believes that these foods are all loved by everyone.\nTo prove that hypothesis, he conducted a survey on M kinds of foods and asked N people whether they like these foods or not.\nThe i-th person answered that he/she only likes the A_{i1}-th, A_{i2}-th, ..., A_{iK_i}-th food.\nFind the number of the foods liked by all the N people.\n",
    "constraints": "\nInput is given from Standard Input in the following format:\nN M\nK_1 A_{11} A_{12} ... A_{1K_1}\nK_2 A_{21} A_{22} ... A_{2K_2}\n:\nK_N A_{N1} A_{N2} ... A_{NK_N}\n\n",
    "output_desc": "\nPrint the number of the foods liked by all the N people.\n",
    "sample_input1": "\n3 4\n2 1 3\n3 1 2 3\n2 3 2\n\n",
    "sample_output1": "\n1\n\nAs only the third food is liked by all the three people, 1 should be printed.\n",
    "sample_input2": "\n5 5\n4 2 3 4 5\n4 1 3 4 5\n4 1 2 4 5\n4 1 2 3 5\n4 1 2 3 4\n\n",
    "sample_output2": "\n0\n\nKatsusando's hypothesis turned out to be wrong.\n",
    "sample_input3": "\n1 30\n3 5 10 30\n\n",
    "sample_output3": "\n3\n",
    "num_id": 219
  },
  {
    "id": "p03127",
    "score": "300",
    "desc": "\nThere are N monsters, numbered 1, 2, ..., N.\nInitially, the health of Monster i is A_i.\nBelow, a monster with at least 1 health is called alive.\nUntil there is only one alive monster, the following is repeated:\n\nA random alive monster attacks another random alive monster.\nAs a result, the health of the monster attacked is reduced by the amount equal to the current health of the monster attacking.\n\nFind the minimum possible final health of the last monster alive.\n",
    "constraints": "\n\nAll values in input are integers.\n2 \\leq N \\leq 10^5\n1 \\leq A_i \\leq 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the minimum possible final health of the last monster alive.\n",
    "sample_input1": "\n4\n2 10 8 40\n\n",
    "sample_output1": "\n2\n\nWhen only the first monster keeps on attacking, the final health of the last monster will be 2, which is minimum.\n",
    "sample_input2": "\n4\n5 13 8 1000000000\n\n",
    "sample_output2": "\n1\n\n",
    "sample_input3": "\n3\n1000000000 1000000000 1000000000\n\n",
    "sample_output3": "\n1000000000\n",
    "num_id": 220
  },
  {
    "id": "p03129",
    "score": "100",
    "desc": "\nDetermine if we can choose K different integers between 1 and N (inclusive) so that no two of them differ by 1.\n",
    "constraints": "\n\n1\\leq N,K\\leq 100\nN and K are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\n\n",
    "output_desc": "\nIf we can choose K integers as above, print YES; otherwise, print NO.\n",
    "sample_input1": "\n3 2\n\n",
    "sample_output1": "\nYES\n\nWe can choose 1 and 3.\n",
    "sample_input2": "\n5 5\n\n",
    "sample_output2": "\nNO\n\n",
    "sample_input3": "\n31 10\n\n",
    "sample_output3": "\nYES\n\n",
    "sample_input4": "\n10 90\n\n",
    "sample_output4": "\nNO\n",
    "num_id": 221
  },
  {
    "id": "p03136",
    "score": "200",
    "desc": "\nDetermine if an N-sided polygon (not necessarily convex) with sides of length L_1, L_2, ..., L_N can be drawn in a two-dimensional plane.\nYou can use the following theorem:\nTheorem: an N-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides.\n",
    "constraints": "\n\nAll values in input are integers.\n3 \\leq N \\leq 10\n1 \\leq L_i \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nL_1 L_2 ... L_N\n\n",
    "output_desc": "\nIf an N-sided polygon satisfying the condition can be drawn, print Yes; otherwise, print No.\n",
    "sample_input1": "\n4\n3 8 5 1\n\n",
    "sample_output1": "\nYes\n\nSince 8 < 9 = 3 + 5 + 1, it follows from the theorem that such a polygon can be drawn on a plane.\n",
    "sample_input2": "\n4\n3 8 4 1\n\n",
    "sample_output2": "\nNo\n\nSince 8 \\geq 8 = 3 + 4 + 1, it follows from the theorem that such a polygon cannot be drawn on a plane.\n",
    "sample_input3": "\n10\n1 8 10 5 8 12 34 100 11 3\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 222
  },
  {
    "id": "p03137",
    "score": "300",
    "desc": "\nWe will play a one-player game using a number line and N pieces.\nFirst, we place each of these pieces at some integer coordinate.\nHere, multiple pieces can be placed at the same coordinate.\nOur objective is to visit all of the M coordinates X_1, X_2, ..., X_M with these pieces, by repeating the following move:\nMove: Choose a piece and let x be its coordinate. Put that piece at coordinate x+1 or x-1.\nNote that the coordinates where we initially place the pieces are already regarded as visited.\nFind the minimum number of moves required to achieve the objective.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 10^5\n1 \\leq M \\leq 10^5\n-10^5 \\leq X_i \\leq 10^5\nX_1, X_2, ..., X_M are all different.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN M\nX_1 X_2 ... X_M\n\n",
    "output_desc": "\nFind the minimum number of moves required to achieve the objective.\n",
    "sample_input1": "\n2 5\n10 12 1 2 14\n\n",
    "sample_output1": "\n5\n\nThe objective can be achieved in five moves as follows, and this is the minimum number of moves required.\n\nInitially, put the two pieces at coordinates 1 and 10.\nMove the piece at coordinate 1 to 2.\nMove the piece at coordinate 10 to 11.\nMove the piece at coordinate 11 to 12.\nMove the piece at coordinate 12 to 13.\nMove the piece at coordinate 13 to 14.\n\n",
    "sample_input2": "\n3 7\n-10 -3 0 9 -100 2 17\n\n",
    "sample_output2": "\n19\n\n",
    "sample_input3": "\n100 1\n-100000\n\n",
    "sample_output3": "\n0\n",
    "num_id": 223
  },
  {
    "id": "p03139",
    "score": "100",
    "desc": "\nWe conducted a survey on newspaper subscriptions.\nMore specifically, we asked each of the N respondents the following two questions:\n\nQuestion 1: Are you subscribing to Newspaper X?\nQuestion 2: Are you subscribing to Newspaper Y?\n\nAs the result, A respondents answered \"yes\" to Question 1, and B respondents answered \"yes\" to Question 2.\nWhat are the maximum possible number and the minimum possible number of respondents subscribing to both newspapers X and Y?\nWrite a program to answer this question.\n",
    "constraints": "\n\n1 \\leq N \\leq 100\n0 \\leq A \\leq N\n0 \\leq B \\leq N\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN A B\n\n",
    "output_desc": "\nPrint the maximum possible number and the minimum possible number of respondents subscribing to both newspapers, in this order, with a space in between.\n",
    "sample_input1": "\n10 3 5\n\n",
    "sample_output1": "\n3 0\n\nIn this sample, out of the 10 respondents, 3 answered they are subscribing to Newspaper X, and 5 answered they are subscribing to Newspaper Y.\nHere, the number of respondents subscribing to both newspapers is at most 3 and at least 0.\n",
    "sample_input2": "\n10 7 5\n\n",
    "sample_output2": "\n5 2\n\nIn this sample, out of the 10 respondents, 7 answered they are subscribing to Newspaper X, and 5 answered they are subscribing to Newspaper Y.\nHere, the number of respondents subscribing to both newspapers is at most 5 and at least 2.\n",
    "sample_input3": "\n100 100 100\n\n",
    "sample_output3": "\n100 100\n",
    "num_id": 224
  },
  {
    "id": "p03145",
    "score": "100",
    "desc": "\nThere is a right triangle ABC with \u2220ABC=90\u00b0.\nGiven the lengths of the three sides, |AB|,|BC| and |CA|, find the area of the right triangle ABC.\nIt is guaranteed that the area of the triangle ABC is an integer.\n",
    "constraints": "\n\n1 \\leq |AB|,|BC|,|CA| \\leq 100\nAll values in input are integers.\nThe area of the triangle ABC is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\n|AB| |BC| |CA|\n\n",
    "output_desc": "\nPrint the area of the triangle ABC.\n",
    "sample_input1": "\n3 4 5\n\n",
    "sample_output1": "\n6\n\n\nThis triangle has an area of 6.\n",
    "sample_input2": "\n5 12 13\n\n",
    "sample_output2": "\n30\n\nThis triangle has an area of 30.\n",
    "sample_input3": "\n45 28 53\n\n",
    "sample_output3": "\n630\n\nThis triangle has an area of 630.",
    "num_id": 225
  },
  {
    "id": "p03146",
    "score": "200",
    "desc": "\nA sequence a=\\{a_1,a_2,a_3,......\\} is determined as follows:\n\n\nThe first term s is given as input.\n\n\nLet f(n) be the following function: f(n) = n/2 if n is even, and f(n) = 3n+1 if n is odd.\n\n\na_i = s when i = 1, and a_i = f(a_{i-1}) when i > 1.\n\n\nFind the minimum integer m that satisfies the following condition:\n\nThere exists an integer n such that a_m = a_n (m > n).\n\n",
    "constraints": "\n\n1 \\leq s \\leq 100\nAll values in input are integers.\nIt is guaranteed that all elements in a and the minimum m that satisfies the condition are at most 1000000.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\ns\n\n",
    "output_desc": "\nPrint the minimum integer m that satisfies the condition.\n",
    "sample_input1": "\n8\n\n",
    "sample_output1": "\n5\n\na=\\{8,4,2,1,4,2,1,4,2,1,......\\}. As a_5=a_2, the answer is 5.\n",
    "sample_input2": "\n7\n\n",
    "sample_output2": "\n18\n\na=\\{7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1,4,2,1,......\\}.\n",
    "sample_input3": "\n54\n\n",
    "sample_output3": "\n114\n",
    "num_id": 226
  },
  {
    "id": "p03149",
    "score": "100",
    "desc": "\nYou are given four digits N_1, N_2, N_3 and N_4. Determine if these can be arranged into the sequence of digits \"1974\".\n",
    "constraints": "\n\n0 \\leq N_1, N_2, N_3, N_4 \\leq 9\nN_1, N_2, N_3 and N_4 are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN_1 N_2 N_3 N_4\n\n",
    "output_desc": "\nIf N_1, N_2, N_3 and N_4 can be arranged into the sequence of digits \"1974\", print YES; if they cannot, print NO.\n",
    "sample_input1": "\n1 7 9 4\n\n",
    "sample_output1": "\nYES\n\nWe can get 1974 by swapping N_2 and N_3.\n",
    "sample_input2": "\n1 9 7 4\n\n",
    "sample_output2": "\nYES\n\nWe already have 1974 before doing anything.\n",
    "sample_input3": "\n1 2 9 1\n\n",
    "sample_output3": "\nNO\n\n",
    "sample_input4": "\n4 9 0 8\n\n",
    "sample_output4": "\nNO\n",
    "num_id": 227
  },
  {
    "id": "p03150",
    "score": "200",
    "desc": "\nA string is called a KEYENCE string when it can be changed to keyence by removing its contiguous substring (possibly empty) only once.\nGiven a string S consisting of lowercase English letters, determine if S is a KEYENCE string.\n",
    "constraints": "\n\nThe length of S is between 7 and 100 (inclusive).\nS consists of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nIf S is a KEYENCE string, print YES; otherwise, print NO.\n",
    "sample_input1": "\nkeyofscience\n\n",
    "sample_output1": "\nYES\n\nkeyence is an abbreviation of key of science.\n",
    "sample_input2": "\nmpyszsbznf\n\n",
    "sample_output2": "\nNO\n\n",
    "sample_input3": "\nashlfyha\n\n",
    "sample_output3": "\nNO\n\n",
    "sample_input4": "\nkeyence\n\n",
    "sample_output4": "\nYES\n",
    "num_id": 228
  },
  {
    "id": "p03186",
    "score": "200",
    "desc": "\nTakahashi has A untasty cookies containing antidotes, B tasty cookies containing antidotes and C tasty cookies containing poison.\nEating a cookie containing poison results in a stomachache, and eating a cookie containing poison while having a stomachache results in a death.\nAs he wants to live, he cannot eat one in such a situation.\nEating a cookie containing antidotes while having a stomachache cures it, and there is no other way to cure stomachaches.\nFind the maximum number of tasty cookies that Takahashi can eat.\n",
    "constraints": "\n\n0 \\leq A,B,C \\leq 10^9\nA,B and C are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nPrint the maximum number of tasty cookies that Takahashi can eat.\n",
    "sample_input1": "\n3 1 4\n\n",
    "sample_output1": "\n5\n\nWe can eat all tasty cookies, in the following order:\n\nA tasty cookie containing poison\nAn untasty cookie containing antidotes\nA tasty cookie containing poison\nA tasty cookie containing antidotes\nA tasty cookie containing poison\nAn untasty cookie containing antidotes\nA tasty cookie containing poison\n\n",
    "sample_input2": "\n5 2 9\n\n",
    "sample_output2": "\n10\n\n",
    "sample_input3": "\n8 8 1\n\n",
    "sample_output3": "\n9\n",
    "num_id": 229
  },
  {
    "id": "p03194",
    "score": "300",
    "desc": "\nThere are N integers a_1, a_2, ..., a_N not less than 1.\nThe values of a_1, a_2, ..., a_N are not known, but it is known that a_1 \\times a_2 \\times ... \\times a_N = P.\nFind the maximum possible greatest common divisor of a_1, a_2, ..., a_N.\n",
    "constraints": "\n\n1 \\leq N \\leq 10^{12}\n1 \\leq P \\leq 10^{12}\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN P\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n3 24\n\n",
    "sample_output1": "\n2\n\nThe greatest common divisor would be 2 when, for example, a_1=2, a_2=6 and a_3=2.\n",
    "sample_input2": "\n5 1\n\n",
    "sample_output2": "\n1\n\nAs a_i are positive integers, the only possible case is a_1 = a_2 = a_3 = a_4 = a_5 = 1.\n",
    "sample_input3": "\n1 111\n\n",
    "sample_output3": "\n111\n\n",
    "sample_input4": "\n4 972439611840\n\n",
    "sample_output4": "\n206\n",
    "num_id": 230
  },
  {
    "id": "p03196",
    "score": "300",
    "desc": "\nThere are N integers a_1, a_2, ..., a_N not less than 1.\nThe values of a_1, a_2, ..., a_N are not known, but it is known that a_1 \\times a_2 \\times ... \\times a_N = P.\nFind the maximum possible greatest common divisor of a_1, a_2, ..., a_N.\n",
    "constraints": "\n\n1 \\leq N \\leq 10^{12}\n1 \\leq P \\leq 10^{12}\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN P\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n3 24\n\n",
    "sample_output1": "\n2\n\nThe greatest common divisor would be 2 when, for example, a_1=2, a_2=6 and a_3=2.\n",
    "sample_input2": "\n5 1\n\n",
    "sample_output2": "\n1\n\nAs a_i are positive integers, the only possible case is a_1 = a_2 = a_3 = a_4 = a_5 = 1.\n",
    "sample_input3": "\n1 111\n\n",
    "sample_output3": "\n111\n\n",
    "sample_input4": "\n4 972439611840\n\n",
    "sample_output4": "\n206\n",
    "num_id": 231
  },
  {
    "id": "p03206",
    "score": "100",
    "desc": "\nIn some other world, today is December D-th.\nWrite a program that prints Christmas if D = 25, Christmas Eve if D = 24, Christmas Eve Eve if D = 23 and Christmas Eve Eve Eve if D = 22.\n",
    "constraints": "\n\n22 \\leq D \\leq 25\nD is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nD\n\n",
    "output_desc": "\nPrint the specified string (case-sensitive).\n",
    "sample_input1": "\n25\n\n",
    "sample_output1": "\nChristmas\n\n",
    "sample_input2": "\n22\n\n",
    "sample_output2": "\nChristmas Eve Eve Eve\n\nBe sure to print spaces between the words.",
    "num_id": 232
  },
  {
    "id": "p03207",
    "score": "200",
    "desc": "\nIn some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?\n",
    "constraints": "\n\n2 \\leq N \\leq 10\n100 \\leq p_i \\leq 10000\np_i is an even number.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\np_1\np_2\n:\np_N\n\n",
    "output_desc": "\nPrint the total amount Mr. Takaha will pay.\n",
    "sample_input1": "\n3\n4980\n7980\n6980\n\n",
    "sample_output1": "\n15950\n\nThe 7980-yen item gets the discount and the total is 4980 + 7980 / 2 + 6980 = 15950 yen.\nNote that outputs such as 15950.0 will be judged as Wrong Answer.\n",
    "sample_input2": "\n4\n4320\n4320\n4320\n4320\n\n",
    "sample_output2": "\n15120\n\nOnly one of the four items gets the discount and the total is 4320 / 2 + 4320 + 4320 + 4320 = 15120 yen.",
    "num_id": 233
  },
  {
    "id": "p03208",
    "score": "300",
    "desc": "\nIn some other world, today is Christmas Eve.\nThere are N trees planted in Mr. Takaha's garden. The height of the i-th tree (1 \\leq i \\leq N) is h_i meters.\nHe decides to choose K trees from these trees and decorate them with electric lights. To make the scenery more beautiful, the heights of the decorated trees should be as close to each other as possible.\nMore specifically, let the height of the tallest decorated tree be h_{max} meters, and the height of the shortest decorated tree be h_{min} meters. The smaller the value h_{max} - h_{min} is, the better. What is the minimum possible value of h_{max} - h_{min}?\n",
    "constraints": "\n\n2 \\leq K < N \\leq 10^5\n1 \\leq h_i \\leq 10^9\nh_i is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\nh_1\nh_2\n:\nh_N\n\n",
    "output_desc": "\nPrint the minimum possible value of h_{max} - h_{min}.\n",
    "sample_input1": "\n5 3\n10\n15\n11\n14\n12\n\n",
    "sample_output1": "\n2\n\nIf we decorate the first, third and fifth trees, h_{max} = 12, h_{min} = 10 so h_{max} - h_{min} = 2. This is optimal.\n",
    "sample_input2": "\n5 3\n5\n7\n5\n7\n7\n\n",
    "sample_output2": "\n0\n\nIf we decorate the second, fourth and fifth trees, h_{max} = 7, h_{min} = 7 so h_{max} - h_{min} = 0. This is optimal.\nThere are not too many trees in these sample inputs, but note that there can be at most one hundred thousand trees (we just can't put a sample with a hundred thousand lines here).",
    "num_id": 234
  },
  {
    "id": "p03210",
    "score": "100",
    "desc": "\nShichi-Go-San (literally \"Seven-Five-Three\") is a traditional event in a certain country to celebrate the growth of seven-, five- and three-year-old children.\nTakahashi is now X years old. Will his growth be celebrated in Shichi-Go-San this time?\n",
    "constraints": "\n\n1 \u2264 X \u2264 9\nX is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX\n\n",
    "output_desc": "\nIf Takahashi's growth will be celebrated, print YES; if it will not, print NO.\n",
    "sample_input1": "\n5\n\n",
    "sample_output1": "\nYES\n\nThe growth of a five-year-old child will be celebrated.\n",
    "sample_input2": "\n6\n\n",
    "sample_output2": "\nNO\n\nSee you next year.",
    "num_id": 235
  },
  {
    "id": "p03211",
    "score": "200",
    "desc": "\nThere is a string S consisting of digits 1, 2, ..., 9.\nLunlun, the Dachshund, will take out three consecutive digits from S, treat them as a single integer X and bring it to her master. (She cannot rearrange the digits.)\nThe master's favorite number is 753. The closer to this number, the better.\nWhat is the minimum possible (absolute) difference between X and 753?\n",
    "constraints": "\n\nS is a string of length between 4 and 10 (inclusive).\nEach character in S is 1, 2, ..., or 9.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the minimum possible difference between X and 753.\n",
    "sample_input1": "\n1234567876\n\n",
    "sample_output1": "\n34\n\nTaking out the seventh to ninth characters results in X = 787, and the difference between this and 753 is 787 - 753 = 34. The difference cannot be made smaller, no matter where X is taken from.\nNote that the digits cannot be rearranged. For example, taking out 567 and rearranging it to 765 is not allowed.\nWe cannot take out three digits that are not consecutive from S, either. For example, taking out the seventh digit 7, the ninth digit 7 and the tenth digit 6 to obtain 776 is not allowed.\n",
    "sample_input2": "\n35753\n\n",
    "sample_output2": "\n0\n\nIf 753 itself can be taken out, the answer is 0.\n",
    "sample_input3": "\n1111111111\n\n",
    "sample_output3": "\n642\n\nNo matter where X is taken from, X = 111, with the difference 753 - 111 = 642.",
    "num_id": 236
  },
  {
    "id": "p03212",
    "score": "300",
    "desc": "\nYou are given an integer N. Among the integers between 1 and N (inclusive), how many Shichi-Go-San numbers (literally \"Seven-Five-Three numbers\") are there?\nHere, a Shichi-Go-San number is a positive integer that satisfies the following condition:\n\nWhen the number is written in base ten, each of the digits 7, 5 and 3 appears at least once, and the other digits never appear.\n\n",
    "constraints": "\n\n1 \\leq N < 10^9\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the number of the Shichi-Go-San numbers between 1 and N (inclusive).\n",
    "sample_input1": "\n575\n\n",
    "sample_output1": "\n4\n\nThere are four Shichi-Go-San numbers not greater than 575: 357, 375, 537 and 573.\n",
    "sample_input2": "\n3600\n\n",
    "sample_output2": "\n13\n\nThere are 13 Shichi-Go-San numbers not greater than 3600: the above four numbers, 735, 753, 3357, 3375, 3537, 3557, 3573, 3575 and 3577.\n",
    "sample_input3": "\n999999999\n\n",
    "sample_output3": "\n26484\n",
    "num_id": 237
  },
  {
    "id": "p03219",
    "score": "100",
    "desc": "\nThere is a train going from Station A to Station B that costs X yen (the currency of Japan).\nAlso, there is a bus going from Station B to Station C that costs Y yen.\nJoisino got a special ticket. With this ticket, she can take the bus for half the fare if she travels from Station A to Station B by train and then travels from Station B to Station C by bus.\nHow much does it cost to travel from Station A to Station C if she uses this ticket?\n",
    "constraints": "\n\n1 \\leq X,Y \\leq 100\nY is an even number.\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX Y\n\n",
    "output_desc": "\nIf it costs x yen to travel from Station A to Station C, print x.\n",
    "sample_input1": "\n81 58\n\n",
    "sample_output1": "\n110\n\n\nThe train fare is 81 yen.\nThe train fare is 58 \u2044 2=29 yen with the 50% discount.\n\nThus, it costs 110 yen to travel from Station A to Station C.\n",
    "sample_input2": "\n4 54\n\n",
    "sample_output2": "\n31\n",
    "num_id": 238
  },
  {
    "id": "p03220",
    "score": "200",
    "desc": "\nA country decides to build a palace.\nIn this country, the average temperature of a point at an elevation of x meters is T-x \\times 0.006 degrees Celsius.\nThere are N places proposed for the place. The elevation of Place i is H_i meters.\nAmong them, Princess Joisino orders you to select the place whose average temperature is the closest to A degrees Celsius, and build the palace there.\nPrint the index of the place where the palace should be built.\nIt is guaranteed that the solution is unique.\n",
    "constraints": "\n\n1 \\leq N \\leq 1000\n0 \\leq T \\leq 50\n-60 \\leq A \\leq T\n0 \\leq H_i \\leq 10^5\nAll values in input are integers.\nThe solution is unique.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nT A\nH_1 H_2 ... H_N\n\n",
    "output_desc": "\nPrint the index of the place where the palace should be built.\n",
    "sample_input1": "\n2\n12 5\n1000 2000\n\n",
    "sample_output1": "\n1\n\n\nThe average temperature of Place 1 is 12-1000 \\times 0.006=6 degrees Celsius.\nThe average temperature of Place 2 is 12-2000 \\times 0.006=0 degrees Celsius.\n\nThus, the palace should be built at Place 1.\n",
    "sample_input2": "\n3\n21 -11\n81234 94124 52141\n\n",
    "sample_output2": "\n3\n",
    "num_id": 239
  },
  {
    "id": "p03238",
    "score": "100",
    "desc": "\n\nIn 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.  \n",
    "constraints": "\n\n\nN is 1 or 2.\nA is an integer between 1 and 9 (inclusive).\nB is an integer between 1 and 9 (inclusive).\n\n",
    "input_desc": "\n\nInput is given from Standard Input in one of the following formats:  \n1\n\n2\nA\nB\n\n",
    "output_desc": "\n\nIf N=1, print Hello World; if N=2, print A+B.  \n",
    "sample_input1": "\n1\n\n",
    "sample_output1": "\nHello World\n\nAs N=1, Takahashi is one year old. Thus, we should print Hello World.\n",
    "sample_input2": "\n2\n3\n5\n\n",
    "sample_output2": "\n8\n\nAs N=2, Takahashi is two years old. Thus, we should print A+B, which is 8 since A=3 and B=5. ",
    "num_id": 240
  },
  {
    "id": "p03239",
    "score": "200",
    "desc": "\nWhen Mr. X is away from home, he has decided to use his smartwatch to search the best route to go back home, to participate in ABC.\nYou, the smartwatch, has found N routes to his home.\nIf Mr. X uses the i-th of these routes, he will get home in time t_i at cost c_i.\nFind the smallest cost of a route that takes not longer than time T.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 100\n1 \\leq T \\leq 1000\n1 \\leq c_i \\leq 1000\n1 \\leq t_i \\leq 1000\nThe pairs (c_i, t_i) are distinct.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN T\nc_1 t_1\nc_2 t_2\n:\nc_N t_N\n\n",
    "output_desc": "\nPrint the smallest cost of a route that takes not longer than time T.\nIf there is no route that takes not longer than time T, print TLE instead.\n",
    "sample_input1": "\n3 70\n7 60\n1 80\n4 50\n\n",
    "sample_output1": "\n4\n\n\nThe first route gets him home at cost 7.\nThe second route takes longer than time T = 70.\nThe third route gets him home at cost 4.\n\nThus, the cost 4 of the third route is the minimum.\n",
    "sample_input2": "\n4 3\n1 1000\n2 4\n3 1000\n4 500\n\n",
    "sample_output2": "\nTLE\n\nThere is no route that takes not longer than time T = 3.\n",
    "sample_input3": "\n5 9\n25 8\n5 9\n4 10\n1000 1000\n6 1\n\n",
    "sample_output3": "\n5\n",
    "num_id": 241
  },
  {
    "id": "p03242",
    "score": "100",
    "desc": "\nCat Snuke is learning to write characters.\nToday, he practiced writing digits 1 and 9, but he did it the other way around.\nYou are given a three-digit integer n written by Snuke.\nPrint the integer obtained by replacing each digit 1 with 9 and each digit 9 with 1 in n.\n",
    "constraints": "\n\n111 \\leq n \\leq 999\nn is an integer consisting of digits 1 and 9.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nn\n\n",
    "output_desc": "\nPrint the integer obtained by replacing each occurrence of 1 with 9 and each occurrence of 9 with 1 in n.\n",
    "sample_input1": "\n119\n\n",
    "sample_output1": "\n991\n\nReplace the 9 in the ones place with 1, the 1 in the tens place with 9 and the 1 in the hundreds place with 9. The answer is 991.\n",
    "sample_input2": "\n999\n\n",
    "sample_output2": "\n111\n",
    "num_id": 242
  },
  {
    "id": "p03243",
    "score": "200",
    "desc": "\nKurohashi has never participated in AtCoder Beginner Contest (ABC).\nThe next ABC to be held is ABC N (the N-th ABC ever held).\nKurohashi wants to make his debut in some ABC x such that all the digits of x in base ten are the same.\nWhat is the earliest ABC where Kurohashi can make his debut?\n",
    "constraints": "\n\n100 \\leq N \\leq 999\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nIf the earliest ABC where Kurohashi can make his debut is ABC n, print n.\n",
    "sample_input1": "\n111\n\n",
    "sample_output1": "\n111\n\nThe next ABC to be held is ABC 111, where Kurohashi can make his debut.\n",
    "sample_input2": "\n112\n\n",
    "sample_output2": "\n222\n\nThe next ABC to be held is ABC 112, which means Kurohashi can no longer participate in ABC 111.\nAmong the ABCs where Kurohashi can make his debut, the earliest one is ABC 222.\n",
    "sample_input3": "\n750\n\n",
    "sample_output3": "\n777\n",
    "num_id": 243
  },
  {
    "id": "p03250",
    "score": "100",
    "desc": "\nYou have decided to give an allowance to your child depending on the outcome of the game that he will play now.\nThe game is played as follows:\n\nThere are three \"integer panels\", each with a digit between 1 and 9 (inclusive) printed on it, and one \"operator panel\" with a + printed on it.\nThe player should construct a formula of the form X + Y, by arranging the four panels from left to right. (The operator panel should not be placed at either end of the formula.)\nThen, the amount of the allowance will be equal to the resulting value of the formula.\n\nGiven the values A, B and C printed on the integer panels used in the game, find the maximum possible amount of the allowance.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq A, B, C \\leq 9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nPrint the maximum possible amount of the allowance.\n",
    "sample_input1": "\n1 5 2\n\n",
    "sample_output1": "\n53\n\nThe amount of the allowance will be 53 when the panels are arranged as 52+1, and this is the maximum possible amount.\n",
    "sample_input2": "\n9 9 9\n\n",
    "sample_output2": "\n108\n\n",
    "sample_input3": "\n6 6 7\n\n",
    "sample_output3": "\n82\n",
    "num_id": 244
  },
  {
    "id": "p03252",
    "score": "300",
    "desc": "\nYou are given strings S and T consisting of lowercase English letters.\nYou can perform the following operation on S any number of times:\nOperation: Choose two distinct lowercase English letters c_1 and c_2, then replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1.\nDetermine if S and T can be made equal by performing the operation zero or more times.\n",
    "constraints": "\n\n1 \\leq |S| \\leq 2 \\times 10^5\n|S| = |T|\nS and T consists of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\nT\n\n",
    "output_desc": "\nIf S and T can be made equal, print Yes; otherwise, print No.\n",
    "sample_input1": "\nazzel\napple\n\n",
    "sample_output1": "\nYes\n\nazzel can be changed to apple, as follows:\n\nChoose e as c_1 and l as c_2. azzel becomes azzle.\nChoose z as c_1 and p as c_2. azzle becomes apple.\n\n",
    "sample_input2": "\nchokudai\nredcoder\n\n",
    "sample_output2": "\nNo\n\nNo sequences of operation can change chokudai to redcoder.\n",
    "sample_input3": "\nabcdefghijklmnopqrstuvwxyz\nibyhqfrekavclxjstdwgpzmonu\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 245
  },
  {
    "id": "p03254",
    "score": "200",
    "desc": "\nThere are N children, numbered 1, 2, ..., N.\nSnuke has decided to distribute x sweets among them.\nHe needs to give out all the x sweets, but some of the children may get zero sweets.\nFor each i (1 \\leq i \\leq N), Child i will be happy if he/she gets exactly a_i sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.\n",
    "constraints": "\n\nAll values in input are integers.\n2 \\leq N \\leq 100\n1 \\leq x \\leq 10^9\n1 \\leq a_i \\leq 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN x\na_1 a_2 ... a_N\n\n",
    "output_desc": "\nPrint the maximum possible number of happy children.\n",
    "sample_input1": "\n3 70\n20 30 10\n\n",
    "sample_output1": "\n2\n\nOne optimal way to distribute sweets is (20, 30, 20).\n",
    "sample_input2": "\n3 10\n20 30 10\n\n",
    "sample_output2": "\n1\n\nThe optimal way to distribute sweets is (0, 0, 10).\n",
    "sample_input3": "\n4 1111\n1 10 100 1000\n\n",
    "sample_output3": "\n4\n\nThe optimal way to distribute sweets is (1, 10, 100, 1000).\n",
    "sample_input4": "\n2 10\n20 20\n\n",
    "sample_output4": "\n0\n\nNo children will be happy, no matter how the sweets are distributed.",
    "num_id": 246
  },
  {
    "id": "p03260",
    "score": "100",
    "desc": "\nYou are given integers A and B, each between 1 and 3 (inclusive).\nDetermine if there is an integer C between 1 and 3 (inclusive) such that A \\times B \\times C is an odd number.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq A, B \\leq 3\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nIf there is an integer C between 1 and 3 that satisfies the condition, print Yes; otherwise, print No.\n",
    "sample_input1": "\n3 1\n\n",
    "sample_output1": "\nYes\n\nLet C = 3. Then, A \\times B \\times C = 3 \\times 1 \\times 3 = 9, which is an odd number.\n",
    "sample_input2": "\n1 2\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\n2 2\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 247
  },
  {
    "id": "p03262",
    "score": "300",
    "desc": "\nThere are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq N \\leq 10^5\n1 \\leq X \\leq 10^9\n1 \\leq x_i \\leq 10^9\nx_i are all different.\nx_1, x_2, ..., x_N \\neq X\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN X\nx_1 x_2 ... x_N\n\n",
    "output_desc": "\nPrint the maximum value of D that enables you to visit all the cities.\n",
    "sample_input1": "\n3 3\n1 7 11\n\n",
    "sample_output1": "\n2\n\nSetting D = 2 enables you to visit all the cities as follows, and this is the maximum value of such D.\n\nPerform Move 2 to travel to coordinate 1.\nPerform Move 1 to travel to coordinate 3.\nPerform Move 1 to travel to coordinate 5.\nPerform Move 1 to travel to coordinate 7.\nPerform Move 1 to travel to coordinate 9.\nPerform Move 1 to travel to coordinate 11.\n\n",
    "sample_input2": "\n3 81\n33 105 57\n\n",
    "sample_output2": "\n24\n\n",
    "sample_input3": "\n1 1\n1000000000\n\n",
    "sample_output3": "\n999999999\n",
    "num_id": 248
  },
  {
    "id": "p03264",
    "score": "100",
    "desc": "\nFind the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive). The order does not matter.\n",
    "constraints": "\n\n2\\leq K\\leq 100\nK is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nK\n\n",
    "output_desc": "\nPrint the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive).\n",
    "sample_input1": "\n3\n\n",
    "sample_output1": "\n2\n\nTwo pairs can be chosen: (2,1) and (2,3).\n",
    "sample_input2": "\n6\n\n",
    "sample_output2": "\n9\n\n",
    "sample_input3": "\n11\n\n",
    "sample_output3": "\n30\n\n",
    "sample_input4": "\n50\n\n",
    "sample_output4": "\n625\n",
    "num_id": 249
  },
  {
    "id": "p03266",
    "score": "300",
    "desc": "\nYou are given integers N and K. Find the number of triples (a,b,c) of positive integers not greater than N such that a+b,b+c and c+a are all multiples of K.\nThe order of a,b,c does matter, and some of them can be the same.\n",
    "constraints": "\n\n1 \\leq N,K \\leq 2\\times 10^5\nN and K are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\n\n",
    "output_desc": "\nPrint the number of triples (a,b,c) of positive integers not greater than N such that a+b,b+c and c+a are all multiples of K.\n",
    "sample_input1": "\n3 2\n\n",
    "sample_output1": "\n9\n\n(1,1,1),(1,1,3),(1,3,1),(1,3,3),(2,2,2),(3,1,1),(3,1,3),(3,3,1) and (3,3,3) satisfy the condition.\n",
    "sample_input2": "\n5 3\n\n",
    "sample_output2": "\n1\n\n",
    "sample_input3": "\n31415 9265\n\n",
    "sample_output3": "\n27\n\n",
    "sample_input4": "\n35897 932\n\n",
    "sample_output4": "\n114191\n",
    "num_id": 250
  },
  {
    "id": "p03274",
    "score": "300",
    "desc": "\nThere are N candles placed on a number line.\nThe i-th candle from the left is placed on coordinate x_i.\nHere, x_1 < x_2 < ... < x_N holds.\nInitially, no candles are burning.\nSnuke decides to light K of the N candles.\nNow, he is at coordinate 0.\nHe can move left and right along the line with speed 1.\nHe can also light a candle when he is at the same position as the candle, in negligible time.\nFind the minimum time required to light K candles.\n",
    "constraints": "\n\n1 \\leq N \\leq 10^5\n1 \\leq K \\leq N\nx_i is an integer.\n|x_i| \\leq 10^8\nx_1 < x_2 < ... < x_N\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\nx_1 x_2 ... x_N\n\n",
    "output_desc": "\nPrint the minimum time required to light K candles.\n",
    "sample_input1": "\n5 3\n-30 -10 10 20 50\n\n",
    "sample_output1": "\n40\n\nHe should move and light candles as follows:\n\nMove from coordinate 0 to -10.\nLight the second candle from the left.\nMove from coordinate -10 to 10.\nLight the third candle from the left.\nMove from coordinate 10 to 20.\nLight the fourth candle from the left.\n\n",
    "sample_input2": "\n3 2\n10 20 30\n\n",
    "sample_output2": "\n20\n\n",
    "sample_input3": "\n1 1\n0\n\n",
    "sample_output3": "\n0\n\n\nThere may be a candle placed at coordinate 0.\n\n",
    "sample_input4": "\n8 5\n-9 -7 -4 -3 1 2 3 4\n\n",
    "sample_output4": "\n10\n",
    "num_id": 251
  },
  {
    "id": "p03281",
    "score": "200",
    "desc": "\n\nThe number 105 is quite special - it is odd but still it has eight divisors.\nNow, your task is this: how many odd numbers with exactly eight positive divisors are there between 1 and N (inclusive)?\n",
    "constraints": "\n\n\nN is an integer between 1 and 200 (inclusive).\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\n\nPrint the count.\n",
    "sample_input1": "\n105\n\n",
    "sample_output1": "\n1\n\nAmong the numbers between 1 and 105, the only number that is odd and has exactly eight divisors is 105.\n",
    "sample_input2": "\n7\n\n",
    "sample_output2": "\n0\n\n1 has one divisor. 3, 5 and 7 are all prime and have two divisors. Thus, there is no number that satisfies the condition.",
    "num_id": 252
  },
  {
    "id": "p03282",
    "score": "300",
    "desc": "\n\nMr. Infinity has a string S consisting of digits from 1 to 9. Each time the date changes, this string changes as follows:\n\nEach occurrence of 2 in S is replaced with 22. Similarly, each 3 becomes 333, 4 becomes 4444, 5 becomes 55555, 6 becomes 666666, 7 becomes 7777777, 8 becomes 88888888 and 9 becomes 999999999. 1 remains as 1.\n\nFor example, if S is 1324, it becomes 1333224444 the next day, and it becomes 133333333322224444444444444444 the day after next.\nYou are interested in what the string looks like after 5 \\times 10^{15} days. What is the K-th character from the left in the string after 5 \\times 10^{15} days?\n",
    "constraints": "\n\n\nS is a string of length between 1 and 100 (inclusive).\nK is an integer between 1 and 10^{18} (inclusive).\nThe length of the string after 5 \\times 10^{15} days is at least K.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nS\nK\n\n",
    "output_desc": "\n\nPrint the K-th character from the left in Mr. Infinity's string after 5 \\times 10^{15} days.\n",
    "sample_input1": "\n1214\n4\n\n",
    "sample_output1": "\n2\n\nThe string S changes as follows:  \n\nNow: 1214\nAfter one day: 12214444\nAfter two days: 1222214444444444444444\nAfter three days: 12222222214444444444444444444444444444444444444444444444444444444444444444\n\nThe first five characters in the string after 5 \\times 10^{15} days is 12222. As K=4, we should print the fourth character, 2.\n",
    "sample_input2": "\n3\n157\n\n",
    "sample_output2": "\n3\n\nThe initial string is 3. The string after 5 \\times 10^{15} days consists only of 3.\n",
    "sample_input3": "\n299792458\n9460730472580800\n\n",
    "sample_output3": "\n2\n",
    "num_id": 253
  },
  {
    "id": "p03284",
    "score": "100",
    "desc": "\nTakahashi has decided to distribute N AtCoder Crackers to K users of as evenly as possible.\nWhen all the crackers are distributed, find the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.\n",
    "constraints": "\n\n1 \\leq N,K \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\n\n",
    "output_desc": "\nPrint the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.\n",
    "sample_input1": "\n7 3\n\n",
    "sample_output1": "\n1\n\nWhen the users receive two, two and three crackers, respectively, the (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user, is 1.\n",
    "sample_input2": "\n100 10\n\n",
    "sample_output2": "\n0\n\nThe crackers can be distributed evenly.\n",
    "sample_input3": "\n1 1\n\n",
    "sample_output3": "\n0\n",
    "num_id": 254
  },
  {
    "id": "p03285",
    "score": "200",
    "desc": "\nLa Confiserie d'ABC sells cakes at 4 dollars each and doughnuts at 7 dollars each.\nDetermine if there is a way to buy some of them for exactly N dollars. You can buy two or more doughnuts and two or more cakes, and you can also choose to buy zero doughnuts or zero cakes.\n",
    "constraints": "\n\nN is an integer between 1 and 100, inclusive.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nIf there is a way to buy some cakes and some doughnuts for exactly N dollars, print Yes; otherwise, print No.\n",
    "sample_input1": "\n11\n\n",
    "sample_output1": "\nYes\n\nIf you buy one cake and one doughnut, the total will be 4 + 7 = 11 dollars.\n",
    "sample_input2": "\n40\n\n",
    "sample_output2": "\nYes\n\nIf you buy ten cakes, the total will be 4 \\times 10 = 40 dollars.\n",
    "sample_input3": "\n3\n\n",
    "sample_output3": "\nNo\n\nThe prices of cakes (4 dollars) and doughnuts (7 dollars) are both higher than 3 dollars, so there is no such way.",
    "num_id": 255
  },
  {
    "id": "p03286",
    "score": "300",
    "desc": "\nGiven an integer N, find the base -2 representation of N.\nHere, S is the base -2 representation of N when the following are all satisfied:\n\nS is a string consisting of 0 and 1.\nUnless S = 0, the initial character of S is 1.\nLet S = S_k S_{k-1} ... S_0, then S_0 \\times (-2)^0 + S_1 \\times (-2)^1 + ... + S_k \\times (-2)^k = N.\n\nIt can be proved that, for any integer M, the base -2 representation of M is uniquely determined.\n",
    "constraints": "\n\nEvery value in input is integer.\n-10^9 \\leq N \\leq 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the base -2 representation of N.\n",
    "sample_input1": "\n-9\n\n",
    "sample_output1": "\n1011\n\nAs (-2)^0 + (-2)^1 + (-2)^3 = 1 + (-2) + (-8) = -9, 1011 is the base -2 representation of -9.\n",
    "sample_input2": "\n123456789\n\n",
    "sample_output2": "\n11000101011001101110100010101\n\n",
    "sample_input3": "\n0\n\n",
    "sample_output3": "\n0\n",
    "num_id": 256
  },
  {
    "id": "p03288",
    "score": "100",
    "desc": "\nA programming competition site AtCode regularly holds programming contests.\nThe next contest on AtCode is called ABC, which is rated for contestants with ratings less than 1200.\nThe contest after the ABC is called ARC, which is rated for contestants with ratings less than 2800.\nThe contest after the ARC is called AGC, which is rated for all contestants.\nTakahashi's rating on AtCode is R. What is the next contest rated for him?\n",
    "constraints": "\n\n0 \u2264 R \u2264 4208\nR is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nR\n\n",
    "output_desc": "\nPrint the name of the next contest rated for Takahashi (ABC, ARC or AGC).\n",
    "sample_input1": "\n1199\n\n",
    "sample_output1": "\nABC\n\n1199 is less than 1200, so ABC will be rated.\n",
    "sample_input2": "\n1200\n\n",
    "sample_output2": "\nARC\n\n1200 is not less than 1200 and ABC will be unrated, but it is less than 2800 and ARC will be rated.\n",
    "sample_input3": "\n4208\n\n",
    "sample_output3": "\nAGC\n",
    "num_id": 257
  },
  {
    "id": "p03289",
    "score": "200",
    "desc": "\nYou are given a string S. Each character of S is uppercase or lowercase English letter.\nDetermine if S satisfies all of the following conditions:\n\nThe initial character of S is an uppercase A.\nThere is exactly one occurrence of C between the third character from the beginning and the second to last character (inclusive).\nAll letters except the A and C mentioned above are lowercase.\n\n",
    "constraints": "\n\n4 \u2264 |S| \u2264 10 (|S| is the length of the string S.)\nEach character of S is uppercase or lowercase English letter.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nIf S satisfies all of the conditions in the problem statement, print AC; otherwise, print WA.\n",
    "sample_input1": "\nAtCoder\n\n",
    "sample_output1": "\nAC\n\nThe first letter is A, the third letter is C and the remaining letters are all lowercase, so all the conditions are satisfied.\n",
    "sample_input2": "\nACoder\n\n",
    "sample_output2": "\nWA\n\nThe second letter should not be C.\n",
    "sample_input3": "\nAcycliC\n\n",
    "sample_output3": "\nWA\n\nThe last letter should not be C, either.\n",
    "sample_input4": "\nAtCoCo\n\n",
    "sample_output4": "\nWA\n\nThere should not be two or more occurrences of C.\n",
    "sample_input5": "\nAtcoder\n\n",
    "sample_output5": "\nWA\n\nThe number of C should not be zero, either.",
    "num_id": 258
  },
  {
    "id": "p03292",
    "score": "100",
    "desc": "\nYou have three tasks, all of which need to be completed.\nFirst, you can complete any one task at cost 0.\nThen, just after completing the i-th task, you can complete the j-th task at cost |A_j - A_i|.\nHere, |x| denotes the absolute value of x.\nFind the minimum total cost required to complete all the task.\n",
    "constraints": "\n\nAll values in input are integers.\n1 \\leq A_1, A_2, A_3 \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA_1 A_2 A_3\n\n",
    "output_desc": "\nPrint the minimum total cost required to complete all the task.\n",
    "sample_input1": "\n1 6 3\n\n",
    "sample_output1": "\n5\n\nWhen the tasks are completed in the following order, the total cost will be 5, which is the minimum:\n\nComplete the first task at cost 0.\nComplete the third task at cost 2.\nComplete the second task at cost 3.\n\n",
    "sample_input2": "\n11 5 5\n\n",
    "sample_output2": "\n6\n\n",
    "sample_input3": "\n100 100 100\n\n",
    "sample_output3": "\n0\n",
    "num_id": 259
  },
  {
    "id": "p03293",
    "score": "200",
    "desc": "\nYou are given string S and T consisting of lowercase English letters.\nDetermine if S equals T after rotation.\nThat is, determine if S equals T after the following operation is performed some number of times:\nOperation: Let S = S_1 S_2 ... S_{|S|}. Change S to S_{|S|} S_1 S_2 ... S_{|S|-1}.\nHere, |X| denotes the length of the string X.\n",
    "constraints": "\n\n2 \\leq |S| \\leq 100\n|S| = |T|\nS and T consist of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\nT\n\n",
    "output_desc": "\nIf S equals T after rotation, print Yes; if it does not, print No.\n",
    "sample_input1": "\nkyoto\ntokyo\n\n",
    "sample_output1": "\nYes\n\n\nIn the first operation, kyoto becomes okyot.\nIn the second operation, okyot becomes tokyo.\n\n",
    "sample_input2": "\nabc\narc\n\n",
    "sample_output2": "\nNo\n\nabc does not equal arc after any number of operations.\n",
    "sample_input3": "\naaaaaaaaaaaaaaab\naaaaaaaaaaaaaaab\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 260
  },
  {
    "id": "p03304",
    "score": "300",
    "desc": "\nLet us define the beauty of a sequence (a_1,... ,a_n) as the number of pairs of two adjacent elements in it whose absolute differences are d.\nFor example, when d=1, the beauty of the sequence (3, 2, 3, 10, 9) is 3.\nThere are a total of n^m sequences of length m where each element is an integer between 1 and n (inclusive).\nFind the beauty of each of these n^m sequences, and print the average of those values.\n",
    "constraints": "\n\n0 \\leq d < n \\leq 10^9\n2 \\leq m \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nn m d\n\n",
    "output_desc": "\nPrint the average of the beauties of the sequences of length m where each element is an integer between 1 and n.\nThe output will be judged correct if the absolute or relative error is at most 10^{-6}.\n",
    "sample_input1": "\n2 3 1\n\n",
    "sample_output1": "\n1.0000000000\n\nThe beauty of (1,1,1) is 0.\nThe beauty of (1,1,2) is 1.\nThe beauty of (1,2,1) is 2.\nThe beauty of (1,2,2) is 1.\nThe beauty of (2,1,1) is 1.\nThe beauty of (2,1,2) is 2.\nThe beauty of (2,2,1) is 1.\nThe beauty of (2,2,2) is 0.\nThe answer is the average of these values: (0+1+2+1+1+2+1+0)/8=1.\n",
    "sample_input2": "\n1000000000 180707 0\n\n",
    "sample_output2": "\n0.0001807060\n",
    "num_id": 261
  },
  {
    "id": "p03307",
    "score": "100",
    "desc": "\nYou are given a positive integer N.\nFind the minimum positive integer divisible by both 2 and N.\n",
    "constraints": "\n\n1 \\leq N \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the minimum positive integer divisible by both 2 and N.\n",
    "sample_input1": "\n3\n\n",
    "sample_output1": "\n6\n\n6 is divisible by both 2 and 3.\nAlso, there is no positive integer less than 6 that is divisible by both 2 and 3.\nThus, the answer is 6.\n",
    "sample_input2": "\n10\n\n",
    "sample_output2": "\n10\n\n",
    "sample_input3": "\n999999999\n\n",
    "sample_output3": "\n1999999998\n",
    "num_id": 262
  },
  {
    "id": "p03308",
    "score": "200",
    "desc": "\nYou are given an integer sequence A of length N.\nFind the maximum absolute difference of two elements (with different indices) in A.\n",
    "constraints": "\n\n2 \\leq N \\leq 100\n1 \\leq A_i \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the maximum absolute difference of two elements (with different indices) in A.\n",
    "sample_input1": "\n4\n1 4 6 3\n\n",
    "sample_output1": "\n5\n\nThe maximum absolute difference of two elements is A_3-A_1=6-1=5.\n",
    "sample_input2": "\n2\n1000000000 1\n\n",
    "sample_output2": "\n999999999\n\n",
    "sample_input3": "\n5\n1 1 1 1 1\n\n",
    "sample_output3": "\n0\n",
    "num_id": 263
  },
  {
    "id": "p03309",
    "score": "300",
    "desc": "\nSnuke has an integer sequence A of length N.\nHe will freely choose an integer b.\nHere, he will get sad if A_i and b+i are far from each other.\nMore specifically, the sadness of Snuke is calculated as follows:\n\nabs(A_1 - (b+1)) + abs(A_2 - (b+2)) + ... + abs(A_N - (b+N))\n\nHere, abs(x) is a function that returns the absolute value of x.\nFind the minimum possible sadness of Snuke.\n",
    "constraints": "\n\n1 \\leq N \\leq 2 \\times 10^5\n1 \\leq A_i \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the minimum possible sadness of Snuke.\n",
    "sample_input1": "\n5\n2 2 3 5 5\n\n",
    "sample_output1": "\n2\n\nIf we choose b=0, the sadness of Snuke would be abs(2-(0+1))+abs(2-(0+2))+abs(3-(0+3))+abs(5-(0+4))+abs(5-(0+5))=2.\nAny choice of b does not make the sadness of Snuke less than 2, so the answer is 2.\n",
    "sample_input2": "\n9\n1 2 3 4 5 6 7 8 9\n\n",
    "sample_output2": "\n0\n\n",
    "sample_input3": "\n6\n6 5 4 3 2 1\n\n",
    "sample_output3": "\n18\n\n",
    "sample_input4": "\n7\n1 1 1 1 2 3 4\n\n",
    "sample_output4": "\n6\n",
    "num_id": 264
  },
  {
    "id": "p03311",
    "score": "300",
    "desc": "\nSnuke has an integer sequence A of length N.\nHe will freely choose an integer b.\nHere, he will get sad if A_i and b+i are far from each other.\nMore specifically, the sadness of Snuke is calculated as follows:\n\nabs(A_1 - (b+1)) + abs(A_2 - (b+2)) + ... + abs(A_N - (b+N))\n\nHere, abs(x) is a function that returns the absolute value of x.\nFind the minimum possible sadness of Snuke.\n",
    "constraints": "\n\n1 \\leq N \\leq 2 \\times 10^5\n1 \\leq A_i \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the minimum possible sadness of Snuke.\n",
    "sample_input1": "\n5\n2 2 3 5 5\n\n",
    "sample_output1": "\n2\n\nIf we choose b=0, the sadness of Snuke would be abs(2-(0+1))+abs(2-(0+2))+abs(3-(0+3))+abs(5-(0+4))+abs(5-(0+5))=2.\nAny choice of b does not make the sadness of Snuke less than 2, so the answer is 2.\n",
    "sample_input2": "\n9\n1 2 3 4 5 6 7 8 9\n\n",
    "sample_output2": "\n0\n\n",
    "sample_input3": "\n6\n6 5 4 3 2 1\n\n",
    "sample_output3": "\n18\n\n",
    "sample_input4": "\n7\n1 1 1 1 2 3 4\n\n",
    "sample_output4": "\n6\n",
    "num_id": 265
  },
  {
    "id": "p03315",
    "score": "100",
    "desc": "\nThere is always an integer in Takahashi's mind.\nInitially, the integer in Takahashi's mind is 0. Takahashi is now going to eat four symbols, each of which is + or -. When he eats +, the integer in his mind increases by 1; when he eats -, the integer in his mind decreases by 1.\nThe symbols Takahashi is going to eat are given to you as a string S. The i-th character in S is the i-th symbol for him to eat.\nFind the integer in Takahashi's mind after he eats all the symbols.\n",
    "constraints": "\n\nThe length of S is 4.\nEach character in S is + or -.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the integer in Takahashi's mind after he eats all the symbols.\n",
    "sample_input1": "\n+-++\n\n",
    "sample_output1": "\n2\n\n\nInitially, the integer in Takahashi's mind is 0.\nThe first integer for him to eat is +. After eating it, the integer in his mind becomes 1.\nThe second integer to eat is -. After eating it, the integer in his mind becomes 0.\nThe third integer to eat is +. After eating it, the integer in his mind becomes 1.\nThe fourth integer to eat is +. After eating it, the integer in his mind becomes 2.\n\nThus, the integer in Takahashi's mind after he eats all the symbols is 2.\n",
    "sample_input2": "\n-+--\n\n",
    "sample_output2": "\n-2\n\n",
    "sample_input3": "\n----\n\n",
    "sample_output3": "\n-4\n",
    "num_id": 266
  },
  {
    "id": "p03316",
    "score": "200",
    "desc": "\nLet S(n) denote the sum of the digits in the decimal notation of n.\nFor example, S(101) = 1 + 0 + 1 = 2.\nGiven an integer N, determine if S(N) divides N.\n",
    "constraints": "\n\n1 \\leq N \\leq 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nIf S(N) divides N, print Yes; if it does not, print No.\n",
    "sample_input1": "\n12\n\n",
    "sample_output1": "\nYes\n\nIn this input, N=12.\nAs S(12) = 1 + 2 = 3, S(N) divides N.\n",
    "sample_input2": "\n101\n\n",
    "sample_output2": "\nNo\n\nAs S(101) = 1 + 0 + 1 = 2, S(N) does not divide N.\n",
    "sample_input3": "\n999999999\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 267
  },
  {
    "id": "p03317",
    "score": "300",
    "desc": "\nThere is a sequence of length N: A_1, A_2, ..., A_N. Initially, this sequence is a permutation of 1, 2, ..., N.\nOn this sequence, Snuke can perform the following operation:\n\nChoose K consecutive elements in the sequence. Then, replace the value of each chosen element with the minimum value among the chosen elements.\n\nSnuke would like to make all the elements in this sequence equal by repeating the operation above some number of times.\nFind the minimum number of operations required.\nIt can be proved that, Under the constraints of this problem, this objective is always achievable.\n",
    "constraints": "\n\n2 \\leq K \\leq N \\leq 100000\nA_1, A_2, ..., A_N is a permutation of 1, 2, ..., N.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the minimum number of operations required.\n",
    "sample_input1": "\n4 3\n2 3 1 4\n\n",
    "sample_output1": "\n2\n\nOne optimal strategy is as follows:\n\n\nIn the first operation, choose the first, second and third elements. The sequence A becomes 1, 1, 1, 4.\n\n\nIn the second operation, choose the second, third and fourth elements. The sequence A becomes 1, 1, 1, 1.\n\n\n",
    "sample_input2": "\n3 3\n1 2 3\n\n",
    "sample_output2": "\n1\n\n",
    "sample_input3": "\n8 3\n7 3 1 8 4 6 2 5\n\n",
    "sample_output3": "\n4\n",
    "num_id": 268
  },
  {
    "id": "p03319",
    "score": "300",
    "desc": "\nThere is a sequence of length N: A_1, A_2, ..., A_N. Initially, this sequence is a permutation of 1, 2, ..., N.\nOn this sequence, Snuke can perform the following operation:\n\nChoose K consecutive elements in the sequence. Then, replace the value of each chosen element with the minimum value among the chosen elements.\n\nSnuke would like to make all the elements in this sequence equal by repeating the operation above some number of times.\nFind the minimum number of operations required.\nIt can be proved that, Under the constraints of this problem, this objective is always achievable.\n",
    "constraints": "\n\n2 \\leq K \\leq N \\leq 100000\nA_1, A_2, ..., A_N is a permutation of 1, 2, ..., N.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the minimum number of operations required.\n",
    "sample_input1": "\n4 3\n2 3 1 4\n\n",
    "sample_output1": "\n2\n\nOne optimal strategy is as follows:\n\n\nIn the first operation, choose the first, second and third elements. The sequence A becomes 1, 1, 1, 4.\n\n\nIn the second operation, choose the second, third and fourth elements. The sequence A becomes 1, 1, 1, 1.\n\n\n",
    "sample_input2": "\n3 3\n1 2 3\n\n",
    "sample_output2": "\n1\n\n",
    "sample_input3": "\n8 3\n7 3 1 8 4 6 2 5\n\n",
    "sample_output3": "\n4\n",
    "num_id": 269
  },
  {
    "id": "p03323",
    "score": "100",
    "desc": "\n\nE869120's and square1001's 16-th birthday is coming soon.\nTakahashi from AtCoder Kingdom gave them a round cake cut into 16 equal fan-shaped pieces.\nE869120 and square1001 were just about to eat A and B of those pieces, respectively,\nwhen they found a note attached to the cake saying that \"the same person should not take two adjacent pieces of cake\".\nCan both of them obey the instruction in the note and take desired numbers of pieces of cake?\n",
    "constraints": "\n\n\nA and B are integers between 1 and 16 (inclusive).\nA+B is at most 16.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\n\nIf both E869120 and square1001 can obey the instruction in the note and take desired numbers of pieces of cake, print Yay!; otherwise, print :(.\n",
    "sample_input1": "\n5 4\n\n",
    "sample_output1": "\nYay!\n\nBoth of them can take desired number of pieces as follows:\n\n",
    "sample_input2": "\n8 8\n\n",
    "sample_output2": "\nYay!\n\nBoth of them can take desired number of pieces as follows:\n\n",
    "sample_input3": "\n11 4\n\n",
    "sample_output3": "\n:(\n\nIn this case, there is no way for them to take desired number of pieces, unfortunately.",
    "num_id": 270
  },
  {
    "id": "p03324",
    "score": "200",
    "desc": "\n\nToday, the memorable AtCoder Beginner Contest 100 takes place. On this occasion, Takahashi would like to give an integer to Ringo.\nAs the name of the contest is AtCoder Beginner Contest 100, Ringo would be happy if he is given a positive integer that can be divided by 100 exactly D times.\nFind the N-th smallest integer that would make Ringo happy.\n",
    "constraints": "\n\n\nD is 0, 1 or 2.\nN is an integer between 1 and 100 (inclusive).\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nD N\n\n",
    "output_desc": "\n\nPrint the N-th smallest integer that can be divided by 100 exactly D times.\n",
    "sample_input1": "\n0 5\n\n",
    "sample_output1": "\n5\n\nThe integers that can be divided by 100 exactly 0 times (that is, not divisible by 100) are as follows: 1, 2, 3, 4, 5, 6, 7, ...\nThus, the 5-th smallest integer that would make Ringo happy is 5.  \n",
    "sample_input2": "\n1 11\n\n",
    "sample_output2": "\n1100\n\nThe integers that can be divided by 100 exactly once are as follows: 100, 200, 300, 400, 500, 600, 700, 800, 900, 1 \\ 000, 1 \\ 100, ...\nThus, the integer we are seeking is 1 \\ 100.\n",
    "sample_input3": "\n2 85\n\n",
    "sample_output3": "\n850000\n\nThe integers that can be divided by 100 exactly twice are as follows: 10 \\ 000, 20 \\ 000, 30 \\ 000, ...\nThus, the integer we are seeking is 850 \\ 000.",
    "num_id": 271
  },
  {
    "id": "p03327",
    "score": "100",
    "desc": "\nDecades have passed since the beginning of AtCoder Beginner Contest.\nThe contests are labeled as ABC001, ABC002, ... from the first round, but after the 999-th round ABC999, a problem occurred: how the future rounds should be labeled?\nIn the end, the labels for the rounds from the 1000-th to the 1998-th are decided: ABD001, ABD002, ..., ABD999.\nYou are given an integer N between 1 and 1998 (inclusive). Print the first three characters of the label of the N-th round of AtCoder Beginner Contest.\n",
    "constraints": "\n\n1 \\leq N \\leq 1998\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the first three characters of the label of the N-th round of AtCoder Beginner Contest.\n",
    "sample_input1": "\n999\n\n",
    "sample_output1": "\nABC\n\nThe 999-th round of AtCoder Beginner Contest is labeled as ABC999.\n",
    "sample_input2": "\n1000\n\n",
    "sample_output2": "\nABD\n\nThe 1000-th round of AtCoder Beginner Contest is labeled as ABD001.\n",
    "sample_input3": "\n1481\n\n",
    "sample_output3": "\nABD\n\nThe 1481-th round of AtCoder Beginner Contest is labeled as ABD482.",
    "num_id": 272
  },
  {
    "id": "p03328",
    "score": "200",
    "desc": "\nIn some village, there are 999 towers that are 1,(1+2),(1+2+3),...,(1+2+3+...+999) meters high from west to east, at intervals of 1 meter.\nIt had been snowing for a while before it finally stopped. For some two adjacent towers located 1 meter apart, we measured the lengths of the parts of those towers that are not covered with snow, and the results are a meters for the west tower, and b meters for the east tower.\nAssuming that the depth of snow cover and the altitude are the same everywhere in the village, find the amount of the snow cover.\nAssume also that the depth of the snow cover is always at least 1 meter.\n",
    "constraints": "\n\n1 \\leq a < b < 499500(=1+2+3+...+999)\nAll values in input are integers.\nThere is no input that contradicts the assumption.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na b\n\n",
    "output_desc": "\nIf the depth of the snow cover is x meters, print x as an integer.\n",
    "sample_input1": "\n8 13\n\n",
    "sample_output1": "\n2\n\nThe heights of the two towers are 10 meters and 15 meters, respectively.\nThus, we can see that the depth of the snow cover is 2 meters.\n",
    "sample_input2": "\n54 65\n\n",
    "sample_output2": "\n1\n",
    "num_id": 273
  },
  {
    "id": "p03329",
    "score": "300",
    "desc": "\nTo make it difficult to withdraw money, a certain bank allows its customers to withdraw only one of the following amounts in one operation:\n\n\n1 yen (the currency of Japan)\n\n\n6 yen, 6^2(=36) yen, 6^3(=216) yen, ...\n\n\n9 yen, 9^2(=81) yen, 9^3(=729) yen, ...\n\n\nAt least how many operations are required to withdraw exactly N yen in total?\nIt is not allowed to re-deposit the money you withdrew.\n",
    "constraints": "\n\n1 \\leq N \\leq 100000\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nIf at least x operations are required to withdraw exactly N yen in total, print x.\n",
    "sample_input1": "\n127\n\n",
    "sample_output1": "\n4\n\nBy withdrawing 1 yen, 9 yen, 36(=6^2) yen and 81(=9^2) yen, we can withdraw 127 yen in four operations.\n",
    "sample_input2": "\n3\n\n",
    "sample_output2": "\n3\n\nBy withdrawing 1 yen three times, we can withdraw 3 yen in three operations.\n",
    "sample_input3": "\n44852\n\n",
    "sample_output3": "\n16\n",
    "num_id": 274
  },
  {
    "id": "p03331",
    "score": "200",
    "desc": "\nTakahashi has two positive integers A and B.\nIt is known that A plus B equals N.\nFind the minimum possible value of \"the sum of the digits of A\" plus \"the sum of the digits of B\" (in base 10).\n",
    "constraints": "\n\n2 \u2264 N \u2264 10^5\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the minimum possible value of \"the sum of the digits of A\" plus \"the sum of the digits of B\".\n",
    "sample_input1": "\n15\n\n",
    "sample_output1": "\n6\n\nWhen A=2 and B=13, the sums of their digits are 2 and 4, which minimizes the value in question.\n",
    "sample_input2": "\n100000\n\n",
    "sample_output2": "\n10\n",
    "num_id": 275
  },
  {
    "id": "p03337",
    "score": "100",
    "desc": "\nYou are given two integers A and B.\nFind the largest value among A+B, A-B and A \\times B.\n",
    "constraints": "\n\n-1000 \\leq A,B \\leq 1000\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nPrint the largest value among A+B, A-B and A \\times B.\n",
    "sample_input1": "\n3 1\n\n",
    "sample_output1": "\n4\n\n3+1=4, 3-1=2 and 3 \\times 1=3. The largest among them is 4.\n",
    "sample_input2": "\n4 -2\n\n",
    "sample_output2": "\n6\n\nThe largest is 4 - (-2) = 6.\n",
    "sample_input3": "\n0 0\n\n",
    "sample_output3": "\n0\n",
    "num_id": 276
  },
  {
    "id": "p03338",
    "score": "200",
    "desc": "\nYou are given a string S of length N consisting of lowercase English letters.\nWe will cut this string at one position into two strings X and Y.\nHere, we would like to maximize the number of different letters contained in both X and Y.\nFind the largest possible number of different letters contained in both X and Y when we cut the string at the optimal position.\n",
    "constraints": "\n\n2 \\leq N \\leq 100\n|S| = N\nS consists of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS\n\n",
    "output_desc": "\nPrint the largest possible number of different letters contained in both X and Y.\n",
    "sample_input1": "\n6\naabbca\n\n",
    "sample_output1": "\n2\n\nIf we cut the string between the third and fourth letters into X = aab and Y = bca, the letters contained in both X and Y are a and b.\nThere will never be three or more different letters contained in both X and Y, so the answer is 2.\n",
    "sample_input2": "\n10\naaaaaaaaaa\n\n",
    "sample_output2": "\n1\n\nHowever we divide S, only a will be contained in both X and Y.\n",
    "sample_input3": "\n45\ntgxgdqkyjzhyputjjtllptdfxocrylqfqjynmfbfucbir\n\n",
    "sample_output3": "\n9\n",
    "num_id": 277
  },
  {
    "id": "p03345",
    "score": "300",
    "desc": "\nTakahashi, Nakahashi and Hikuhashi have integers A, B and C, respectively.\nAfter repeating the following operation K times, find the integer Takahashi will get minus the integer Nakahashi will get:\n\nEach of them simultaneously calculate the sum of the integers that the other two people have, then replace his own integer with the result.\n\nHowever, if the absolute value of the answer exceeds 10^{18}, print Unfair instead.\n",
    "constraints": "\n\n1 \\leq A,B,C \\leq 10^9\n0 \\leq K \\leq 10^{18}\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C K\n\n",
    "output_desc": "\nPrint the integer Takahashi will get minus the integer Nakahashi will get, after repeating the following operation K times.\nIf the absolute value of the answer exceeds 10^{18}, print Unfair instead.\n",
    "sample_input1": "\n1 2 3 1\n\n",
    "sample_output1": "\n1\n\nAfter one operation, Takahashi, Nakahashi and Hikuhashi have 5, 4 and 3, respectively. We should print 5-4=1.\n",
    "sample_input2": "\n2 3 2 0\n\n",
    "sample_output2": "\n-1\n\n",
    "sample_input3": "\n1000000000 1000000000 1000000000 1000000000000000000\n\n",
    "sample_output3": "\n0\n",
    "num_id": 278
  },
  {
    "id": "p03351",
    "score": "100",
    "desc": "\nThree people, A, B and C, are trying to communicate using transceivers.\nThey are standing along a number line, and the coordinates of A, B and C are a, b and c (in meters), respectively.\nTwo people can directly communicate when the distance between them is at most d meters.\nDetermine if A and C can communicate, either directly or indirectly.\nHere, A and C can indirectly communicate when A and B can directly communicate and also B and C can directly communicate.\n",
    "constraints": "\n\n1 \u2264 a,b,c \u2264 100\n1 \u2264 d \u2264 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na b c d\n\n",
    "output_desc": "\nIf A and C can communicate, print Yes; if they cannot, print No.\n",
    "sample_input1": "\n4 7 9 3\n\n",
    "sample_output1": "\nYes\n\nA and B can directly communicate, and also B and C can directly communicate, so we should print Yes.\n",
    "sample_input2": "\n100 10 1 2\n\n",
    "sample_output2": "\nNo\n\nThey cannot communicate in this case.\n",
    "sample_input3": "\n10 10 10 1\n\n",
    "sample_output3": "\nYes\n\nThere can be multiple people at the same position.\n",
    "sample_input4": "\n1 100 2 10\n\n",
    "sample_output4": "\nYes\n",
    "num_id": 279
  },
  {
    "id": "p03352",
    "score": "200",
    "desc": "\nYou are given a positive integer X.\nFind the largest perfect power that is at most X.\nHere, a perfect power is an integer that can be represented as b^p, where b is an integer not less than 1 and p is an integer not less than 2.\n",
    "constraints": "\n\n1 \u2264 X \u2264 1000\nX is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX\n\n",
    "output_desc": "\nPrint the largest perfect power that is at most X.\n",
    "sample_input1": "\n10\n\n",
    "sample_output1": "\n9\n\nThere are four perfect powers that are at most 10: 1, 4, 8 and 9.\nWe should print the largest among them, 9.\n",
    "sample_input2": "\n1\n\n",
    "sample_output2": "\n1\n\n",
    "sample_input3": "\n999\n\n",
    "sample_output3": "\n961\n",
    "num_id": 280
  },
  {
    "id": "p03359",
    "score": "100",
    "desc": "\n\nIn AtCoder Kingdom, Gregorian calendar is used, and dates are written in the \"year-month-day\" order, or the \"month-day\" order without the year.\nFor example, May 3, 2018 is written as 2018-5-3, or 5-3 without the year.  \nIn this country, a date is called Takahashi when the month and the day are equal as numbers. For example, 5-5 is Takahashi.\nHow many days from 2018-1-1 through 2018-a-b are Takahashi?\n",
    "constraints": "\n\n\na is an integer between 1 and 12 (inclusive).\nb is an integer between 1 and 31 (inclusive).\n2018-a-b is a valid date in Gregorian calendar.\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\na b\n\n",
    "output_desc": "\n\nPrint the number of days from 2018-1-1 through 2018-a-b that are Takahashi.\n",
    "sample_input1": "\n5 5\n\n",
    "sample_output1": "\n5\n\nThere are five days that are Takahashi: 1-1, 2-2, 3-3, 4-4 and 5-5.\n",
    "sample_input2": "\n2 1\n\n",
    "sample_output2": "\n1\n\nThere is only one day that is Takahashi: 1-1.\n",
    "sample_input3": "\n11 30\n\n",
    "sample_output3": "\n11\n\nThere are eleven days that are Takahashi: 1-1, 2-2, 3-3, 4-4, 5-5, 6-6, 7-7, 8-8, 9-9, 10-10 and 11-11.",
    "num_id": 281
  },
  {
    "id": "p03360",
    "score": "200",
    "desc": "\n\nThere are three positive integers A, B and C written on a blackboard. E869120 performs the following operation K times:\n\nChoose one integer written on the blackboard and let the chosen integer be n. Replace the chosen integer with 2n.\n\nWhat is the largest possible sum of the integers written on the blackboard after K operations?\n",
    "constraints": "\n\n\nA, B and C are integers between 1 and 50 (inclusive).\nK is an integer between 1 and 10 (inclusive).\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nA B C\nK\n\n",
    "output_desc": "\n\nPrint the largest possible sum of the integers written on the blackboard after K operations by E869220.\n",
    "sample_input1": "\n5 3 11\n1\n\n",
    "sample_output1": "\n30\n\nIn this sample, 5, 3, 11 are initially written on the blackboard, and E869120 can perform the operation once.\nThere are three choices:  \n\nDouble 5: The integers written on the board after the operation are 10, 3, 11.\nDouble 3: The integers written on the board after the operation are 5, 6, 11.\nDouble 11: The integers written on the board after the operation are 5, 3, 22.\n\nIf he chooses 3., the sum of the integers written on the board afterwards is 5 + 3 + 22 = 30, which is the largest among 1. through 3.  \n",
    "sample_input2": "\n3 3 4\n2\n\n",
    "sample_output2": "\n22\n\nE869120 can perform the operation twice. The sum of the integers eventually written on the blackboard is maximized as follows:  \n\nFirst, double 4. The integers written on the board are now 3, 3, 8.  \nNext, double 8. The integers written on the board are now 3, 3, 16.  \n\nThen, the sum of the integers eventually written on the blackboard is 3 + 3 + 16 = 22.",
    "num_id": 282
  },
  {
    "id": "p03363",
    "score": "200",
    "desc": "\nWe have an integer sequence A, whose length is N.\nFind the number of the non-empty contiguous subsequences of A whose sums are 0.\nNote that we are counting the ways to take out subsequences.\nThat is, even if the contents of some two subsequences are the same, they are counted individually if they are taken from different positions.\n",
    "constraints": "\n\n1 \\leq N \\leq 2 \\times 10^5\n-10^9 \\leq A_i \\leq 10^9\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nFind the number of the non-empty contiguous subsequences of A whose sum is 0.\n",
    "sample_input1": "\n6\n1 3 -4 2 2 -2\n\n",
    "sample_output1": "\n3\n\nThere are three contiguous subsequences whose sums are 0: (1,3,-4), (-4,2,2) and (2,-2).\n",
    "sample_input2": "\n7\n1 -1 1 -1 1 -1 1\n\n",
    "sample_output2": "\n12\n\nIn this case, some subsequences that have the same contents but are taken from different positions are counted individually.\nFor example, three occurrences of (1, -1) are counted.\n",
    "sample_input3": "\n5\n1 -2 3 -4 5\n\n",
    "sample_output3": "\n0\n\nThere are no contiguous subsequences whose sums are 0.",
    "num_id": 283
  },
  {
    "id": "p03369",
    "score": "100",
    "desc": "\nIn \"Takahashi-ya\", a ramen restaurant, a bowl of ramen costs 700 yen (the currency of Japan), plus 100 yen for each kind of topping (boiled egg, sliced pork, green onions).\nA customer ordered a bowl of ramen and told which toppings to put on his ramen to a clerk. The clerk took a memo of the order as a string S. S is three characters long, and if the first character in S is o, it means the ramen should be topped with boiled egg; if that character is x, it means the ramen should not be topped with boiled egg. Similarly, the second and third characters in S mean the presence or absence of sliced pork and green onions on top of the ramen.\nWrite a program that, when S is given, prints the price of the corresponding bowl of ramen.\n",
    "constraints": "\n\nS is a string of length 3.\nEach character in S is o or x.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the price of the bowl of ramen corresponding to S.\n",
    "sample_input1": "\noxo\n\n",
    "sample_output1": "\n900\n\nThe price of a ramen topped with two kinds of toppings, boiled egg and green onions, is 700 + 100 \\times 2 = 900 yen.\n",
    "sample_input2": "\nooo\n\n",
    "sample_output2": "\n1000\n\nThe price of a ramen topped with all three kinds of toppings is 700 + 100 \\times 3 = 1000 yen.\n",
    "sample_input3": "\nxxx\n\n",
    "sample_output3": "\n700\n\nThe price of a ramen without any toppings is 700 yen.",
    "num_id": 284
  },
  {
    "id": "p03377",
    "score": "100",
    "desc": "\nThere are a total of A + B cats and dogs.\nAmong them, A are known to be cats, but the remaining B are not known to be either cats or dogs.\nDetermine if it is possible that there are exactly X cats among these A + B animals.\n",
    "constraints": "\n\n1 \\leq A \\leq 100\n1 \\leq B \\leq 100\n1 \\leq X \\leq 200\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B X\n\n",
    "output_desc": "\nIf it is possible that there are exactly X cats, print YES; if it is impossible, print NO.\n",
    "sample_input1": "\n3 5 4\n\n",
    "sample_output1": "\nYES\n\nIf there are one cat and four dogs among the B = 5 animals, there are X = 4 cats in total.\n",
    "sample_input2": "\n2 2 6\n\n",
    "sample_output2": "\nNO\n\nEven if all of the B = 2 animals are cats, there are less than X = 6 cats in total.\n",
    "sample_input3": "\n5 3 2\n\n",
    "sample_output3": "\nNO\n\nEven if all of the B = 3 animals are dogs, there are more than X = 2 cats in total.",
    "num_id": 285
  },
  {
    "id": "p03378",
    "score": "200",
    "desc": "\nThere are N + 1 squares arranged in a row, numbered 0, 1, ..., N from left to right.\nInitially, you are in Square X.\nYou can freely travel between adjacent squares. Your goal is to reach Square 0 or Square N.\nHowever, for each i = 1, 2, ..., M, there is a toll gate in Square A_i, and traveling to Square A_i incurs a cost of 1.\nIt is guaranteed that there is no toll gate in Square 0, Square X and Square N.\nFind the minimum cost incurred before reaching the goal.\n",
    "constraints": "\n\n1 \\leq N \\leq 100\n1 \\leq M \\leq 100\n1 \\leq X \\leq N - 1\n1 \\leq A_1 < A_2 < ... < A_M \\leq N\nA_i \\neq X\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN M X\nA_1 A_2 ... A_M\n\n",
    "output_desc": "\nPrint the minimum cost incurred before reaching the goal.\n",
    "sample_input1": "\n5 3 3\n1 2 4\n\n",
    "sample_output1": "\n1\n\nThe optimal solution is as follows:\n\nFirst, travel from Square 3 to Square 4. Here, there is a toll gate in Square 4, so the cost of 1 is incurred.\nThen, travel from Square 4 to Square 5. This time, no cost is incurred.\nNow, we are in Square 5 and we have reached the goal.\n\nIn this case, the total cost incurred is 1.\n",
    "sample_input2": "\n7 3 2\n4 5 6\n\n",
    "sample_output2": "\n0\n\nWe may be able to reach the goal at no cost.\n",
    "sample_input3": "\n10 7 5\n1 2 3 4 6 8 9\n\n",
    "sample_output3": "\n3\n",
    "num_id": 286
  },
  {
    "id": "p03385",
    "score": "100",
    "desc": "\nYou are given a string S of length 3 consisting of a, b and c. Determine if S can be obtained by permuting abc.\n",
    "constraints": "\n\n|S|=3\nS consists of a, b and c.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nIf S can be obtained by permuting abc, print Yes; otherwise, print No.\n",
    "sample_input1": "\nbac\n\n",
    "sample_output1": "\nYes\n\nSwapping the first and second characters in bac results in abc.\n",
    "sample_input2": "\nbab\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\nabc\n\n",
    "sample_output3": "\nYes\n\n",
    "sample_input4": "\naaa\n\n",
    "sample_output4": "\nNo\n",
    "num_id": 287
  },
  {
    "id": "p03386",
    "score": "200",
    "desc": "\nPrint all the integers that satisfies the following in ascending order:\n\nAmong the integers between A and B (inclusive), it is either within the K smallest integers or within the K largest integers.\n\n",
    "constraints": "\n\n1 \\leq A \\leq B \\leq 10^9\n1 \\leq K \\leq 100\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B K\n\n",
    "output_desc": "\nPrint all the integers that satisfies the condition above in ascending order.\n",
    "sample_input1": "\n3 8 2\n\n",
    "sample_output1": "\n3\n4\n7\n8\n\n\n3 is the first smallest integer among the integers between 3 and 8.\n4 is the second smallest integer among the integers between 3 and 8.\n7 is the second largest integer among the integers between 3 and 8.\n8 is the first largest integer among the integers between 3 and 8.\n\n",
    "sample_input2": "\n4 8 3\n\n",
    "sample_output2": "\n4\n5\n6\n7\n8\n\n",
    "sample_input3": "\n2 9 100\n\n",
    "sample_output3": "\n2\n3\n4\n5\n6\n7\n8\n9\n",
    "num_id": 288
  },
  {
    "id": "p03387",
    "score": "300",
    "desc": "\nYou are given three integers A, B and C. Find the minimum number of operations required to make A, B and C all equal by repeatedly performing the following two kinds of operations in any order:\n\nChoose two among A, B and C, then increase both by 1.\nChoose one among A, B and C, then increase it by 2.\n\nIt can be proved that we can always make A, B and C all equal by repeatedly performing these operations.\n",
    "constraints": "\n\n0 \\leq A,B,C \\leq 50\nAll values in input are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nPrint the minimum number of operations required to make A, B and C all equal.\n",
    "sample_input1": "\n2 5 4\n\n",
    "sample_output1": "\n2\n\nWe can make A, B and C all equal by the following operations:\n\nIncrease A and C by 1. Now, A, B, C are 3, 5, 5, respectively.\nIncrease A by 2. Now, A, B, C are 5, 5, 5, respectively.\n\n",
    "sample_input2": "\n2 6 3\n\n",
    "sample_output2": "\n5\n\n",
    "sample_input3": "\n31 41 5\n\n",
    "sample_output3": "\n23\n",
    "num_id": 289
  },
  {
    "id": "p03399",
    "score": "100",
    "desc": "\nYou planned a trip using trains and buses.\nThe train fare will be A yen (the currency of Japan) if you buy ordinary tickets along the way, and B yen if you buy an unlimited ticket.\nSimilarly, the bus fare will be C yen if you buy ordinary tickets along the way, and D yen if you buy an unlimited ticket.\nFind the minimum total fare when the optimal choices are made for trains and buses.\n",
    "constraints": "\n\n1 \\leq A \\leq 1 000\n1 \\leq B \\leq 1 000\n1 \\leq C \\leq 1 000\n1 \\leq D \\leq 1 000\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA\nB\nC\nD\n\n",
    "output_desc": "\nPrint the minimum total fare.\n",
    "sample_input1": "\n600\n300\n220\n420\n\n",
    "sample_output1": "\n520\n\nThe train fare will be 600 yen if you buy ordinary tickets, and 300 yen if you buy an unlimited ticket.\nThus, the optimal choice for trains is to buy an unlimited ticket for 300 yen.\nOn the other hand, the optimal choice for buses is to buy ordinary tickets for 220 yen.\nTherefore, the minimum total fare is 300 + 220 = 520 yen.\n",
    "sample_input2": "\n555\n555\n400\n200\n\n",
    "sample_output2": "\n755\n\n",
    "sample_input3": "\n549\n817\n715\n603\n\n",
    "sample_output3": "\n1152\n",
    "num_id": 290
  },
  {
    "id": "p03400",
    "score": "200",
    "desc": "\nSome number of chocolate pieces were prepared for a training camp.\nThe camp had N participants and lasted for D days.\nThe i-th participant (1 \\leq i \\leq N) ate one chocolate piece on each of the following days in the camp: the 1-st day, the (A_i + 1)-th day, the (2A_i + 1)-th day, and so on.\nAs a result, there were X chocolate pieces remaining at the end of the camp. During the camp, nobody except the participants ate chocolate pieces.\nFind the number of chocolate pieces prepared at the beginning of the camp.\n",
    "constraints": "\n\n1 \\leq N \\leq 100\n1 \\leq D \\leq 100\n1 \\leq X \\leq 100\n1 \\leq A_i \\leq 100 (1 \\leq i \\leq N)\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nD X\nA_1\nA_2\n:\nA_N\n\n",
    "output_desc": "\nFind the number of chocolate pieces prepared at the beginning of the camp.\n",
    "sample_input1": "\n3\n7 1\n2\n5\n10\n\n",
    "sample_output1": "\n8\n\nThe camp has 3 participants and lasts for 7 days.\nEach participant eats chocolate pieces as follows:\n\nThe first participant eats one chocolate piece on Day 1, 3, 5 and 7, for a total of four.\nThe second participant eats one chocolate piece on Day 1 and 6, for a total of two.\nThe third participant eats one chocolate piece only on Day 1, for a total of one.\n\nSince the number of pieces remaining at the end of the camp is one, the number of pieces prepared at the beginning of the camp is 1 + 4 + 2 + 1 = 8.\n",
    "sample_input2": "\n2\n8 20\n1\n10\n\n",
    "sample_output2": "\n29\n\n",
    "sample_input3": "\n5\n30 44\n26\n18\n81\n18\n6\n\n",
    "sample_output3": "\n56\n",
    "num_id": 291
  },
  {
    "id": "p03407",
    "score": "100",
    "desc": "\nAn elementary school student Takahashi has come to a variety store.\nHe has two coins, A-yen and B-yen coins (yen is the currency of Japan), and wants to buy a toy that costs C yen. Can he buy it?\nNote that he lives in Takahashi Kingdom, and may have coins that do not exist in Japan.\n",
    "constraints": "\n\nAll input values are integers.\n1 \\leq A, B \\leq 500\n1 \\leq C \\leq 1000\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nIf Takahashi can buy the toy, print Yes; if he cannot, print No.\n",
    "sample_input1": "\n50 100 120\n\n",
    "sample_output1": "\nYes\n\nHe has 50 + 100 = 150 yen, so he can buy the 120-yen toy.\n",
    "sample_input2": "\n500 100 1000\n\n",
    "sample_output2": "\nNo\n\nHe has 500 + 100 = 600 yen, but he cannot buy the 1000-yen toy.\n",
    "sample_input3": "\n19 123 143\n\n",
    "sample_output3": "\nNo\n\nThere are 19-yen and 123-yen coins in Takahashi Kingdom, which are rather hard to use.\n",
    "sample_input4": "\n19 123 142\n\n",
    "sample_output4": "\nYes\n",
    "num_id": 292
  },
  {
    "id": "p03416",
    "score": "200",
    "desc": "\nFind the number of palindromic numbers among the integers between A and B (inclusive).\nHere, a palindromic number is a positive integer whose string representation in base 10 (without leading zeros) reads the same forward and backward.\n",
    "constraints": "\n\n10000 \\leq A \\leq B \\leq 99999\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nPrint the number of palindromic numbers among the integers between A and B (inclusive).\n",
    "sample_input1": "\n11009 11332\n\n",
    "sample_output1": "\n4\n\nThere are four integers that satisfy the conditions: 11011, 11111, 11211 and 11311.\n",
    "sample_input2": "\n31415 92653\n\n",
    "sample_output2": "\n612\n",
    "num_id": 293
  },
  {
    "id": "p03417",
    "score": "300",
    "desc": "\nThere is a grid with infinitely many rows and columns. In this grid, there is a rectangular region with consecutive N rows and M columns, and a card is placed in each square in this region.\nThe front and back sides of these cards can be distinguished, and initially every card faces up.\nWe will perform the following operation once for each square contains a card:\n\nFor each of the following nine squares, flip the card in it if it exists: the target square itself and the eight squares that shares a corner or a side with the target square.\n\nIt can be proved that, whether each card faces up or down after all the operations does not depend on the order the operations are performed.\nFind the number of cards that face down after all the operations.\n",
    "constraints": "\n\n1 \\leq N,M \\leq 10^9\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN M\n\n",
    "output_desc": "\nPrint the number of cards that face down after all the operations.\n",
    "sample_input1": "\n2 2\n\n",
    "sample_output1": "\n0\n\nWe will flip every card in any of the four operations. Thus, after all the operations, all cards face up.\n",
    "sample_input2": "\n1 7\n\n",
    "sample_output2": "\n5\n\nAfter all the operations, all cards except at both ends face down.\n",
    "sample_input3": "\n314 1592\n\n",
    "sample_output3": "\n496080\n",
    "num_id": 294
  },
  {
    "id": "p03423",
    "score": "100",
    "desc": "\nThere are N students in a school.\nWe will divide these students into some groups, and in each group they will discuss some themes.\nYou think that groups consisting of two or less students cannot have an effective discussion, so you want to have as many groups consisting of three or more students as possible.\nDivide the students so that the number of groups consisting of three or more students is maximized.\n",
    "constraints": "\n\n1 \\leq N \\leq 1000\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nIf you can form at most x groups consisting of three or more students, print x.\n",
    "sample_input1": "\n8\n\n",
    "sample_output1": "\n2\n\nFor example, you can form a group of three students and another of five students.\n",
    "sample_input2": "\n2\n\n",
    "sample_output2": "\n0\n\nSometimes you cannot form any group consisting of three or more students, regardless of how you divide the students.\n",
    "sample_input3": "\n9\n\n",
    "sample_output3": "\n3\n",
    "num_id": 295
  },
  {
    "id": "p03424",
    "score": "200",
    "desc": "\nIn Japan, people make offerings called hina arare, colorful crackers, on March 3.\nWe have a bag that contains N hina arare. (From here, we call them arare.)\nIt is known that the bag either contains arare in three colors: pink, white and green, or contains arare in four colors: pink, white, green and yellow.\nWe have taken out the arare in the bag one by one, and the color of the i-th arare was S_i, where colors are represented as follows - pink: P, white: W, green: G, yellow: Y.\nIf the number of colors of the arare in the bag was three, print Three; if the number of colors was four, print Four.\n",
    "constraints": "\n\n1 \\leq N \\leq 100\nS_i is P, W, G or Y.\nThere always exist i, j and k such that S_i=P, S_j=W and S_k=G.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nS_1 S_2 ... S_N\n\n",
    "output_desc": "\nIf the number of colors of the arare in the bag was three, print Three; if the number of colors was four, print Four.\n",
    "sample_input1": "\n6\nG W Y P Y W\n\n",
    "sample_output1": "\nFour\n\nThe bag contained arare in four colors, so you should print Four.\n",
    "sample_input2": "\n9\nG W W G P W P G G\n\n",
    "sample_output2": "\nThree\n\nThe bag contained arare in three colors, so you should print Three.\n",
    "sample_input3": "\n8\nP Y W G Y W Y Y\n\n",
    "sample_output3": "\nFour\n",
    "num_id": 296
  },
  {
    "id": "p03427",
    "score": "300",
    "desc": "\nFind the maximum possible sum of the digits (in base 10) of a positive integer not greater than N.\n",
    "constraints": "\n\n1\\leq N \\leq 10^{16}\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the maximum possible sum of the digits (in base 10) of a positive integer not greater than N.\n",
    "sample_input1": "\n100\n\n",
    "sample_output1": "\n18\n\nFor example, the sum of the digits in 99 is 18, which turns out to be the maximum value.\n",
    "sample_input2": "\n9995\n\n",
    "sample_output2": "\n35\n\nFor example, the sum of the digits in 9989 is 35, which turns out to be the maximum value.\n",
    "sample_input3": "\n3141592653589793\n\n",
    "sample_output3": "\n137\n",
    "num_id": 297
  },
  {
    "id": "p03433",
    "score": "100",
    "desc": "\n\nE869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.\n",
    "constraints": "\n\n\nN is an integer between 1 and 10000 (inclusive).\nA is an integer between 0 and 1000 (inclusive).\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:\nN\nA\n\n",
    "output_desc": "\n\nIf E869120 can pay exactly N yen using only his 1-yen and 500-yen coins, print Yes; otherwise, print No.\n",
    "sample_input1": "\n2018\n218\n\n",
    "sample_output1": "\nYes\n\nWe can pay 2018 yen with four 500-yen coins and 18 1-yen coins, so the answer is Yes.\n",
    "sample_input2": "\n2763\n0\n\n",
    "sample_output2": "\nNo\n\nWhen we have no 1-yen coins, we can only pay a multiple of 500 yen using only 500-yen coins. Since 2763 is not a multiple of 500, we cannot pay this amount.\n",
    "sample_input3": "\n37\n514\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 298
  },
  {
    "id": "p03434",
    "score": "200",
    "desc": "\n\nWe have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.\n",
    "constraints": "\n\n\nN is an integer between 1 and 100 (inclusive).\na_i \\ (1 \\leq i \\leq N) is an integer between 1 and 100 (inclusive).\n\n",
    "input_desc": "\n\nInput is given from Standard Input in the following format:  \nN\na_1 a_2 a_3 ... a_N\n\n",
    "output_desc": "\n\nPrint Alice's score minus Bob's score when both players take the optimal strategy to maximize their scores.\n",
    "sample_input1": "\n2\n3 1\n\n",
    "sample_output1": "\n2\n\nFirst, Alice will take the card with 3. Then, Bob will take the card with 1.\nThe difference of their scores will be 3 - 1 = 2.\n",
    "sample_input2": "\n3\n2 7 4\n\n",
    "sample_output2": "\n5\n\nFirst, Alice will take the card with 7. Then, Bob will take the card with 4. Lastly, Alice will take the card with 2. The difference of their scores will be 7 - 4 + 2 = 5. The difference of their scores will be 3 - 1 = 2.\n",
    "sample_input3": "\n4\n20 18 2 18\n\n",
    "sample_output3": "\n18\n",
    "num_id": 299
  },
  {
    "id": "p03437",
    "score": "100",
    "desc": "\nYou are given positive integers X and Y.\nIf there exists a positive integer not greater than 10^{18} that is a multiple of X but not a multiple of Y, choose one such integer and print it.\nIf it does not exist, print -1.\n",
    "constraints": "\n\n1 \u2264 X,Y \u2264 10^9\nX and Y are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX Y\n\n",
    "output_desc": "\nPrint a positive integer not greater than 10^{18} that is a multiple of X but not a multiple of Y, or print -1 if it does not exist.\n",
    "sample_input1": "\n8 6\n\n",
    "sample_output1": "\n16\n\nFor example, 16 is a multiple of 8 but not a multiple of 6.\n",
    "sample_input2": "\n3 3\n\n",
    "sample_output2": "\n-1\n\nA multiple of 3 is a multiple of 3.",
    "num_id": 300
  },
  {
    "id": "p03438",
    "score": "300",
    "desc": "\nYou are given two integer sequences of length N: a_1,a_2,..,a_N and b_1,b_2,..,b_N.\nDetermine if we can repeat the following operation zero or more times so that the sequences a and b become equal.\nOperation: Choose two integers i and j (possibly the same) between 1 and N (inclusive), then perform the following two actions simultaneously:\n\nAdd 2 to a_i.\nAdd 1 to b_j.\n\n",
    "constraints": "\n\n1 \u2264 N \u2264 10 000\n0 \u2264 a_i,b_i \u2264 10^9 (1 \u2264 i \u2264 N)\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\na_1 a_2 .. a_N\nb_1 b_2 .. b_N\n\n",
    "output_desc": "\nIf we can repeat the operation zero or more times so that the sequences a and b become equal, print Yes; otherwise, print No.\n",
    "sample_input1": "\n3\n1 2 3\n5 2 2\n\n",
    "sample_output1": "\nYes\n\nFor example, we can perform three operations as follows to do our job:\n\nFirst operation: i=1 and j=2. Now we have a = \\{3,2,3\\}, b = \\{5,3,2\\}.\nSecond operation: i=1 and j=2. Now we have a = \\{5,2,3\\}, b = \\{5,4,2\\}.\nThird operation: i=2 and j=3. Now we have a = \\{5,4,3\\}, b = \\{5,4,3\\}.\n\n",
    "sample_input2": "\n5\n3 1 4 1 5\n2 7 1 8 2\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\n5\n2 7 1 8 2\n3 1 4 1 5\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 301
  },
  {
    "id": "p03447",
    "score": "100",
    "desc": "\nYou went shopping to buy cakes and donuts with X yen (the currency of Japan).\nFirst, you bought one cake for A yen at a cake shop.\nThen, you bought as many donuts as possible for B yen each, at a donut shop.\nHow much do you have left after shopping?\n",
    "constraints": "\n\n1 \\leq A, B \\leq 1 000\nA + B \\leq X \\leq 10 000\nX, A and B are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX\nA\nB\n\n",
    "output_desc": "\nPrint the amount you have left after shopping.\n",
    "sample_input1": "\n1234\n150\n100\n\n",
    "sample_output1": "\n84\n\nYou have 1234 - 150 = 1084 yen left after buying a cake.\nWith this amount, you can buy 10 donuts, after which you have 84 yen left.\n",
    "sample_input2": "\n1000\n108\n108\n\n",
    "sample_output2": "\n28\n\n",
    "sample_input3": "\n579\n123\n456\n\n",
    "sample_output3": "\n0\n\n",
    "sample_input4": "\n7477\n549\n593\n\n",
    "sample_output4": "\n405\n",
    "num_id": 302
  },
  {
    "id": "p03448",
    "score": "200",
    "desc": "\nYou have A 500-yen coins, B 100-yen coins and C 50-yen coins (yen is the currency of Japan).\nIn how many ways can we select some of these coins so that they are X yen in total?\nCoins of the same kind cannot be distinguished. Two ways to select coins are distinguished when, for some kind of coin, the numbers of that coin are different.\n",
    "constraints": "\n\n0 \\leq A, B, C \\leq 50\nA + B + C \\geq 1\n50 \\leq X \\leq 20 000\nA, B and C are integers.\nX is a multiple of 50.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA\nB\nC\nX\n\n",
    "output_desc": "\nPrint the number of ways to select coins.\n",
    "sample_input1": "\n2\n2\n2\n100\n\n",
    "sample_output1": "\n2\n\nThere are two ways to satisfy the condition:\n\nSelect zero 500-yen coins, one 100-yen coin and zero 50-yen coins.\nSelect zero 500-yen coins, zero 100-yen coins and two 50-yen coins.\n\n",
    "sample_input2": "\n5\n1\n0\n150\n\n",
    "sample_output2": "\n0\n\nNote that the total must be exactly X yen.\n",
    "sample_input3": "\n30\n40\n50\n6000\n\n",
    "sample_output3": "\n213\n",
    "num_id": 303
  },
  {
    "id": "p03455",
    "score": "100",
    "desc": "\nAtCoDeer the deer found two positive integers, a and b.\nDetermine whether the product of a and b is even or odd.\n",
    "constraints": "\n\n1 \u2264 a,b \u2264 10000\na and b are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na b\n\n",
    "output_desc": "\nIf the product is odd, print Odd; if it is even, print Even.\n",
    "sample_input1": "\n3 4\n\n",
    "sample_output1": "\nEven\n\nAs 3 \u00d7 4 = 12 is even, print Even.\n",
    "sample_input2": "\n1 21\n\n",
    "sample_output2": "\nOdd\n\nAs 1 \u00d7 21 = 21 is odd, print Odd.",
    "num_id": 304
  },
  {
    "id": "p03456",
    "score": "200",
    "desc": "\nAtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.\n",
    "constraints": "\n\n1 \u2264 a,b \u2264 100\na and b are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na b\n\n",
    "output_desc": "\nIf the concatenation of a and b in this order is a square number, print Yes; otherwise, print No.\n",
    "sample_input1": "\n1 21\n\n",
    "sample_output1": "\nYes\n\nAs 121 = 11 \u00d7 11, it is a square number.\n",
    "sample_input2": "\n100 100\n\n",
    "sample_output2": "\nNo\n\n100100 is not a square number.\n",
    "sample_input3": "\n12 10\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 305
  },
  {
    "id": "p03469",
    "score": "100",
    "desc": "\nOn some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy/mm/dd format. For example, January 23, 2018 should be written as 2018/01/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.\n",
    "constraints": "\n\nS is a string of length 10.\nThe first eight characters in S are 2017/01/.\nThe last two characters in S are digits and represent an integer between 1 and 31 (inclusive).\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nReplace the first four characters in S with 2018 and print it.\n",
    "sample_input1": "\n2017/01/07\n\n",
    "sample_output1": "\n2018/01/07\n\n",
    "sample_input2": "\n2017/01/31\n\n",
    "sample_output2": "\n2018/01/31\n",
    "num_id": 306
  },
  {
    "id": "p03471",
    "score": "300",
    "desc": "\nThe commonly used bills in Japan are 10000-yen, 5000-yen and 1000-yen bills. Below, the word \"bill\" refers to only these.\nAccording to Aohashi, he received an otoshidama (New Year money gift) envelope from his grandfather that contained N bills for a total of Y yen, but he may be lying. Determine whether such a situation is possible, and if it is, find a possible set of bills contained in the envelope. Assume that his grandfather is rich enough, and the envelope was large enough.\n",
    "constraints": "\n\n1 \u2264 N \u2264 2000\n1000 \u2264 Y \u2264 2 \u00d7 10^7\nN is an integer.\nY is a multiple of 1000.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN Y\n\n",
    "output_desc": "\nIf the total value of N bills cannot be Y yen, print -1 -1 -1.\nIf the total value of N bills can be Y yen, let one such set of bills be \"x 10000-yen bills, y 5000-yen bills and z 1000-yen bills\", and print x, y, z with spaces in between. If there are multiple possibilities, any of them may be printed.\n",
    "sample_input1": "\n9 45000\n\n",
    "sample_output1": "\n4 0 5\n\nIf the envelope contained 4 10000-yen bills and 5 1000-yen bills, he had 9 bills and 45000 yen in total. It is also possible that the envelope contained 9 5000-yen bills, so the output 0 9 0 is also correct.\n",
    "sample_input2": "\n20 196000\n\n",
    "sample_output2": "\n-1 -1 -1\n\nWhen the envelope contained 20 bills in total, the total value would be 200000 yen if all the bills were 10000-yen bills, and would be at most 195000 yen otherwise, so it would never be 196000 yen.\n",
    "sample_input3": "\n1000 1234000\n\n",
    "sample_output3": "\n14 27 959\n\nThere are also many other possibilities.\n",
    "sample_input4": "\n2000 20000000\n\n",
    "sample_output4": "\n2000 0 0\n",
    "num_id": 307
  },
  {
    "id": "p03474",
    "score": "200",
    "desc": "\nThe postal code in Atcoder Kingdom is A+B+1 characters long, its (A+1)-th character is a hyphen -, and the other characters are digits from 0 through 9.\nYou are given a string S. Determine whether it follows the postal code format in Atcoder Kingdom.\n",
    "constraints": "\n\n1\u2264A,B\u22645\n|S|=A+B+1\nS consists of - and digits from 0 through 9.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\nS\n\n",
    "output_desc": "\nPrint Yes if S follows the postal code format in AtCoder Kingdom; print No otherwise.\n",
    "sample_input1": "\n3 4\n269-6650\n\n",
    "sample_output1": "\nYes\n\nThe (A+1)-th character of S is -, and the other characters are digits from 0 through 9, so it follows the format.\n",
    "sample_input2": "\n1 1\n---\n\n",
    "sample_output2": "\nNo\n\nS contains unnecessary -s other than the (A+1)-th character, so it does not follow the format.\n",
    "sample_input3": "\n1 2\n7444\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 308
  },
  {
    "id": "p03477",
    "score": "100",
    "desc": "\nA balance scale tips to the left if L>R, where L is the total weight of the masses on the left pan and R is the total weight of the masses on the right pan. Similarly, it balances if L=R, and tips to the right if L<R.\nTakahashi placed a mass of weight A and a mass of weight B on the left pan of a balance scale, and placed a mass of weight C and a mass of weight D on the right pan.\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n",
    "constraints": "\n\n1\\leq A,B,C,D \\leq 10\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C D\n\n",
    "output_desc": "\nPrint Left if the balance scale tips to the left; print Balanced if it balances; print Right if it tips to the right.\n",
    "sample_input1": "\n3 8 7 1\n\n",
    "sample_output1": "\nLeft\n\nThe total weight of the masses on the left pan is 11, and the total weight of the masses on the right pan is 8. Since 11>8, we should print Left.\n",
    "sample_input2": "\n3 4 5 2\n\n",
    "sample_output2": "\nBalanced\n\nThe total weight of the masses on the left pan is 7, and the total weight of the masses on the right pan is 7. Since 7=7, we should print Balanced.\n",
    "sample_input3": "\n1 7 6 4\n\n",
    "sample_output3": "\nRight\n\nThe total weight of the masses on the left pan is 8, and the total weight of the masses on the right pan is 10. Since 8<10, we should print Right.",
    "num_id": 309
  },
  {
    "id": "p03478",
    "score": "200",
    "desc": "\nFind the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n",
    "constraints": "\n\n1 \\leq N \\leq 10^4\n1 \\leq A \\leq B \\leq 36\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN A B\n\n",
    "output_desc": "\nPrint the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n",
    "sample_input1": "\n20 2 5\n\n",
    "sample_output1": "\n84\n\nAmong the integers not greater than 20, the ones whose sums of digits are between 2 and 5, are: 2,3,4,5,11,12,13,14 and 20. We should print the sum of these, 84.\n",
    "sample_input2": "\n10 1 2\n\n",
    "sample_output2": "\n13\n\n",
    "sample_input3": "\n100 4 16\n\n",
    "sample_output3": "\n4554\n",
    "num_id": 310
  },
  {
    "id": "p03479",
    "score": "300",
    "desc": "\nAs a token of his gratitude, Takahashi has decided to give his mother an integer sequence.\nThe sequence A needs to satisfy the conditions below:\n\nA consists of integers between X and Y (inclusive).\nFor each 1\\leq i \\leq |A|-1, A_{i+1} is a multiple of A_i and strictly greater than A_i.\n\nFind the maximum possible length of the sequence.\n",
    "constraints": "\n\n1 \\leq X \\leq Y \\leq 10^{18}\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX Y\n\n",
    "output_desc": "\nPrint the maximum possible length of the sequence.\n",
    "sample_input1": "\n3 20\n\n",
    "sample_output1": "\n3\n\nThe sequence 3,6,18 satisfies the conditions.\n",
    "sample_input2": "\n25 100\n\n",
    "sample_output2": "\n3\n\n",
    "sample_input3": "\n314159265 358979323846264338\n\n",
    "sample_output3": "\n31\n",
    "num_id": 311
  },
  {
    "id": "p03481",
    "score": "300",
    "desc": "\nAs a token of his gratitude, Takahashi has decided to give his mother an integer sequence.\nThe sequence A needs to satisfy the conditions below:\n\nA consists of integers between X and Y (inclusive).\nFor each 1\\leq i \\leq |A|-1, A_{i+1} is a multiple of A_i and strictly greater than A_i.\n\nFind the maximum possible length of the sequence.\n",
    "constraints": "\n\n1 \\leq X \\leq Y \\leq 10^{18}\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX Y\n\n",
    "output_desc": "\nPrint the maximum possible length of the sequence.\n",
    "sample_input1": "\n3 20\n\n",
    "sample_output1": "\n3\n\nThe sequence 3,6,18 satisfies the conditions.\n",
    "sample_input2": "\n25 100\n\n",
    "sample_output2": "\n3\n\n",
    "sample_input3": "\n314159265 358979323846264338\n\n",
    "sample_output3": "\n31\n",
    "num_id": 312
  },
  {
    "id": "p03485",
    "score": "100",
    "desc": "\nYou are given two positive integers a and b.\nLet x be the average of a and b.\nPrint x rounded up to the nearest integer.\n",
    "constraints": "\n\na and b are integers.\n1 \\leq a, b \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na b\n\n",
    "output_desc": "\nPrint x rounded up to the nearest integer.\n",
    "sample_input1": "\n1 3\n\n",
    "sample_output1": "\n2\n\nThe average of 1 and 3 is 2.0, and it will be rounded up to the nearest integer, 2.\n",
    "sample_input2": "\n7 4\n\n",
    "sample_output2": "\n6\n\nThe average of 7 and 4 is 5.5, and it will be rounded up to the nearest integer, 6.\n",
    "sample_input3": "\n5 5\n\n",
    "sample_output3": "\n5\n",
    "num_id": 313
  },
  {
    "id": "p03486",
    "score": "200",
    "desc": "\nYou are given strings s and t, consisting of lowercase English letters.\nYou will create a string s' by freely rearranging the characters in s.\nYou will also create a string t' by freely rearranging the characters in t.\nDetermine whether it is possible to satisfy s' < t' for the lexicographic order.\n",
    "constraints": "\n\nThe lengths of s and t are between 1 and 100 (inclusive).\ns and t consists of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\ns\nt\n\n",
    "output_desc": "\nIf it is possible to satisfy s' < t', print Yes; if it is not, print No.\n",
    "sample_input1": "\nyx\naxy\n\n",
    "sample_output1": "\nYes\n\nWe can, for example, rearrange yx into xy and axy into yxa. Then, xy < yxa.\n",
    "sample_input2": "\nratcode\natlas\n\n",
    "sample_output2": "\nYes\n\nWe can, for example, rearrange ratcode into acdeort and atlas into tslaa. Then, acdeort < tslaa.\n",
    "sample_input3": "\ncd\nabc\n\n",
    "sample_output3": "\nNo\n\nNo matter how we rearrange cd and abc, we cannot achieve our objective.\n",
    "sample_input4": "\nw\nww\n\n",
    "sample_output4": "\nYes\n\n",
    "sample_input5": "\nzzz\nzzz\n\n",
    "sample_output5": "\nNo\n",
    "num_id": 314
  },
  {
    "id": "p03493",
    "score": "100",
    "desc": "\nSnuke has a grid consisting of three squares numbered 1, 2 and 3.\nIn each square, either 0 or 1 is written. The number written in Square i is s_i.\nSnuke will place a marble on each square that says 1.\nFind the number of squares on which Snuke will place a marble.\n",
    "constraints": "\n\nEach of s_1, s_2 and s_3 is either 1 or 0.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\ns_{1}s_{2}s_{3}\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n101\n\n",
    "sample_output1": "\n2\n\n\nA marble will be placed on Square 1 and 3.\n\n",
    "sample_input2": "\n000\n\n",
    "sample_output2": "\n0\n\n\nNo marble will be placed on any square.\n",
    "num_id": 315
  },
  {
    "id": "p03494",
    "score": "200",
    "desc": "\nThere are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.\n",
    "constraints": "\n\n1 \\leq N \\leq 200\n1 \\leq A_i \\leq 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the maximum possible number of operations that Snuke can perform.\n",
    "sample_input1": "\n3\n8 12 40\n\n",
    "sample_output1": "\n2\n\nInitially, [8, 12, 40] are written on the blackboard.\nSince all those integers are even, Snuke can perform the operation.\nAfter the operation is performed once, [4, 6, 20] are written on the blackboard.\nSince all those integers are again even, he can perform the operation.\nAfter the operation is performed twice, [2, 3, 10] are written on the blackboard.\nNow, there is an odd number 3 on the blackboard, so he cannot perform the operation any more.\nThus, Snuke can perform the operation at most twice.\n",
    "sample_input2": "\n4\n5 6 8 10\n\n",
    "sample_output2": "\n0\n\nSince there is an odd number 5 on the blackboard already in the beginning, Snuke cannot perform the operation at all.\n",
    "sample_input3": "\n6\n382253568 723152896 37802240 379425024 404894720 471526144\n\n",
    "sample_output3": "\n8\n",
    "num_id": 316
  },
  {
    "id": "p03495",
    "score": "300",
    "desc": "\nTakahashi has N balls. Initially, an integer A_i is written on the i-th ball.\nHe would like to rewrite the integer on some balls so that there are at most K different integers written on the N balls.\nFind the minimum number of balls that Takahashi needs to rewrite the integers on them.\n",
    "constraints": "\n\n1 \\leq K \\leq N \\leq 200000\n1 \\leq A_i \\leq N\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the minimum number of balls that Takahashi needs to rewrite the integers on them.\n",
    "sample_input1": "\n5 2\n1 1 2 2 5\n\n",
    "sample_output1": "\n1\n\nFor example, if we rewrite the integer on the fifth ball to 2, there are two different integers written on the balls: 1 and 2.\nOn the other hand, it is not possible to rewrite the integers on zero balls so that there are at most two different integers written on the balls, so we should print 1.\n",
    "sample_input2": "\n4 4\n1 1 2 2\n\n",
    "sample_output2": "\n0\n\nAlready in the beginning, there are two different integers written on the balls, so we do not need to rewrite anything.\n",
    "sample_input3": "\n10 3\n5 1 3 2 4 1 1 2 3 4\n\n",
    "sample_output3": "\n3\n",
    "num_id": 317
  },
  {
    "id": "p03502",
    "score": "200",
    "desc": "\nAn integer X is called a Harshad number if X is divisible by f(X), where f(X) is the sum of the digits in X when written in base 10.\nGiven an integer N, determine whether it is a Harshad number.\n",
    "constraints": "\n\n1?N?10^8\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint Yes if N is a Harshad number; print No otherwise.\n",
    "sample_input1": "\n12\n\n",
    "sample_output1": "\nYes\n\nf(12)=1+2=3. Since 12 is divisible by 3, 12 is a Harshad number.\n",
    "sample_input2": "\n57\n\n",
    "sample_output2": "\nNo\n\nf(57)=5+7=12. Since 57 is not divisible by 12, 12 is not a Harshad number.\n",
    "sample_input3": "\n148\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 318
  },
  {
    "id": "p03523",
    "score": "300",
    "desc": "\nYou are given a string S.\nTakahashi can insert the character A at any position in this string any number of times.\nCan he change S into AKIHABARA?\n",
    "constraints": "\n\n1 \\leq |S| \\leq 50\nS consists of uppercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nIf it is possible to change S into AKIHABARA, print YES; otherwise, print NO.\n",
    "sample_input1": "\nKIHBR\n\n",
    "sample_output1": "\nYES\n\nInsert one A at each of the four positions: the beginning, immediately after H, immediately after B and the end.\n",
    "sample_input2": "\nAKIBAHARA\n\n",
    "sample_output2": "\nNO\n\nThe correct spell is AKIHABARA.\n",
    "sample_input3": "\nAAKIAHBAARA\n\n",
    "sample_output3": "\nNO\n",
    "num_id": 319
  },
  {
    "id": "p03543",
    "score": "100",
    "desc": "\nWe call a 4-digit integer with three or more consecutive same digits, such as 1118, good.\nYou are given a 4-digit integer N. Answer the question: Is N good?\n",
    "constraints": "\n\n1000 \u2264 N \u2264 9999\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nIf N is good, print Yes; otherwise, print No.\n",
    "sample_input1": "\n1118\n\n",
    "sample_output1": "\nYes\n\nN is good, since it contains three consecutive 1.\n",
    "sample_input2": "\n7777\n\n",
    "sample_output2": "\nYes\n\nAn integer is also good when all the digits are the same.\n",
    "sample_input3": "\n1234\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 320
  },
  {
    "id": "p03544",
    "score": "200",
    "desc": "\nIt is November 18 now in Japan. By the way, 11 and 18 are adjacent Lucas numbers.\nYou are given an integer N. Find the N-th Lucas number.\nHere, the i-th Lucas number L_i is defined as follows:\n\nL_0=2\nL_1=1\nL_i=L_{i-1}+L_{i-2} (i\u22652)\n\n",
    "constraints": "\n\n1\u2264N\u226486\nIt is guaranteed that the answer is less than 10^{18}.\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the N-th Lucas number.\n",
    "sample_input1": "\n5\n\n",
    "sample_output1": "\n11\n\n\nL_0=2\nL_1=1\nL_2=L_0+L_1=3\nL_3=L_1+L_2=4\nL_4=L_2+L_3=7\nL_5=L_3+L_4=11\n\nThus, the 5-th Lucas number is 11.\n",
    "sample_input2": "\n86\n\n",
    "sample_output2": "\n939587134549734843\n",
    "num_id": 321
  },
  {
    "id": "p03545",
    "score": "300",
    "desc": "\nSitting in a station waiting room, Joisino is gazing at her train ticket.\nThe ticket is numbered with four digits A, B, C and D in this order, each between 0 and 9 (inclusive).\nIn the formula A op1 B op2 C op3 D = 7, replace each of the symbols op1, op2 and op3 with + or - so that the formula holds.\nThe given input guarantees that there is a solution. If there are multiple solutions, any of them will be accepted.\n",
    "constraints": "\n\n0\u2264A,B,C,D\u22649\nAll input values are integers.\nIt is guaranteed that there is a solution.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nABCD\n\n",
    "output_desc": "\nPrint the formula you made, including the part =7.\nUse the signs + and -.\nDo not print a space between a digit and a sign.\n",
    "sample_input1": "\n1222\n\n",
    "sample_output1": "\n1+2+2+2=7\n\nThis is the only valid solution.\n",
    "sample_input2": "\n0290\n\n",
    "sample_output2": "\n0-2+9+0=7\n\n0 - 2 + 9 - 0 = 7 is also a valid solution.\n",
    "sample_input3": "\n3242\n\n",
    "sample_output3": "\n3+2+4-2=7\n",
    "num_id": 322
  },
  {
    "id": "p03547",
    "score": "100",
    "desc": "\nIn programming, hexadecimal notation is often used.\nIn hexadecimal notation, besides the ten digits 0, 1, ..., 9, the six letters A, B, C, D, E and F are used to represent the values 10, 11, 12, 13, 14 and 15, respectively.\nIn this problem, you are given two letters X and Y. Each X and Y is A, B, C, D, E or F.\nWhen X and Y are seen as hexadecimal numbers, which is larger?\n",
    "constraints": "\n\nEach X and Y is A, B, C, D, E or F.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX Y\n\n",
    "output_desc": "\nIf X is smaller, print <; if Y is smaller, print >; if they are equal, print =.\n",
    "sample_input1": "\nA B\n\n",
    "sample_output1": "\n<\n\n10 < 11.\n",
    "sample_input2": "\nE C\n\n",
    "sample_output2": "\n>\n\n14 > 12.\n",
    "sample_input3": "\nF F\n\n",
    "sample_output3": "\n=\n\n15 = 15.",
    "num_id": 323
  },
  {
    "id": "p03548",
    "score": "200",
    "desc": "\nWe have a long seat of width X centimeters.\nThere are many people who wants to sit here. A person sitting on the seat will always occupy an interval of length Y centimeters.\nWe would like to seat as many people as possible, but they are all very shy, and there must be a gap of length at least Z centimeters between two people, and between the end of the seat and a person.\nAt most how many people can sit on the seat?\n",
    "constraints": "\n\nAll input values are integers.\n1 \\leq X, Y, Z \\leq 10^5\nY+2Z \\leq X\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX Y Z\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n13 3 1\n\n",
    "sample_output1": "\n3\n\nThere is just enough room for three, as shown below:\n\n\nFigure\n\n",
    "sample_input2": "\n12 3 1\n\n",
    "sample_output2": "\n2\n\n",
    "sample_input3": "\n100000 1 1\n\n",
    "sample_output3": "\n49999\n\n",
    "sample_input4": "\n64146 123 456\n\n",
    "sample_output4": "\n110\n\n",
    "sample_input5": "\n64145 123 456\n\n",
    "sample_output5": "\n109\n",
    "num_id": 324
  },
  {
    "id": "p03555",
    "score": "100",
    "desc": "\nYou are given a grid with 2 rows and 3 columns of squares.\nThe color of the square at the i-th row and j-th column is represented by the character C_{ij}.\nWrite a program that prints YES if this grid remains the same when rotated 180 degrees, and prints NO otherwise.\n",
    "constraints": "\n\nC_{i,j}(1 \\leq i \\leq 2, 1 \\leq j \\leq 3) is a lowercase English letter.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nC_{11}C_{12}C_{13}\nC_{21}C_{22}C_{23}\n\n",
    "output_desc": "\nPrint YES if this grid remains the same when rotated 180 degrees; print NO otherwise.\n",
    "sample_input1": "\npot\ntop\n\n",
    "sample_output1": "\nYES\n\nThis grid remains the same when rotated 180 degrees.\n",
    "sample_input2": "\ntab\nbet\n\n",
    "sample_output2": "\nNO\n\nThis grid does not remain the same when rotated 180 degrees.\n",
    "sample_input3": "\neye\neel\n\n",
    "sample_output3": "\nNO\n",
    "num_id": 325
  },
  {
    "id": "p03556",
    "score": "200",
    "desc": "\nFind the largest square number not exceeding N. Here, a square number is an integer that can be represented as the square of an integer.\n",
    "constraints": "\n\n1 \\leq N \\leq 10^9\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the largest square number not exceeding N.\n",
    "sample_input1": "\n10\n\n",
    "sample_output1": "\n9\n\n10 is not square, but 9 = 3 \u00d7 3 is. Thus, we print 9.\n",
    "sample_input2": "\n81\n\n",
    "sample_output2": "\n81\n\n",
    "sample_input3": "\n271828182\n\n",
    "sample_output3": "\n271821169\n",
    "num_id": 326
  },
  {
    "id": "p03563",
    "score": "100",
    "desc": "\nTakahashi is a user of a site that hosts programming contests.\nWhen a user competes in a contest, the rating of the user (not necessarily an integer) changes according to the performance of the user, as follows:  \n\nLet the current rating of the user be a.\nSuppose that the performance of the user in the contest is b.\nThen, the new rating of the user will be the avarage of a and b.\n\nFor example, if a user with rating 1 competes in a contest and gives performance 1000, his/her new rating will be 500.5, the average of 1 and 1000.\nTakahashi's current rating is R, and he wants his rating to be exactly G after the next contest.\nFind the performance required to achieve it.  \n",
    "constraints": "\n\n0 \\leq R, G \\leq 4500\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nR\nG\n\n",
    "output_desc": "\nPrint the performance required to achieve the objective.\n",
    "sample_input1": "\n2002\n2017\n\n",
    "sample_output1": "\n2032\n\nTakahashi's current rating is 2002.\nIf his performance in the contest is 2032, his rating will be the average of 2002 and 2032, which is equal to the desired rating, 2017.\n",
    "sample_input2": "\n4500\n0\n\n",
    "sample_output2": "\n-4500\n\nAlthough the current and desired ratings are between 0 and 4500, the performance of a user can be below 0.",
    "num_id": 327
  },
  {
    "id": "p03564",
    "score": "200",
    "desc": "\nSquare1001 has seen an electric bulletin board displaying the integer 1.\nHe can perform the following operations A and B to change this value:\n\nOperation A: The displayed value is doubled.\nOperation B: The displayed value increases by K.\n\nSquare1001 needs to perform these operations N times in total.\nFind the minimum possible value displayed in the board after N operations.\n",
    "constraints": "\n\n1 \\leq N, K \\leq 10\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nK\n\n",
    "output_desc": "\nPrint the minimum possible value displayed in the board after N operations.\n",
    "sample_input1": "\n4\n3\n\n",
    "sample_output1": "\n10\n\nThe value will be minimized when the operations are performed in the following order: A, A, B, B.\nIn this case, the value will change as follows: 1 \u2192 2 \u2192 4 \u2192 7 \u2192 10.  \n",
    "sample_input2": "\n10\n10\n\n",
    "sample_output2": "\n76\n\nThe value will be minimized when the operations are performed in the following order: A, A, A, A, B, B, B, B, B, B.\nIn this case, the value will change as follows: 1 \u2192 2 \u2192 4 \u2192 8 \u2192 16 \u2192 26 \u2192 36 \u2192 46 \u2192 56 \u2192 66 \u2192 76.  \nBy the way, this contest is AtCoder Beginner Contest 076.",
    "num_id": 328
  },
  {
    "id": "p03573",
    "score": "100",
    "desc": "\nYou are given three integers, A, B and C.\nAmong them, two are the same, but the remaining one is different from the rest.\nFor example, when A=5,B=7,C=5, A and C are the same, but B is different.\nFind the one that is different from the rest among the given three integers.  \n",
    "constraints": "\n\n-100 \\leq A,B,C \\leq 100 \nA, B and C are integers.\nThe input satisfies the condition in the statement.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:  \nA B C\n\n",
    "output_desc": "\nAmong A, B and C, print the integer that is different from the rest.\n",
    "sample_input1": "\n5 7 5\n\n",
    "sample_output1": "\n7\n\nThis is the same case as the one in the statement.\n",
    "sample_input2": "\n1 1 7\n\n",
    "sample_output2": "\n7\n\nIn this case, C is the one we seek.\n",
    "sample_input3": "\n-100 100 100\n\n",
    "sample_output3": "\n-100\n",
    "num_id": 329
  },
  {
    "id": "p03583",
    "score": "300",
    "desc": "\nYou are given an integer N.\nFind a triple of positive integers h, n and w such that 4/N = 1/h + 1/n + 1/w.\nIf there are multiple solutions, any of them will be accepted.\n",
    "constraints": "\n\nIt is guaranteed that, for the given integer N, there exists a solution such that h,n,w \\leq 3500.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint a triple of positive integers h, n and w that satisfies the condition, in the following format:\nh n w\n\n",
    "sample_input1": "\n2\n\n",
    "sample_output1": "\n1 2 2\n\n4/2 = 1/1 + 1/2 + 1/2.\n",
    "sample_input2": "\n3485\n\n",
    "sample_output2": "\n872 1012974 1539173474040\n\nIt is allowed to use an integer exceeding 3500 in a solution.\n",
    "sample_input3": "\n4664\n\n",
    "sample_output3": "\n3498 3498 3498\n",
    "num_id": 330
  },
  {
    "id": "p03592",
    "score": "200",
    "desc": "\nWe have a grid with N rows and M columns of squares. Initially, all the squares are white.\nThere is a button attached to each row and each column.\nWhen a button attached to a row is pressed, the colors of all the squares in that row are inverted; that is, white squares become black and vice versa.\nWhen a button attached to a column is pressed, the colors of all the squares in that column are inverted.\nTakahashi can freely press the buttons any number of times. Determine whether he can have exactly K black squares in the grid.\n",
    "constraints": "\n\n1 \\leq N,M \\leq 1000\n0 \\leq K \\leq NM\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN M K\n\n",
    "output_desc": "\nIf Takahashi can have exactly K black squares in the grid, print Yes; otherwise, print No.\n",
    "sample_input1": "\n2 2 2\n\n",
    "sample_output1": "\nYes\n\nPress the buttons in the order of the first row, the first column.\n",
    "sample_input2": "\n2 2 1\n\n",
    "sample_output2": "\nNo\n\n",
    "sample_input3": "\n3 5 8\n\n",
    "sample_output3": "\nYes\n\nPress the buttons in the order of the first column, third column, second row, fifth column.\n",
    "sample_input4": "\n7 9 20\n\n",
    "sample_output4": "\nNo\n",
    "num_id": 331
  },
  {
    "id": "p03605",
    "score": "100",
    "desc": "\nIt is September 9 in Japan now.\nYou are given a two-digit integer N. Answer the question: Is 9 contained in the decimal notation of N?\n",
    "constraints": "\n\n10\u2264N\u226499\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nIf 9 is contained in the decimal notation of N, print Yes; if not, print No.\n",
    "sample_input1": "\n29\n\n",
    "sample_output1": "\nYes\n\nThe one's digit of 29 is 9.\n",
    "sample_input2": "\n72\n\n",
    "sample_output2": "\nNo\n\n72 does not contain 9.\n",
    "sample_input3": "\n91\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 332
  },
  {
    "id": "p03607",
    "score": "300",
    "desc": "\nYou are playing the following game with Joisino.\n\nInitially, you have a blank sheet of paper.\nJoisino announces a number. If that number is written on the sheet, erase the number from the sheet; if not, write the number on the sheet. This process is repeated N times.\nThen, you are asked a question: How many numbers are written on the sheet now?\n\nThe numbers announced by Joisino are given as A_1, ... ,A_N in the order she announces them. How many numbers will be written on the sheet at the end of the game?\n",
    "constraints": "\n\n1\u2264N\u2264100000\n1\u2264A_i\u22641000000000(=10^9)\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1\n:\nA_N\n\n",
    "output_desc": "\nPrint how many numbers will be written on the sheet at the end of the game.\n",
    "sample_input1": "\n3\n6\n2\n6\n\n",
    "sample_output1": "\n1\n\nThe game proceeds as follows:\n\n\n6 is not written on the sheet, so write 6.\n\n\n2 is not written on the sheet, so write 2.\n\n\n6 is written on the sheet, so erase 6.\n\n\nThus, the sheet contains only 2 in the end. The answer is 1.\n",
    "sample_input2": "\n4\n2\n5\n5\n2\n\n",
    "sample_output2": "\n0\n\nIt is possible that no number is written on the sheet in the end.\n",
    "sample_input3": "\n6\n12\n22\n16\n22\n18\n12\n\n",
    "sample_output3": "\n2\n",
    "num_id": 333
  },
  {
    "id": "p03609",
    "score": "100",
    "desc": "\nWe have a sandglass that runs for X seconds. The sand drops from the upper bulb at a rate of 1 gram per second. That is, the upper bulb initially contains X grams of sand.\nHow many grams of sand will the upper bulb contains after t seconds?\n",
    "constraints": "\n\n1\u2264X\u226410^9\n1\u2264t\u226410^9\nX and t are integers.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nX t\n\n",
    "output_desc": "\nPrint the number of sand in the upper bulb after t second.\n",
    "sample_input1": "\n100 17\n\n",
    "sample_output1": "\n83\n\n17 out of the initial 100 grams of sand will be consumed, resulting in 83 grams.\n",
    "sample_input2": "\n48 58\n\n",
    "sample_output2": "\n0\n\nAll 48 grams of sand will be gone, resulting in 0 grams.\n",
    "sample_input3": "\n1000000000 1000000000\n\n",
    "sample_output3": "\n0\n",
    "num_id": 334
  },
  {
    "id": "p03610",
    "score": "200",
    "desc": "\nYou are given a string s consisting of lowercase English letters. Extract all the characters in the odd-indexed positions and print the string obtained by concatenating them. Here, the leftmost character is assigned the index 1.\n",
    "constraints": "\n\nEach character in s is a lowercase English letter.\n1\u2264|s|\u226410^5\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\ns\n\n",
    "output_desc": "\nPrint the string obtained by concatenating all the characters in the odd-numbered positions.\n",
    "sample_input1": "\natcoder\n\n",
    "sample_output1": "\nacdr\n\nExtract the first character a, the third character c, the fifth character d and the seventh character r to obtain acdr.\n",
    "sample_input2": "\naaaa\n\n",
    "sample_output2": "\naa\n\n",
    "sample_input3": "\nz\n\n",
    "sample_output3": "\nz\n\n",
    "sample_input4": "\nfukuokayamaguchi\n\n",
    "sample_output4": "\nfkoaaauh\n",
    "num_id": 335
  },
  {
    "id": "p03611",
    "score": "300",
    "desc": "\nYou are given an integer sequence of length N, a_1,a_2,...,a_N.\nFor each 1\u2264i\u2264N, you have three choices: add 1 to a_i, subtract 1 from a_i or do nothing.\nAfter these operations, you select an integer X and count the number of i such that a_i=X.\nMaximize this count by making optimal choices.\n",
    "constraints": "\n\n1\u2264N\u226410^5\n0\u2264a_i<10^5 (1\u2264i\u2264N)\na_i is an integer.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\na_1 a_2 .. a_N\n\n",
    "output_desc": "\nPrint the maximum possible number of i such that a_i=X.\n",
    "sample_input1": "\n7\n3 1 4 1 5 9 2\n\n",
    "sample_output1": "\n4\n\nFor example, turn the sequence into 2,2,3,2,6,9,2 and select X=2 to obtain 4, the maximum possible count.\n",
    "sample_input2": "\n10\n0 1 2 3 4 5 6 7 8 9\n\n",
    "sample_output2": "\n3\n\n",
    "sample_input3": "\n1\n99999\n\n",
    "sample_output3": "\n1\n",
    "num_id": 336
  },
  {
    "id": "p03617",
    "score": "300",
    "desc": "\nYou've come to your favorite store Infinitesco to buy some ice tea.\nThe store sells ice tea in bottles of different volumes at different costs.\nSpecifically, a 0.25-liter bottle costs Q yen, a 0.5-liter bottle costs H yen, a 1-liter bottle costs S yen, and a 2-liter bottle costs D yen.\nThe store has an infinite supply of bottles of each type.\nYou want to buy exactly N liters of ice tea. How many yen do you have to spend?\n",
    "constraints": "\n\n1 \\leq Q, H, S, D \\leq 10^8\n1 \\leq N \\leq 10^9\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nQ H S D\nN\n\n",
    "output_desc": "\nPrint the smallest number of yen you have to spend to buy exactly N liters of ice tea.\n",
    "sample_input1": "\n20 30 70 90\n3\n\n",
    "sample_output1": "\n150\n\nBuy one 2-liter bottle and two 0.5-liter bottles. You'll get 3 liters for 90 + 30 + 30 = 150 yen.\n",
    "sample_input2": "\n10000 1000 100 10\n1\n\n",
    "sample_output2": "\n100\n\nEven though a 2-liter bottle costs just 10 yen, you need only 1 liter.\nThus, you have to buy a 1-liter bottle for 100 yen.\n",
    "sample_input3": "\n10 100 1000 10000\n1\n\n",
    "sample_output3": "\n40\n\nNow it's better to buy four 0.25-liter bottles for 10 + 10 + 10 + 10 = 40 yen.\n",
    "sample_input4": "\n12345678 87654321 12345678 87654321\n123456789\n\n",
    "sample_output4": "\n1524157763907942\n",
    "num_id": 337
  },
  {
    "id": "p03623",
    "score": "100",
    "desc": "\nSnuke lives at position x on a number line.\nOn this line, there are two stores A and B, respectively at position a and b, that offer food for delivery.\nSnuke decided to get food delivery from the closer of stores A and B.\nFind out which store is closer to Snuke's residence.\nHere, the distance between two points s and t on a number line is represented by |s-t|.\n",
    "constraints": "\n\n1 \\leq x \\leq 1000\n1 \\leq a \\leq 1000\n1 \\leq b \\leq 1000\nx, a and b are pairwise distinct.\nThe distances between Snuke's residence and stores A and B are different.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nx a b\n\n",
    "output_desc": "\nIf store A is closer, print A; if store B is closer, print B.\n",
    "sample_input1": "\n5 2 7\n\n",
    "sample_output1": "\nB\n\nThe distances between Snuke's residence and stores A and B are 3 and 2, respectively.\nSince store B is closer, print B.\n",
    "sample_input2": "\n1 999 1000\n\n",
    "sample_output2": "\nA\n",
    "num_id": 338
  },
  {
    "id": "p03624",
    "score": "200",
    "desc": "\nYou are given a string S consisting of lowercase English letters.\nFind the lexicographically (alphabetically) smallest lowercase English letter that does not occur in S.\nIf every lowercase English letter occurs in S, print None instead.\n",
    "constraints": "\n\n1 \\leq |S| \\leq 10^5 (|S| is the length of string S.)\nS consists of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the lexicographically smallest lowercase English letter that does not occur in S.\nIf every lowercase English letter occurs in S, print None instead.\n",
    "sample_input1": "\natcoderregularcontest\n\n",
    "sample_output1": "\nb\n\nThe string atcoderregularcontest contains a, but does not contain b.\n",
    "sample_input2": "\nabcdefghijklmnopqrstuvwxyz\n\n",
    "sample_output2": "\nNone\n\nThis string contains every lowercase English letter.\n",
    "sample_input3": "\nfajsonlslfepbjtsaayxbymeskptcumtwrmkkinjxnnucagfrg\n\n",
    "sample_output3": "\nd\n",
    "num_id": 339
  },
  {
    "id": "p03625",
    "score": "300",
    "desc": "\nWe have N sticks with negligible thickness.\nThe length of the i-th stick is A_i.\nSnuke wants to select four different sticks from these sticks and form a rectangle (including a square), using the sticks as its sides.\nFind the maximum possible area of the rectangle.\n",
    "constraints": "\n\n4 \\leq N \\leq 10^5\n1 \\leq A_i \\leq 10^9\nA_i is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the maximum possible area of the rectangle.\nIf no rectangle can be formed, print 0.\n",
    "sample_input1": "\n6\n3 1 2 4 2 1\n\n",
    "sample_output1": "\n2\n\n1 \\times 2 rectangle can be formed.\n",
    "sample_input2": "\n4\n1 2 3 4\n\n",
    "sample_output2": "\n0\n\nNo rectangle can be formed.\n",
    "sample_input3": "\n10\n3 3 3 3 4 4 4 5 5 5\n\n",
    "sample_output3": "\n20\n",
    "num_id": 340
  },
  {
    "id": "p03627",
    "score": "300",
    "desc": "\nWe have N sticks with negligible thickness.\nThe length of the i-th stick is A_i.\nSnuke wants to select four different sticks from these sticks and form a rectangle (including a square), using the sticks as its sides.\nFind the maximum possible area of the rectangle.\n",
    "constraints": "\n\n4 \\leq N \\leq 10^5\n1 \\leq A_i \\leq 10^9\nA_i is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the maximum possible area of the rectangle.\nIf no rectangle can be formed, print 0.\n",
    "sample_input1": "\n6\n3 1 2 4 2 1\n\n",
    "sample_output1": "\n2\n\n1 \\times 2 rectangle can be formed.\n",
    "sample_input2": "\n4\n1 2 3 4\n\n",
    "sample_output2": "\n0\n\nNo rectangle can be formed.\n",
    "sample_input3": "\n10\n3 3 3 3 4 4 4 5 5 5\n\n",
    "sample_output3": "\n20\n",
    "num_id": 341
  },
  {
    "id": "p03631",
    "score": "100",
    "desc": "\nYou are given a three-digit positive integer N.\nDetermine whether N is a palindromic number.\nHere, a palindromic number is an integer that reads the same backward as forward in decimal notation.\n",
    "constraints": "\n\n100\u2264N\u2264999\nN is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:  \nN\n\n",
    "output_desc": "\nIf N is a palindromic number, print Yes; otherwise, print No.\n",
    "sample_input1": "\n575\n\n",
    "sample_output1": "\nYes\n\nN=575 is also 575 when read backward, so it is a palindromic number. You should print Yes.\n",
    "sample_input2": "\n123\n\n",
    "sample_output2": "\nNo\n\nN=123 becomes 321 when read backward, so it is not a palindromic number. You should print No.\n",
    "sample_input3": "\n812\n\n",
    "sample_output3": "\nNo\n",
    "num_id": 342
  },
  {
    "id": "p03632",
    "score": "200",
    "desc": "\nAlice and Bob are controlling a robot. They each have one switch that controls the robot.\nAlice started holding down her button A second after the start-up of the robot, and released her button B second after the start-up.\nBob started holding down his button C second after the start-up, and released his button D second after the start-up.\nFor how many seconds both Alice and Bob were holding down their buttons?\n",
    "constraints": "\n\n0\u2264A<B\u2264100\n0\u2264C<D\u2264100\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:  \nA B C D\n\n",
    "output_desc": "\nPrint the length of the duration (in seconds) in which both Alice and Bob were holding down their buttons.\n",
    "sample_input1": "\n0 75 25 100\n\n",
    "sample_output1": "\n50\n\nAlice started holding down her button 0 second after the start-up of the robot, and released her button 75 second after the start-up.\nBob started holding down his button 25 second after the start-up, and released his button 100 second after the start-up.\nTherefore, the time when both of them were holding down their buttons, is the 50 seconds from 25 seconds after the start-up to 75 seconds after the start-up.\n",
    "sample_input2": "\n0 33 66 99\n\n",
    "sample_output2": "\n0\n\nAlice and Bob were not holding their buttons at the same time, so the answer is zero seconds.\n",
    "sample_input3": "\n10 90 20 80\n\n",
    "sample_output3": "\n60\n",
    "num_id": 343
  },
  {
    "id": "p03633",
    "score": "300",
    "desc": "\nWe have N clocks. The hand of the i-th clock (1\u2264i\u2264N) rotates through 360\u00b0 in exactly T_i seconds.\nInitially, the hand of every clock stands still, pointing directly upward.\nNow, Dolphin starts all the clocks simultaneously.\nIn how many seconds will the hand of every clock point directly upward again?\n",
    "constraints": "\n\n1\u2264N\u2264100 \n1\u2264T_i\u226410^{18} \nAll input values are integers.  \nThe correct answer is at most 10^{18} seconds.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:  \nN\nT_1\n:  \nT_N\n\n",
    "output_desc": "\nPrint the number of seconds after which the hand of every clock point directly upward again.\n",
    "sample_input1": "\n2\n2\n3\n\n",
    "sample_output1": "\n6\n\nWe have two clocks. The time when the hand of each clock points upward is as follows:\n\nClock 1: 2, 4, 6, ... seconds after the beginning\nClock 2: 3, 6, 9, ... seconds after the beginning\n\nTherefore, it takes 6 seconds until the hands of both clocks point directly upward.\n",
    "sample_input2": "\n5\n2\n5\n10\n1000000000000000000\n1000000000000000000\n\n",
    "sample_output2": "\n1000000000000000000\n",
    "num_id": 344
  },
  {
    "id": "p03635",
    "score": "100",
    "desc": "\nIn K-city, there are n streets running east-west, and m streets running north-south. Each street running east-west and each street running north-south cross each other. We will call the smallest area that is surrounded by four streets a block. How many blocks there are in K-city?\n",
    "constraints": "\n\n2 \u2264 n, m \u2264 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nn m\n\n",
    "output_desc": "\nPrint the number of blocks in K-city.\n",
    "sample_input1": "\n3 4\n\n",
    "sample_output1": "\n6\n\nThere are six blocks, as shown below:\n\n\n\n",
    "sample_input2": "\n2 2\n\n",
    "sample_output2": "\n1\n\nThere are one block, as shown below:\n\n\n",
    "num_id": 345
  },
  {
    "id": "p03636",
    "score": "200",
    "desc": "\nThe word internationalization is sometimes abbreviated to i18n.\nThis comes from the fact that there are 18 letters between the first i and the last n.\nYou are given a string s of length at least 3 consisting of lowercase English letters.\nAbbreviate s in the same way.\n",
    "constraints": "\n\n3 \u2264 |s| \u2264 100 (|s| denotes the length of s.)\ns consists of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\ns\n\n",
    "output_desc": "\nPrint the abbreviation of s.\n",
    "sample_input1": "\ninternationalization\n\n",
    "sample_output1": "\ni18n\n\n",
    "sample_input2": "\nsmiles\n\n",
    "sample_output2": "\ns4s\n\n",
    "sample_input3": "\nxyz\n\n",
    "sample_output3": "\nx1z\n",
    "num_id": 346
  },
  {
    "id": "p03644",
    "score": "200",
    "desc": "\nTakahashi loves numbers divisible by 2.\nYou are given a positive integer N. Among the integers between 1 and N (inclusive), find the one that can be divisible by 2 for the most number of times. The solution is always unique.\nHere, the number of times an integer can be divisible by 2, is how many times the integer can be divided by 2 without remainder.\nFor example,\n\n6 can be divided by 2 once: 6 -> 3.\n8 can be divided by 2 three times: 8 -> 4 -> 2 -> 1.\n3 can be divided by 2 zero times.\n\n",
    "constraints": "\n\n1 \u2264 N \u2264 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n7\n\n",
    "sample_output1": "\n4\n\n4 can be divided by 2 twice, which is the most number of times among 1, 2, ..., 7.\n",
    "sample_input2": "\n32\n\n",
    "sample_output2": "\n32\n\n",
    "sample_input3": "\n1\n\n",
    "sample_output3": "\n1\n\n",
    "sample_input4": "\n100\n\n",
    "sample_output4": "\n64\n",
    "num_id": 347
  },
  {
    "id": "p03657",
    "score": "100",
    "desc": "\nSnuke is giving cookies to his three goats.\nHe has two cookie tins. One contains A cookies, and the other contains B cookies. He can thus give A cookies, B cookies or A+B cookies to his goats (he cannot open the tins).\nYour task is to determine whether Snuke can give cookies to his three goats so that each of them can have the same number of cookies.\n",
    "constraints": "\n\n1 \\leq A,B \\leq 100\nBoth A and B are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nIf it is possible to give cookies so that each of the three goats can have the same number of cookies, print Possible; otherwise, print Impossible.\n",
    "sample_input1": "\n4 5\n\n",
    "sample_output1": "\nPossible\n\nIf Snuke gives nine cookies, each of the three goats can have three cookies.\n",
    "sample_input2": "\n1 1\n\n",
    "sample_output2": "\nImpossible\n\nSince there are only two cookies, the three goats cannot have the same number of cookies no matter what Snuke gives to them.",
    "num_id": 348
  },
  {
    "id": "p03658",
    "score": "200",
    "desc": "\nSnuke has N sticks.\nThe length of the i-th stick is l_i.\nSnuke is making a snake toy by joining K of the sticks together.\nThe length of the toy is represented by the sum of the individual sticks that compose it.\nFind the maximum possible length of the toy.\n",
    "constraints": "\n\n1 \\leq K \\leq N \\leq 50\n1 \\leq l_i \\leq 50\nl_i is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN K\nl_1 l_2 l_3 ... l_{N}\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n5 3\n1 2 3 4 5\n\n",
    "sample_output1": "\n12\n\nYou can make a toy of length 12 by joining the sticks of lengths 3, 4 and 5, which is the maximum possible length.\n",
    "sample_input2": "\n15 14\n50 26 27 21 41 7 42 35 7 5 5 36 39 1 45\n\n",
    "sample_output2": "\n386\n",
    "num_id": 349
  },
  {
    "id": "p03659",
    "score": "300",
    "desc": "\nSnuke and Raccoon have a heap of N cards. The i-th card from the top has the integer a_i written on it.\nThey will share these cards.\nFirst, Snuke will take some number of cards from the top of the heap, then Raccoon will take all the remaining cards.\nHere, both Snuke and Raccoon have to take at least one card.\nLet the sum of the integers on Snuke's cards and Raccoon's cards be x and y, respectively.\nThey would like to minimize |x-y|.\nFind the minimum possible value of |x-y|.\n",
    "constraints": "\n\n2 \\leq N \\leq 2 \\times 10^5\n-10^{9} \\leq a_i \\leq 10^{9}\na_i is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\na_1 a_2 ... a_{N}\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n6\n1 2 3 4 5 6\n\n",
    "sample_output1": "\n1\n\nIf Snuke takes four cards from the top, and Raccoon takes the remaining two cards, x=10, y=11, and thus |x-y|=1. This is the minimum possible value.\n",
    "sample_input2": "\n2\n10 -10\n\n",
    "sample_output2": "\n20\n\nSnuke can only take one card from the top, and Raccoon can only take the remaining one card. In this case, x=10, y=-10, and thus |x-y|=20.",
    "num_id": 350
  },
  {
    "id": "p03665",
    "score": "200",
    "desc": "\nThere are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?\n",
    "constraints": "\n\n1 \\leq N \\leq 50\nP = 0 or 1\n1 \\leq A_i \\leq 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN P\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the number of ways to select bags so that the total number of biscuits inside is congruent to P modulo 2.\n",
    "sample_input1": "\n2 0\n1 3\n\n",
    "sample_output1": "\n2\n\nThere are two ways to select bags so that the total number of biscuits inside is congruent to 0 modulo 2:\n\nSelect neither bag. The total number of biscuits is 0.\nSelect both bags. The total number of biscuits is 4.\n\n",
    "sample_input2": "\n1 1\n50\n\n",
    "sample_output2": "\n0\n\n",
    "sample_input3": "\n3 0\n1 1 1\n\n",
    "sample_output3": "\n4\n\nTwo bags are distinguished even if they contain the same number of biscuits.\n",
    "sample_input4": "\n45 1\n17 55 85 55 74 20 90 67 40 70 39 89 91 50 16 24 14 43 24 66 25 9 89 71 41 16 53 13 61 15 85 72 62 67 42 26 36 66 4 87 59 91 4 25 26\n\n",
    "sample_output4": "\n17592186044416\n",
    "num_id": 351
  },
  {
    "id": "p03671",
    "score": "100",
    "desc": "\nSnuke is buying a bicycle.\nThe bicycle of his choice does not come with a bell, so he has to buy one separately.\nHe has very high awareness of safety, and decides to buy two bells, one for each hand.\nThe store sells three kinds of bells for the price of a, b and c yen (the currency of Japan), respectively.\nFind the minimum total price of two different bells.\n",
    "constraints": "\n\n1 \\leq a,b,c \\leq 10000\na, b and c are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na b c\n\n",
    "output_desc": "\nPrint the minimum total price of two different bells.\n",
    "sample_input1": "\n700 600 780\n\n",
    "sample_output1": "\n1300\n\n\nBuying a 700-yen bell and a 600-yen bell costs 1300 yen.\nBuying a 700-yen bell and a 780-yen bell costs 1480 yen.\nBuying a 600-yen bell and a 780-yen bell costs 1380 yen.\n\nThe minimum among these is 1300 yen.\n",
    "sample_input2": "\n10000 10000 10000\n\n",
    "sample_output2": "\n20000\n\nBuying any two bells costs 20000 yen.",
    "num_id": 352
  },
  {
    "id": "p03672",
    "score": "200",
    "desc": "\nWe will call a string that can be obtained by concatenating two equal strings an even string.\nFor example, xyzxyz and aaaaaa are even, while ababab and xyzxy are not.\nYou are given an even string S consisting of lowercase English letters.\nFind the length of the longest even string that can be obtained by deleting one or more characters from the end of S.\nIt is guaranteed that such a non-empty string exists for a given input.\n",
    "constraints": "\n\n2 \\leq |S| \\leq 200\nS is an even string consisting of lowercase English letters.\nThere exists a non-empty even string that can be obtained by deleting one or more characters from the end of S.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the length of the longest even string that can be obtained.\n",
    "sample_input1": "\nabaababaab\n\n",
    "sample_output1": "\n6\n\n\nabaababaab itself is even, but we need to delete at least one character.\nabaababaa is not even.\nabaababa is not even.\nabaabab is not even.\nabaaba is even. Thus, we should print its length, 6.\n\n",
    "sample_input2": "\nxxxx\n\n",
    "sample_output2": "\n2\n\n\nxxx is not even.\nxx is even.\n\n",
    "sample_input3": "\nabcabcabcabc\n\n",
    "sample_output3": "\n6\n\nThe longest even string that can be obtained is abcabc, whose length is 6.\n",
    "sample_input4": "\nakasakaakasakasakaakas\n\n",
    "sample_output4": "\n14\n\nThe longest even string that can be obtained is akasakaakasaka, whose length is 14.",
    "num_id": 353
  },
  {
    "id": "p03673",
    "score": "300",
    "desc": "\nYou are given an integer sequence of length n, a_1, ..., a_n.\nLet us consider performing the following n operations on an empty sequence b.\nThe i-th operation is as follows:\n\nAppend a_i to the end of b.\nReverse the order of the elements in b.\n\nFind the sequence b obtained after these n operations.\n",
    "constraints": "\n\n1 \\leq n \\leq 2\\times 10^5\n0 \\leq a_i \\leq 10^9\nn and a_i are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nn\na_1 a_2 ... a_n\n\n",
    "output_desc": "\nPrint n integers in a line with spaces in between.\nThe i-th integer should be b_i.\n",
    "sample_input1": "\n4\n1 2 3 4\n\n",
    "sample_output1": "\n4 2 1 3\n\n\nAfter step 1 of the first operation, b becomes: 1.\nAfter step 2 of the first operation, b becomes: 1.\nAfter step 1 of the second operation, b becomes: 1, 2.\nAfter step 2 of the second operation, b becomes: 2, 1.\nAfter step 1 of the third operation, b becomes: 2, 1, 3.\nAfter step 2 of the third operation, b becomes: 3, 1, 2.\nAfter step 1 of the fourth operation, b becomes: 3, 1, 2, 4.\nAfter step 2 of the fourth operation, b becomes: 4, 2, 1, 3.\n\nThus, the answer is 4 2 1 3.\n",
    "sample_input2": "\n3\n1 2 3\n\n",
    "sample_output2": "\n3 1 2\n\nAs shown above in Sample Output 1, b becomes 3, 1, 2 after step 2 of the third operation. Thus, the answer is 3 1 2.\n",
    "sample_input3": "\n1\n1000000000\n\n",
    "sample_output3": "\n1000000000\n\n",
    "sample_input4": "\n6\n0 6 7 6 7 0\n\n",
    "sample_output4": "\n0 6 6 0 7 7\n",
    "num_id": 354
  },
  {
    "id": "p03679",
    "score": "100",
    "desc": "\nTakahashi has a strong stomach. He never gets a stomachache from eating something whose \"best-by\" date is at most X days earlier.\nHe gets a stomachache if the \"best-by\" date of the food is X+1 or more days earlier, though.\nOther than that, he finds the food delicious if he eats it not later than the \"best-by\" date. Otherwise, he does not find it delicious.\nTakahashi bought some food A days before the \"best-by\" date, and ate it B days after he bought it.\nWrite a program that outputs delicious if he found it delicious, safe if he did not found it delicious but did not get a stomachache either, and dangerous if he got a stomachache.\n",
    "constraints": "\n\n1 \u2264 X,A,B \u2264 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nX A B\n\n",
    "output_desc": "\nPrint delicious if Takahashi found the food delicious; print safe if he neither found it delicious nor got a stomachache; print dangerous if he got a stomachache.\n",
    "sample_input1": "\n4 3 6\n\n",
    "sample_output1": "\nsafe\n\nHe ate the food three days after the \"best-by\" date. It was not delicious or harmful for him.\n",
    "sample_input2": "\n6 5 1\n\n",
    "sample_output2": "\ndelicious\n\nHe ate the food by the \"best-by\" date. It was delicious for him.\n",
    "sample_input3": "\n3 7 12\n\n",
    "sample_output3": "\ndangerous\n\nHe ate the food five days after the \"best-by\" date. It was harmful for him.",
    "num_id": 355
  },
  {
    "id": "p03693",
    "score": "100",
    "desc": "\nAtCoDeer has three cards, one red, one green and one blue.\nAn integer between 1 and 9 (inclusive) is written on each card: r on the red card, g on the green card and b on the blue card.\nWe will arrange the cards in the order red, green and blue from left to right, and read them as a three-digit integer.\nIs this integer a multiple of 4?  \n",
    "constraints": "\n\n1 \u2264 r, g, b \u2264 9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nr g b\n\n",
    "output_desc": "\nIf the three-digit integer is a multiple of 4, print YES (case-sensitive); otherwise, print NO.\n",
    "sample_input1": "\n4 3 2\n\n",
    "sample_output1": "\nYES\n\n432 is a multiple of 4, and thus YES should be printed.\n",
    "sample_input2": "\n2 3 4\n\n",
    "sample_output2": "\nNO\n\n234 is not a multiple of 4, and thus NO should be printed.",
    "num_id": 356
  },
  {
    "id": "p03697",
    "score": "100",
    "desc": "\nYou are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.\n",
    "constraints": "\n\nA and B are integers.\n1 \u2264 A, B \u2264 9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nIf A + B is 10 or greater, print the string error (case-sensitive); otherwise, print the value of A + B.\n",
    "sample_input1": "\n6 3\n\n",
    "sample_output1": "\n9\n\n",
    "sample_input2": "\n6 4\n\n",
    "sample_output2": "\nerror\n",
    "num_id": 357
  },
  {
    "id": "p03698",
    "score": "200",
    "desc": "\nYou are given a string S consisting of lowercase English letters. Determine whether all the characters in S are different.\n",
    "constraints": "\n\n2 \u2264 |S| \u2264 26, where |S| denotes the length of S.\nS consists of lowercase English letters.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nIf all the characters in S are different, print yes (case-sensitive); otherwise, print no.\n",
    "sample_input1": "\nuncopyrightable\n\n",
    "sample_output1": "\nyes\n\n",
    "sample_input2": "\ndifferent\n\n",
    "sample_output2": "\nno\n\n",
    "sample_input3": "\nno\n\n",
    "sample_output3": "\nyes\n",
    "num_id": 358
  },
  {
    "id": "p03699",
    "score": "300",
    "desc": "\nYou are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?\n",
    "constraints": "\n\nAll input values are integers.\n1 \u2264 N \u2264 100\n1 \u2264 s_i \u2264 100\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\ns_1\ns_2\n:\ns_N\n\n",
    "output_desc": "\nPrint the maximum value that can be displayed as your grade.\n",
    "sample_input1": "\n3\n5\n10\n15\n\n",
    "sample_output1": "\n25\n\nYour grade will be 25 if the 10-point and 15-point questions are answered correctly and the 5-point question is not, and this grade will be displayed correctly. Your grade will become 30 if the 5-point question is also answered correctly, but this grade will be incorrectly displayed as 0.\n",
    "sample_input2": "\n3\n10\n10\n15\n\n",
    "sample_output2": "\n35\n\nYour grade will be 35 if all the questions are answered correctly, and this grade will be displayed correctly.\n",
    "sample_input3": "\n3\n10\n20\n30\n\n",
    "sample_output3": "\n0\n\nRegardless of whether each question is answered correctly or not, your grade will be a multiple of 10 and displayed as 0.",
    "num_id": 359
  },
  {
    "id": "p03705",
    "score": "200",
    "desc": "\nSnuke has N integers. Among them, the smallest is A, and the largest is B.\nWe are interested in the sum of those N integers. How many different possible sums there are?\n",
    "constraints": "\n\n1 \u2264 N,A,B \u2264 10^9\nA and B are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN A B\n\n",
    "output_desc": "\nPrint the number of the different possible sums.\n",
    "sample_input1": "\n4 4 6\n\n",
    "sample_output1": "\n5\n\nThere are five possible sums: 18=4+4+4+6, 19=4+4+5+6, 20=4+5+5+6, 21=4+5+6+6 and 22=4+6+6+6.\n",
    "sample_input2": "\n5 4 3\n\n",
    "sample_output2": "\n0\n\n",
    "sample_input3": "\n1 7 10\n\n",
    "sample_output3": "\n0\n\n",
    "sample_input4": "\n1 3 3\n\n",
    "sample_output4": "\n1\n",
    "num_id": 360
  },
  {
    "id": "p03711",
    "score": "100",
    "desc": "\nBased on some criterion, Snuke divided the integers from 1 through 12 into three groups as shown in the figure below.\nGiven two integers x and y (1 \u2264 x < y \u2264 12), determine whether they belong to the same group.\n\n\n\n",
    "constraints": "\n\nx and y are integers.\n1 \u2264 x < y \u2264 12\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nx y\n\n",
    "output_desc": "\nIf x and y belong to the same group, print Yes; otherwise, print No.\n",
    "sample_input1": "\n1 3\n\n",
    "sample_output1": "\nYes\n\n",
    "sample_input2": "\n2 4\n\n",
    "sample_output2": "\nNo\n",
    "num_id": 361
  },
  {
    "id": "p03712",
    "score": "200",
    "desc": "\nYou are given a image with a height of H pixels and a width of W pixels.\nEach pixel is represented by a lowercase English letter.\nThe pixel at the i-th row from the top and j-th column from the left is a_{ij}.\nPut a box around this image and output the result. The box should consist of # and have a thickness of 1.\n",
    "constraints": "\n\n1 \u2264 H, W \u2264 100\na_{ij} is a lowercase English letter.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nH W\na_{11} ... a_{1W}\n:\na_{H1} ... a_{HW}\n\n",
    "output_desc": "\nPrint the image surrounded by a box that consists of # and has a thickness of 1.\n",
    "sample_input1": "\n2 3\nabc\narc\n\n",
    "sample_output1": "\n#####\n#abc#\n#arc#\n#####\n\n",
    "sample_input2": "\n1 1\nz\n\n",
    "sample_output2": "\n###\n#z#\n###\n",
    "num_id": 362
  },
  {
    "id": "p03719",
    "score": "100",
    "desc": "\nYou are given three integers A, B and C.\nDetermine whether C is not less than A and not greater than B.\n",
    "constraints": "\n\n-100\u2264A,B,C\u2264100 \nA, B and C are all integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:  \nA B C\n\n",
    "output_desc": "\nIf the condition is satisfied, print Yes; otherwise, print No.\n",
    "sample_input1": "\n1 3 2\n\n",
    "sample_output1": "\nYes\n\nC=2 is not less than A=1 and not greater than B=3, and thus the output should be Yes.\n",
    "sample_input2": "\n6 5 4\n\n",
    "sample_output2": "\nNo\n\nC=4 is less than A=6, and thus the output should be No.\n",
    "sample_input3": "\n2 2 2\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 363
  },
  {
    "id": "p03720",
    "score": "200",
    "desc": "\nThere are N cities and M roads.\nThe i-th road (1\u2264i\u2264M) connects two cities a_i and b_i (1\u2264a_i,b_i\u2264N) bidirectionally.\nThere may be more than one road that connects the same pair of two cities.\nFor each city, how many roads are connected to the city?\n",
    "constraints": "\n\n2\u2264N,M\u226450\n1\u2264a_i,b_i\u2264N\na_i \u2260 b_i\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:  \nN M\na_1 b_1\n:  \na_M b_M\n\n",
    "output_desc": "\nPrint the answer in N lines.\nIn the i-th line (1\u2264i\u2264N), print the number of roads connected to city i.\n",
    "sample_input1": "\n4 3\n1 2\n2 3\n1 4\n\n",
    "sample_output1": "\n2\n2\n1\n1\n\n\nCity 1 is connected to the 1-st and 3-rd roads.\nCity 2 is connected to the 1-st and 2-nd roads.\nCity 3 is connected to the 2-nd road.\nCity 4 is connected to the 3-rd road.\n\n",
    "sample_input2": "\n2 5\n1 2\n2 1\n1 2\n2 1\n1 2\n\n",
    "sample_output2": "\n5\n5\n\n",
    "sample_input3": "\n8 8\n1 2\n3 4\n1 5\n2 8\n3 7\n5 2\n4 1\n6 8\n\n",
    "sample_output3": "\n3\n3\n2\n2\n2\n1\n1\n2\n",
    "num_id": 364
  },
  {
    "id": "p03721",
    "score": "300",
    "desc": "\nThere is an empty array.\nThe following N operations will be performed to insert integers into the array.\nIn the i-th operation (1\u2264i\u2264N), b_i copies of an integer a_i are inserted into the array.\nFind the K-th smallest integer in the array after the N operations.\nFor example, the 4-th smallest integer in the array \\{1,2,2,3,3,3\\} is 3.\n",
    "constraints": "\n\n1\u2264N\u226410^5 \n1\u2264a_i,b_i\u226410^5 \n1\u2264K\u2264b_1\u2026+\u2026b_n\nAll input values are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:  \nN K\na_1 b_1\n:  \na_N b_N\n\n",
    "output_desc": "\nPrint the K-th smallest integer in the array after the N operations.  \n",
    "sample_input1": "\n3 4\n1 1\n2 2\n3 3\n\n",
    "sample_output1": "\n3\n\nThe resulting array is the same as the one in the problem statement.\n",
    "sample_input2": "\n10 500000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n\n",
    "sample_output2": "\n1\n",
    "num_id": 365
  },
  {
    "id": "p03723",
    "score": "300",
    "desc": "\nTakahashi, Aoki and Snuke love cookies. They have A, B and C cookies, respectively. Now, they will exchange those cookies by repeating the action below:\n\nEach person simultaneously divides his cookies in half and gives one half to each of the other two persons.\n\nThis action will be repeated until there is a person with odd number of cookies in hand.\nHow many times will they repeat this action?\nNote that the answer may not be finite.\n",
    "constraints": "\n\n1 \u2264 A,B,C \u2264 10^9\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nPrint the number of times the action will be performed by the three people, if this number is finite.\nIf it is infinite, print -1 instead.\n",
    "sample_input1": "\n4 12 20\n\n",
    "sample_output1": "\n3\n\nInitially, Takahashi, Aoki and Snuke have 4, 12 and 20 cookies. Then,\n\nAfter the first action, they have 16, 12 and 8.\nAfter the second action, they have 10, 12 and 14.\nAfter the third action, they have 13, 12 and 11.\n\nNow, Takahashi and Snuke have odd number of cookies, and therefore the answer is 3.\n",
    "sample_input2": "\n14 14 14\n\n",
    "sample_output2": "\n-1\n\n",
    "sample_input3": "\n454 414 444\n\n",
    "sample_output3": "\n1\n",
    "num_id": 366
  },
  {
    "id": "p03729",
    "score": "100",
    "desc": "\nYou are given three strings A, B and C. Check whether they form a word chain.\nMore formally, determine whether both of the following are true:\n\nThe last character in A and the initial character in B are the same.\nThe last character in B and the initial character in C are the same.\n\nIf both are true, print YES. Otherwise, print NO.\n",
    "constraints": "\n\nA, B and C are all composed of lowercase English letters (a - z).\n1 \u2264 |A|, |B|, |C| \u2264 10, where |A|, |B| and |C| are the lengths of A, B and C, respectively.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nPrint YES or NO.\n",
    "sample_input1": "\nrng gorilla apple\n\n",
    "sample_output1": "\nYES\n\nThey form a word chain.\n",
    "sample_input2": "\nyakiniku unagi sushi\n\n",
    "sample_output2": "\nNO\n\nA and B form a word chain, but B and C do not.\n",
    "sample_input3": "\na a a\n\n",
    "sample_output3": "\nYES\n\n",
    "sample_input4": "\naaaaaaaaab aaaaaaaaaa aaaaaaaaab\n\n",
    "sample_output4": "\nNO\n",
    "num_id": 367
  },
  {
    "id": "p03730",
    "score": "200",
    "desc": "\nWe ask you to select some number of positive integers, and calculate the sum of them.\nIt is allowed to select as many integers as you like, and as large integers as you wish.\nYou have to follow these, however: each selected integer needs to be a multiple of A, and you need to select at least one integer.\nYour objective is to make the sum congruent to C modulo B.\nDetermine whether this is possible.\nIf the objective is achievable, print YES. Otherwise, print NO.\n",
    "constraints": "\n\n1 \u2264 A \u2264 100\n1 \u2264 B \u2264 100\n0 \u2264 C < B\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nPrint YES or NO.\n",
    "sample_input1": "\n7 5 1\n\n",
    "sample_output1": "\nYES\n\nFor example, if you select 7 and 14, the sum 21 is congruent to 1 modulo 5.\n",
    "sample_input2": "\n2 2 1\n\n",
    "sample_output2": "\nNO\n\nThe sum of even numbers, no matter how many, is never odd.\n",
    "sample_input3": "\n1 100 97\n\n",
    "sample_output3": "\nYES\n\nYou can select 97, since you may select multiples of 1, that is, all integers.\n",
    "sample_input4": "\n40 98 58\n\n",
    "sample_output4": "\nYES\n\n",
    "sample_input5": "\n77 42 36\n\n",
    "sample_output5": "\nNO\n",
    "num_id": 368
  },
  {
    "id": "p03731",
    "score": "300",
    "desc": "\nIn a public bath, there is a shower which emits water for T seconds when the switch is pushed.\nIf the switch is pushed when the shower is already emitting water, from that moment it will be emitting water for T seconds.\nNote that it does not mean that the shower emits water for T additional seconds.\nN people will push the switch while passing by the shower.\nThe i-th person will push the switch t_i seconds after the first person pushes it.\nHow long will the shower emit water in total?\n",
    "constraints": "\n\n1 \u2264 N \u2264 200,000\n1 \u2264 T \u2264 10^9\n0 = t_1 < t_2 < t_3 < , ..., < t_{N-1} < t_N \u2264 10^9\nT and each t_i are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN T\nt_1 t_2 ... t_N\n\n",
    "output_desc": "\nAssume that the shower will emit water for a total of X seconds. Print X.\n",
    "sample_input1": "\n2 4\n0 3\n\n",
    "sample_output1": "\n7\n\nThree seconds after the first person pushes the water, the switch is pushed again and the shower emits water for four more seconds, for a total of seven seconds.\n",
    "sample_input2": "\n2 4\n0 5\n\n",
    "sample_output2": "\n8\n\nOne second after the shower stops emission of water triggered by the first person, the switch is pushed again.\n",
    "sample_input3": "\n4 1000000000\n0 1000 1000000 1000000000\n\n",
    "sample_output3": "\n2000000000\n\n",
    "sample_input4": "\n1 1\n0\n\n",
    "sample_output4": "\n1\n\n",
    "sample_input5": "\n9 10\n0 3 5 7 100 110 200 300 311\n\n",
    "sample_output5": "\n67\n",
    "num_id": 369
  },
  {
    "id": "p03737",
    "score": "100",
    "desc": "\nYou are given three words s_1, s_2 and s_3, each composed of lowercase English letters, with spaces in between.\nPrint the acronym formed from the uppercased initial letters of the words.\n",
    "constraints": "\n\ns_1, s_2 and s_3 are composed of lowercase English letters.\n1 \u2264 |s_i| \u2264 10 (1\u2264i\u22643)\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\ns_1 s_2 s_3\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\natcoder beginner contest\n\n",
    "sample_output1": "\nABC\n\nThe initial letters of atcoder, beginner and contest are a, b and c. Uppercase and concatenate them to obtain ABC.\n",
    "sample_input2": "\nresident register number\n\n",
    "sample_output2": "\nRRN\n\n",
    "sample_input3": "\nk nearest neighbor\n\n",
    "sample_output3": "\nKNN\n\n",
    "sample_input4": "\nasync layered coding\n\n",
    "sample_output4": "\nALC\n",
    "num_id": 370
  },
  {
    "id": "p03738",
    "score": "200",
    "desc": "\nYou are given two positive integers A and B. Compare the magnitudes of these numbers.\n",
    "constraints": "\n\n1 \u2264 A, B \u2264 10^{100}\nNeither A nor B begins with a 0.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nA\nB\n\n",
    "output_desc": "\nPrint GREATER if A>B, LESS if A<B and EQUAL if A=B.\n",
    "sample_input1": "\n36\n24\n\n",
    "sample_output1": "\nGREATER\n\nSince 36>24, print GREATER.\n",
    "sample_input2": "\n850\n3777\n\n",
    "sample_output2": "\nLESS\n\n",
    "sample_input3": "\n9720246\n22516266\n\n",
    "sample_output3": "\nLESS\n\n",
    "sample_input4": "\n123456789012345678901234567890\n234567890123456789012345678901\n\n",
    "sample_output4": "\nLESS\n",
    "num_id": 371
  },
  {
    "id": "p03745",
    "score": "300",
    "desc": "\nYou are given an array A of length N.\nYour task is to divide it into several contiguous subarrays.\nHere, all subarrays obtained must be sorted in either non-decreasing or non-increasing order.\nAt least how many subarrays do you need to divide A into?\n",
    "constraints": "\n\n1 \\leq N \\leq 10^5\n1 \\leq A_i \\leq 10^9\nEach A_i is an integer.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n",
    "output_desc": "\nPrint the minimum possible number of subarrays after division of A.\n",
    "sample_input1": "\n6\n1 2 3 2 2 1\n\n",
    "sample_output1": "\n2\n\nOne optimal solution is to divide the array into [1,2,3] and [2,2,1].\n",
    "sample_input2": "\n9\n1 2 1 2 1 2 1 2 1\n\n",
    "sample_output2": "\n5\n\n",
    "sample_input3": "\n7\n1 2 3 2 1 999999999 1000000000\n\n",
    "sample_output3": "\n3\n",
    "num_id": 372
  },
  {
    "id": "p03759",
    "score": "100",
    "desc": "\nThree poles stand evenly spaced along a line. Their heights are a, b and c meters, from left to right.\nWe will call the arrangement of the poles beautiful if the tops of the poles lie on the same line, that is, b-a = c-b.\nDetermine whether the arrangement of the poles is beautiful.\n",
    "constraints": "\n\n1 \\leq a,b,c \\leq 100\na, b and c are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\na b c\n\n",
    "output_desc": "\nPrint YES if the arrangement of the poles is beautiful; print NO otherwise.\n",
    "sample_input1": "\n2 4 6\n\n",
    "sample_output1": "\nYES\n\nSince 4-2 = 6-4, this arrangement of poles is beautiful.\n",
    "sample_input2": "\n2 5 6\n\n",
    "sample_output2": "\nNO\n\nSince 5-2 \\neq 6-5, this arrangement of poles is not beautiful.\n",
    "sample_input3": "\n3 2 1\n\n",
    "sample_output3": "\nYES\n\nSince 1-2 = 2-3, this arrangement of poles is beautiful.",
    "num_id": 373
  },
  {
    "id": "p03760",
    "score": "200",
    "desc": "\nSnuke signed up for a new website which holds programming competitions.\nHe worried that he might forget his password, and he took notes of it.\nSince directly recording his password would cause him trouble if stolen,\nhe took two notes: one contains the characters at the odd-numbered positions, and the other contains the characters at the even-numbered positions.\nYou are given two strings O and E. O contains the characters at the odd-numbered positions retaining their relative order, and E contains the characters at the even-numbered positions retaining their relative order.\nRestore the original password.\n",
    "constraints": "\n\nO and E consists of lowercase English letters (a - z).\n1 \\leq |O|,|E| \\leq 50\n|O| - |E| is either 0 or 1.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nO\nE\n\n",
    "output_desc": "\nPrint the original password.\n",
    "sample_input1": "\nxyz\nabc\n\n",
    "sample_output1": "\nxaybzc\n\nThe original password is xaybzc. Extracting the characters at the odd-numbered positions results in xyz, and extracting the characters at the even-numbered positions results in abc.\n",
    "sample_input2": "\natcoderbeginnercontest\natcoderregularcontest\n\n",
    "sample_output2": "\naattccooddeerrbreeggiunlnaerrccoonntteesstt\n",
    "num_id": 374
  },
  {
    "id": "p03767",
    "score": "300",
    "desc": "\nThere are 3N participants in AtCoder Group Contest.\nThe strength of the i-th participant is represented by an integer a_i.\nThey will form N teams, each consisting of three participants.\nNo participant may belong to multiple teams.\nThe strength of a team is defined as the second largest strength among its members.\nFor example, a team of participants of strength 1, 5, 2 has a strength 2, and a team of three participants of strength 3, 2, 3 has a strength 3.\nFind the maximum possible sum of the strengths of N teams.\n",
    "constraints": "\n\n1 \u2264 N \u2264 10^5\n1 \u2264 a_i \u2264 10^{9}\na_i are integers.\n\n",
    "input_desc": "\nInput is given from Standard Input in the following format:\nN\na_1 a_2 ... a_{3N}\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n2\n5 2 8 5 1 5\n\n",
    "sample_output1": "\n10\n\nThe following is one formation of teams that maximizes the sum of the strengths of teams:\n\nTeam 1: consists of the first, fourth and fifth participants.\nTeam 2: consists of the second, third and sixth participants.\n\n",
    "sample_input2": "\n10\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n\n",
    "sample_output2": "\n10000000000\n\nThe sum of the strengths can be quite large.",
    "num_id": 375
  },
  {
    "id": "p03773",
    "score": "100",
    "desc": "\nDolphin loves programming contests. Today, he will take part in a contest in AtCoder.\nIn this country, 24-hour clock is used. For example, 9:00 p.m. is referred to as \"21 o'clock\".\nThe current time is A o'clock, and a contest will begin in exactly B hours.\nWhen will the contest begin? Answer in 24-hour time.\n",
    "constraints": "\n\n0 \\leq A,B \\leq 23\nA and B are integers.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nA B\n\n",
    "output_desc": "\nPrint the hour of the starting time of the contest in 24-hour time.\n",
    "sample_input1": "\n9 12\n\n",
    "sample_output1": "\n21\n\nIn this input, the current time is 9 o'clock, and 12 hours later it will be 21 o'clock in 24-hour time.\n",
    "sample_input2": "\n19 0\n\n",
    "sample_output2": "\n19\n\nThe contest has just started.\n",
    "sample_input3": "\n23 2\n\n",
    "sample_output3": "\n1\n\nThe contest will begin at 1 o'clock the next day.",
    "num_id": 376
  },
  {
    "id": "p03775",
    "score": "300",
    "desc": "\nYou are given an integer N.\nFor two positive integers A and B, we will define F(A,B) as the larger of the following: the number of digits in the decimal notation of A, and the number of digits in the decimal notation of B.\nFor example, F(3,11) = 2 since 3 has one digit and 11 has two digits.\nFind the minimum value of F(A,B) as (A,B) ranges over all pairs of positive integers such that N = A \\times B.\n",
    "constraints": "\n\n1 \\leq N \\leq 10^{10}\nN is an integer.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the minimum value of F(A,B) as (A,B) ranges over all pairs of positive integers such that N = A \\times B.\n",
    "sample_input1": "\n10000\n\n",
    "sample_output1": "\n3\n\nF(A,B) has a minimum value of 3 at (A,B)=(100,100).\n",
    "sample_input2": "\n1000003\n\n",
    "sample_output2": "\n7\n\nThere are two pairs (A,B) that satisfy the condition: (1,1000003) and (1000003,1). For these pairs, F(1,1000003)=F(1000003,1)=7.\n",
    "sample_input3": "\n9876543210\n\n",
    "sample_output3": "\n6\n",
    "num_id": 377
  },
  {
    "id": "p03777",
    "score": "100",
    "desc": "\nTwo deer, AtCoDeer and TopCoDeer, are playing a game called Honest or Dishonest.\nIn this game, an honest player always tells the truth, and an dishonest player always tell lies.\nYou are given two characters a and b as the input. Each of them is either H or D, and carries the following information:\nIf a=H, AtCoDeer is honest; if a=D, AtCoDeer is dishonest.\nIf b=H, AtCoDeer is saying that TopCoDeer is honest; if b=D, AtCoDeer is saying that TopCoDeer is dishonest.\nGiven this information, determine whether TopCoDeer is honest.\n",
    "constraints": "\n\na=H or a=D.\nb=H or b=D.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\na b\n\n",
    "output_desc": "\nIf TopCoDeer is honest, print H. If he is dishonest, print D.\n",
    "sample_input1": "\nH H\n\n",
    "sample_output1": "\nH\n\nIn this input, AtCoDeer is honest. Hence, as he says, TopCoDeer is honest.\n",
    "sample_input2": "\nD H\n\n",
    "sample_output2": "\nD\n\nIn this input, AtCoDeer is dishonest. Hence, contrary to what he says, TopCoDeer is dishonest.\n",
    "sample_input3": "\nD D\n\n",
    "sample_output3": "\nH\n",
    "num_id": 378
  },
  {
    "id": "p03778",
    "score": "200",
    "desc": "\nAtCoDeer the deer found two rectangles lying on the table, each with height 1 and width W.\nIf we consider the surface of the desk as a two-dimensional plane, the first rectangle covers the vertical range of [0,1] and the horizontal range of [a,a+W], and the second rectangle covers the vertical range of [1,2] and the horizontal range of [b,b+W], as shown in the following figure:\n\nAtCoDeer will move the second rectangle horizontally so that it connects with the first rectangle.\nFind the minimum distance it needs to be moved.\n",
    "constraints": "\n\nAll input values are integers.\n1\u2264W\u226410^5\n1\u2264a,b\u226410^5\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nW a b\n\n",
    "output_desc": "\nPrint the minimum distance the second rectangle needs to be moved.\n",
    "sample_input1": "\n3 2 6\n\n",
    "sample_output1": "\n1\n\nThis input corresponds to the figure in the statement. In this case, the second rectangle should be moved to the left by a distance of 1.\n",
    "sample_input2": "\n3 1 3\n\n",
    "sample_output2": "\n0\n\nThe rectangles are already connected, and thus no move is needed.\n",
    "sample_input3": "\n5 10 1\n\n",
    "sample_output3": "\n4\n",
    "num_id": 379
  },
  {
    "id": "p03779",
    "score": "200",
    "desc": "\nThere is a kangaroo at coordinate 0 on an infinite number line that runs from left to right, at time 0.\nDuring the period between time i-1 and time i, the kangaroo can either stay at his position, or perform a jump of length exactly i to the left or to the right.\nThat is, if his coordinate at time i-1 is x, he can be at coordinate x-i, x or x+i at time i.\nThe kangaroo's nest is at coordinate X, and he wants to travel to coordinate X as fast as possible.\nFind the earliest possible time to reach coordinate X.\n",
    "constraints": "\n\nX is an integer.\n1\u2264X\u226410^9\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nX\n\n",
    "output_desc": "\nPrint the earliest possible time for the kangaroo to reach coordinate X.\n",
    "sample_input1": "\n6\n\n",
    "sample_output1": "\n3\n\nThe kangaroo can reach his nest at time 3 by jumping to the right three times, which is the earliest possible time.\n",
    "sample_input2": "\n2\n\n",
    "sample_output2": "\n2\n\nHe can reach his nest at time 2 by staying at his position during the first second, and jumping to the right at the next second.\n",
    "sample_input3": "\n11\n\n",
    "sample_output3": "\n5\n",
    "num_id": 380
  },
  {
    "id": "p03795",
    "score": "100",
    "desc": "\nSnuke has a favorite restaurant.\nThe price of any meal served at the restaurant is 800 yen (the currency of Japan), and each time a customer orders 15 meals, the restaurant pays 200 yen back to the customer.\nSo far, Snuke has ordered N meals at the restaurant.\nLet the amount of money Snuke has paid to the restaurant be x yen, and let the amount of money the restaurant has paid back to Snuke be y yen.\nFind x-y.\n",
    "constraints": "\n\n1 \u2264 N \u2264 100\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n20\n\n",
    "sample_output1": "\n15800\n\nSo far, Snuke has paid 16000 yen, and the restaurant has paid back 200 yen. Thus, the answer is 15800.\n",
    "sample_input2": "\n60\n\n",
    "sample_output2": "\n47200\n\nSnuke has paid 48000 yen for 60 meals, and the restaurant has paid back 800 yen.",
    "num_id": 381
  },
  {
    "id": "p03796",
    "score": "200",
    "desc": "\nSnuke loves working out. He is now exercising N times.\nBefore he starts exercising, his power is 1. After he exercises for the i-th time, his power gets multiplied by i.\nFind Snuke's power after he exercises N times. Since the answer can be extremely large, print the answer modulo 10^{9}+7.\n",
    "constraints": "\n\n1 \u2264 N \u2264 10^{5}\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the answer modulo 10^{9}+7.\n",
    "sample_input1": "\n3\n\n",
    "sample_output1": "\n6\n\n\nAfter Snuke exercises for the first time, his power gets multiplied by 1 and becomes 1.\nAfter Snuke exercises for the second time, his power gets multiplied by 2 and becomes 2.\nAfter Snuke exercises for the third time, his power gets multiplied by 3 and becomes 6.\n\n",
    "sample_input2": "\n10\n\n",
    "sample_output2": "\n3628800\n\n",
    "sample_input3": "\n100000\n\n",
    "sample_output3": "\n457992974\n\nPrint the answer modulo 10^{9}+7.",
    "num_id": 382
  },
  {
    "id": "p03797",
    "score": "300",
    "desc": "\nSnuke loves puzzles.\nToday, he is working on a puzzle using S- and c-shaped pieces.\nIn this puzzle, you can combine two c-shaped pieces into one S-shaped piece, as shown in the figure below:\n\n\n\nSnuke decided to create as many Scc groups as possible by putting together one S-shaped piece and two c-shaped pieces.\nFind the maximum number of Scc groups that can be created when Snuke has N S-shaped pieces and M c-shaped pieces.\n",
    "constraints": "\n\n1 \u2264 N,M \u2264 10^{12}\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN M\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n1 6\n\n",
    "sample_output1": "\n2\n\nTwo Scc groups can be created as follows:\n\nCombine two c-shaped pieces into one S-shaped piece\nCreate two Scc groups, each from one S-shaped piece and two c-shaped pieces\n\n",
    "sample_input2": "\n12345 678901\n\n",
    "sample_output2": "\n175897\n",
    "num_id": 383
  },
  {
    "id": "p03799",
    "score": "300",
    "desc": "\nSnuke loves puzzles.\nToday, he is working on a puzzle using S- and c-shaped pieces.\nIn this puzzle, you can combine two c-shaped pieces into one S-shaped piece, as shown in the figure below:\n\n\n\nSnuke decided to create as many Scc groups as possible by putting together one S-shaped piece and two c-shaped pieces.\nFind the maximum number of Scc groups that can be created when Snuke has N S-shaped pieces and M c-shaped pieces.\n",
    "constraints": "\n\n1 \u2264 N,M \u2264 10^{12}\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN M\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n1 6\n\n",
    "sample_output1": "\n2\n\nTwo Scc groups can be created as follows:\n\nCombine two c-shaped pieces into one S-shaped piece\nCreate two Scc groups, each from one S-shaped piece and two c-shaped pieces\n\n",
    "sample_input2": "\n12345 678901\n\n",
    "sample_output2": "\n175897\n",
    "num_id": 384
  },
  {
    "id": "p03807",
    "score": "300",
    "desc": "\nThere are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.\n",
    "constraints": "\n\n2 \u2266 N \u2266 10^5\n1 \u2266 A_i \u2266 10^9\nA_i is an integer.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\nA_1 A_2 \u2026 A_N\n\n",
    "output_desc": "\nIf it is possible to have only one integer on the blackboard, print YES. Otherwise, print NO.\n",
    "sample_input1": "\n3\n1 2 3\n\n",
    "sample_output1": "\nYES\n\nIt is possible to have only one integer on the blackboard, as follows:\n\nErase 1 and 3 from the blackboard, then write 4. Now, there are two integers on the blackboard: 2 and 4.\nErase 2 and 4 from the blackboard, then write 6. Now, there is only one integer on the blackboard: 6.\n\n",
    "sample_input2": "\n5\n1 2 3 4 5\n\n",
    "sample_output2": "\nNO\n",
    "num_id": 385
  },
  {
    "id": "p03813",
    "score": "100",
    "desc": "\nSmeke has decided to participate in AtCoder Beginner Contest (ABC) if his current rating is less than 1200, and participate in AtCoder Regular Contest (ARC) otherwise.\nYou are given Smeke's current rating, x. Print ABC if Smeke will participate in ABC, and print ARC otherwise.\n",
    "constraints": "\n\n1 \u2266 x \u2266 3{,}000\nx is an integer.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nx\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\n1000\n\n",
    "sample_output1": "\nABC\n\nSmeke's current rating is less than 1200, thus the output should be ABC.\n",
    "sample_input2": "\n2000\n\n",
    "sample_output2": "\nARC\n\nSmeke's current rating is not less than 1200, thus the output should be ARC.",
    "num_id": 386
  },
  {
    "id": "p03814",
    "score": "200",
    "desc": "\nSnuke has decided to construct a string that starts with A and ends with Z, by taking out a substring of a string s (that is, a consecutive part of s).\nFind the greatest length of the string Snuke can construct. Here, the test set guarantees that there always exists a substring of s that starts with A and ends with Z.\n",
    "constraints": "\n\n1 \u2266 |s| \u2266 200{,}000\ns consists of uppercase English letters.\nThere exists a substring of s that starts with A and ends with Z.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\ns\n\n",
    "output_desc": "\nPrint the answer.\n",
    "sample_input1": "\nQWERTYASDFZXCV\n\n",
    "sample_output1": "\n5\n\nBy taking out the seventh through eleventh characters, it is possible to construct ASDFZ, which starts with A and ends with Z.\n",
    "sample_input2": "\nZABCZ\n\n",
    "sample_output2": "\n4\n\n",
    "sample_input3": "\nHASFJGHOGAKZZFEGA\n\n",
    "sample_output3": "\n12\n",
    "num_id": 387
  },
  {
    "id": "p03827",
    "score": "200",
    "desc": "\nYou have an integer variable x.\nInitially, x=0.\nSome person gave you a string S of length N, and using the string you performed the following operation N times.\nIn the i-th operation, you incremented the value of x by 1 if S_i=I, and decremented the value of x by 1 if S_i=D.\nFind the maximum value taken by x during the operations (including before the first operation, and after the last operation).\n",
    "constraints": "\n\n1\u2264N\u2264100\n|S|=N\nNo characters except I and D occur in S.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\nS\n\n",
    "output_desc": "\nPrint the maximum value taken by x during the operations.\n",
    "sample_input1": "\n5\nIIDID\n\n",
    "sample_output1": "\n2\n\nAfter each operation, the value of x becomes 1, 2, 1, 2 and 1, respectively. Thus, the output should be 2, the maximum value.\n",
    "sample_input2": "\n7\nDDIDDII\n\n",
    "sample_output2": "\n0\n\nThe initial value x=0 is the maximum value taken by x, thus the output should be 0.",
    "num_id": 388
  },
  {
    "id": "p03834",
    "score": "100",
    "desc": "\nAs a New Year's gift, Dolphin received a string s of length 19.\nThe string s has the following format: [five lowercase English letters],[seven lowercase English letters],[five lowercase English letters].\nDolphin wants to convert the comma-separated string s into a space-separated string.\nWrite a program to perform the conversion for him.  \n",
    "constraints": "\n\nThe length of s is 19.\nThe sixth and fourteenth characters in s are ,.\nThe other characters in s are lowercase English letters.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\ns\n\n",
    "output_desc": "\nPrint the string after the conversion.\n",
    "sample_input1": "\nhappy,newyear,enjoy\n\n",
    "sample_output1": "\nhappy newyear enjoy\n\nReplace all the commas in happy,newyear,enjoy with spaces to obtain happy newyear enjoy.\n",
    "sample_input2": "\nhaiku,atcoder,tasks\n\n",
    "sample_output2": "\nhaiku atcoder tasks\n\n",
    "sample_input3": "\nabcde,fghihgf,edcba\n\n",
    "sample_output3": "\nabcde fghihgf edcba\n",
    "num_id": 389
  },
  {
    "id": "p03835",
    "score": "200",
    "desc": "\nYou are given two integers K and S.\nThree variable X, Y and Z takes integer values satisfying 0\u2264X,Y,Z\u2264K.\nHow many different assignments of values to X, Y and Z are there such that X + Y + Z = S?  \n",
    "constraints": "\n\n2\u2264K\u22642500 \n0\u2264S\u22643K \nK and S are integers.  \n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nK S\n\n",
    "output_desc": "\nPrint the number of the triples of X, Y and Z that satisfy the condition.\n",
    "sample_input1": "\n2 2\n\n",
    "sample_output1": "\n6\n\nThere are six triples of X, Y and Z that satisfy the condition:\n\nX = 0, Y = 0, Z = 2 \nX = 0, Y = 2, Z = 0 \nX = 2, Y = 0, Z = 0 \nX = 0, Y = 1, Z = 1 \nX = 1, Y = 0, Z = 1 \nX = 1, Y = 1, Z = 0\n\n",
    "sample_input2": "\n5 15\n\n",
    "sample_output2": "\n1\n\nThe maximum value of X + Y + Z is 15, achieved by one triple of X, Y and Z.",
    "num_id": 390
  },
  {
    "id": "p03838",
    "score": "300",
    "desc": "\nSnuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.\n",
    "constraints": "\n\nx and y are integers.\n|x|, |y| \u2264 10^9\nx and y are different.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nx y\n\n",
    "output_desc": "\nPrint the minimum number of times Snuke needs to press the buttons to achieve his objective.\n",
    "sample_input1": "\n10 20\n\n",
    "sample_output1": "\n10\n\nPress button A ten times.\n",
    "sample_input2": "\n10 -10\n\n",
    "sample_output2": "\n1\n\nPress button B once.\n",
    "sample_input3": "\n-10 -20\n\n",
    "sample_output3": "\n12\n\nPress the buttons as follows:\n\nPress button B once.\nPress button A ten times.\nPress button B once.\n",
    "num_id": 391
  },
  {
    "id": "p03852",
    "score": "100",
    "desc": "\nGiven a lowercase English letter c, determine whether it is a vowel. Here, there are five vowels in the English alphabet: a, e, i, o and u.\n",
    "constraints": "\n\nc is a lowercase English letter.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nc\n\n",
    "output_desc": "\nIf c is a vowel, print vowel. Otherwise, print consonant.\n",
    "sample_input1": "\na\n\n",
    "sample_output1": "\nvowel\n\nSince a is a vowel, print vowel.\n",
    "sample_input2": "\nz\n\n",
    "sample_output2": "\nconsonant\n\n",
    "sample_input3": "\ns\n\n",
    "sample_output3": "\nconsonant\n",
    "num_id": 392
  },
  {
    "id": "p03854",
    "score": "300",
    "desc": "\nYou are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.\n\n",
    "constraints": "\n\n1\u2266|S|\u226610^5\nS consists of lowercase English letters.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nIf it is possible to obtain S = T, print YES. Otherwise, print NO.\n",
    "sample_input1": "\nerasedream\n\n",
    "sample_output1": "\nYES\n\nAppend erase and dream at the end of T in this order, to obtain S = T.\n",
    "sample_input2": "\ndreameraser\n\n",
    "sample_output2": "\nYES\n\nAppend dream and eraser at the end of T in this order, to obtain S = T.\n",
    "sample_input3": "\ndreamerer\n\n",
    "sample_output3": "\nNO\n",
    "num_id": 393
  },
  {
    "id": "p03860",
    "score": "100",
    "desc": "\nSnuke is going to open a contest named \"AtCoder s Contest\".\nHere, s is a string of length 1 or greater, where the first character is an uppercase English letter, and the second and subsequent characters are lowercase English letters.\nSnuke has decided to abbreviate the name of the contest as \"AxC\".\nHere, x is the uppercase English letter at the beginning of s.\nGiven the name of the contest, print the abbreviation of the name.\n",
    "constraints": "\n\nThe length of s is between 1 and 100, inclusive.\nThe first character in s is an uppercase English letter.\nThe second and subsequent characters in s are lowercase English letters.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nAtCoder s Contest\n\n",
    "output_desc": "\nPrint the abbreviation of the name of the contest.\n",
    "sample_input1": "\nAtCoder Beginner Contest\n\n",
    "sample_output1": "\nABC\n\nThe contest in which you are participating now.\n",
    "sample_input2": "\nAtCoder Snuke Contest\n\n",
    "sample_output2": "\nASC\n\nThis contest does not actually exist.\n",
    "sample_input3": "\nAtCoder X Contest\n\n",
    "sample_output3": "\nAXC\n",
    "num_id": 394
  },
  {
    "id": "p03861",
    "score": "200",
    "desc": "\nYou are given nonnegative integers a and b (a \u2264 b), and a positive integer x.\nAmong the integers between a and b, inclusive, how many are divisible by x?\n",
    "constraints": "\n\n0 \u2264 a \u2264 b \u2264 10^{18}\n1 \u2264 x \u2264 10^{18}\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\na b x\n\n",
    "output_desc": "\nPrint the number of the integers between a and b, inclusive, that are divisible by x.\n",
    "sample_input1": "\n4 8 2\n\n",
    "sample_output1": "\n3\n\nThere are three integers between 4 and 8, inclusive, that are divisible by 2: 4, 6 and 8.\n",
    "sample_input2": "\n0 5 1\n\n",
    "sample_output2": "\n6\n\nThere are six integers between 0 and 5, inclusive, that are divisible by 1: 0, 1, 2, 3, 4 and 5.\n",
    "sample_input3": "\n9 9 2\n\n",
    "sample_output3": "\n0\n\nThere are no integer between 9 and 9, inclusive, that is divisible by 2.\n",
    "sample_input4": "\n1 1000000000000000000 3\n\n",
    "sample_output4": "\n333333333333333333\n\nWatch out for integer overflows.",
    "num_id": 395
  },
  {
    "id": "p03862",
    "score": "300",
    "desc": "\nThere are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.\n",
    "constraints": "\n\n2 \u2264 N \u2264 10^5\n0 \u2264 a_i \u2264 10^9\n0 \u2264 x \u2264 10^9\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN x\na_1 a_2 ... a_N\n\n",
    "output_desc": "\nPrint the minimum number of operations required to achieve the objective.\n",
    "sample_input1": "\n3 3\n2 2 2\n\n",
    "sample_output1": "\n1\n\nEat one candy in the second box.\nThen, the number of candies in each box becomes (2, 1, 2).\n",
    "sample_input2": "\n6 1\n1 6 1 2 0 4\n\n",
    "sample_output2": "\n11\n\nFor example, eat six candies in the second box, two in the fourth box, and three in the sixth box.\nThen, the number of candies in each box becomes (1, 0, 1, 0, 0, 1).\n",
    "sample_input3": "\n5 9\n3 1 4 1 5\n\n",
    "sample_output3": "\n0\n\nThe objective is already achieved without performing operations.\n",
    "sample_input4": "\n2 0\n5 5\n\n",
    "sample_output4": "\n10\n\nAll the candies need to be eaten.",
    "num_id": 396
  },
  {
    "id": "p03910",
    "score": "300",
    "desc": "\nThe problem set at CODE FESTIVAL 20XX Finals consists of N problems.\nThe score allocated to the i-th (1\u2266i\u2266N) problem is i points.\nTakahashi, a contestant, is trying to score exactly N points. For that, he is deciding which problems to solve.\nAs problems with higher scores are harder, he wants to minimize the highest score of a problem among the ones solved by him.\nDetermine the set of problems that should be solved.\n",
    "constraints": "\n\n1\u2266N\u226610^7\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nAmong the sets of problems with the total score of N, find a set in which the highest score of a problem is minimum, then print the indices of the problems in the set in any order, one per line.\nIf there exists more than one such set, any of them will be accepted.\n",
    "sample_input1": "\n4\n\n",
    "sample_output1": "\n1\n3\n\nSolving only the 4-th problem will also result in the total score of 4 points, but solving the 1-st and 3-rd problems will lower the highest score of a solved problem.\n",
    "sample_input2": "\n7\n\n",
    "sample_output2": "\n1\n2\n4\n\nThe set \\{3,4\\} will also be accepted.\n",
    "sample_input3": "\n1\n\n",
    "sample_output3": "\n1\n",
    "num_id": 397
  },
  {
    "id": "p03943",
    "score": "100",
    "desc": "\nTwo students of AtCoder Kindergarten are fighting over candy packs.\nThere are three candy packs, each of which contains a, b, and c candies, respectively.\nTeacher Evi is trying to distribute the packs between the two students so that each student gets the same number of candies. Determine whether it is possible.\nNote that Evi cannot take candies out of the packs, and the whole contents of each pack must be given to one of the students.\n",
    "constraints": "\n\n1 \u2266 a, b, c \u2266 100\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\na b c\n\n",
    "output_desc": "\nIf it is possible to distribute the packs so that each student gets the same number of candies, print Yes. Otherwise, print No.\n",
    "sample_input1": "\n10 30 20\n\n",
    "sample_output1": "\nYes\n\nGive the pack with 30 candies to one student, and give the two packs with 10 and 20 candies to the other. Then, each gets 30 candies.\n",
    "sample_input2": "\n30 30 100\n\n",
    "sample_output2": "\nNo\n\nIn this case, the student who gets the pack with 100 candies always has more candies than the other.\nNote that every pack must be given to one of them.\n",
    "sample_input3": "\n56 25 31\n\n",
    "sample_output3": "\nYes\n",
    "num_id": 398
  },
  {
    "id": "p03951",
    "score": "200",
    "desc": "\nSnuke is interested in strings that satisfy the following conditions:\n\nThe length of the string is at least N.\nThe first N characters equal to the string s.\nThe last N characters equal to the string t.\n\nFind the length of the shortest string that satisfies the conditions.\n",
    "constraints": "\n\n1\u2264N\u2264100\nThe lengths of s and t are both N.\ns and t consist of lowercase English letters.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\ns\nt\n\n",
    "output_desc": "\nPrint the length of the shortest string that satisfies the conditions.\n",
    "sample_input1": "\n3\nabc\ncde\n\n",
    "sample_output1": "\n5\n\nThe shortest string is abcde.\n",
    "sample_input2": "\n1\na\nz\n\n",
    "sample_output2": "\n2\n\nThe shortest string is az.\n",
    "sample_input3": "\n4\nexpr\nexpr\n\n",
    "sample_output3": "\n4\n\nThe shortest string is expr.",
    "num_id": 399
  },
  {
    "id": "p03957",
    "score": "100",
    "desc": "\nThis contest is CODEFESTIVAL, which can be shortened to the string CF by deleting some characters.  \nMr. Takahashi, full of curiosity, wondered if he could obtain CF from other strings in the same way.  \nYou are given a string s consisting of uppercase English letters.\nDetermine whether the string CF can be obtained from the string s by deleting some characters.\n",
    "constraints": "\n\n2 \u2264 |s| \u2264 100\nAll characters in s are uppercase English letters (A-Z).\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\ns\n\n",
    "output_desc": "\nPrint Yes if the string CF can be obtained from the string s by deleting some characters.\nOtherwise print No.\n",
    "sample_input1": "\nCODEFESTIVAL\n\n",
    "sample_output1": "\nYes\n\nCF is obtained by deleting characters other than the first character C and the fifth character F.\n",
    "sample_input2": "\nFESTIVALCODE\n\n",
    "sample_output2": "\nNo\n\nFC can be obtained but CF cannot be obtained because you cannot change the order of the characters.\n",
    "sample_input3": "\nCF\n\n",
    "sample_output3": "\nYes\n\nIt is also possible not to delete any characters.\n",
    "sample_input4": "\nFCF\n\n",
    "sample_output4": "\nYes\n\nCF is obtained by deleting the first character.",
    "num_id": 400
  },
  {
    "id": "p03962",
    "score": "100",
    "desc": "\nAtCoDeer the deer recently bought three paint cans.\nThe color of the one he bought two days ago is a, the color of the one he bought yesterday is b, and the color of the one he bought today is c.\nHere, the color of each paint can is represented by an integer between 1 and 100, inclusive.\nSince he is forgetful, he might have bought more than one paint can in the same color.\nCount the number of different kinds of colors of these paint cans and tell him.\n",
    "constraints": "\n\n1\u2266a,b,c\u2266100\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\na b c\n\n",
    "output_desc": "\nPrint the number of different kinds of colors of the paint cans.\n",
    "sample_input1": "\n3 1 4\n\n",
    "sample_output1": "\n3\n\nThree different colors: 1, 3, and 4.\n",
    "sample_input2": "\n3 3 33\n\n",
    "sample_output2": "\n2\n\nTwo different colors: 3 and 33.",
    "num_id": 401
  },
  {
    "id": "p03963",
    "score": "200",
    "desc": "\nThere are N balls placed in a row.\nAtCoDeer the deer is painting each of these in one of the K colors of his paint cans.\nFor aesthetic reasons, any two adjacent balls must be painted in different colors.\nFind the number of the possible ways to paint the balls.\n",
    "constraints": "\n\n1\u2266N\u22661000\n2\u2266K\u22661000\nThe correct answer is at most 2^{31}-1.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN K\n\n",
    "output_desc": "\nPrint the number of the possible ways to paint the balls.\n",
    "sample_input1": "\n2 2\n\n",
    "sample_output1": "\n2\n\nWe will denote the colors by 0 and 1. There are two possible ways: we can either paint the left ball in color 0 and the right ball in color 1, or paint the left in color 1 and the right in color 0.\n",
    "sample_input2": "\n1 10\n\n",
    "sample_output2": "\n10\n\nSince there is only one ball, we can use any of the ten colors to paint it. Thus, the answer is ten.",
    "num_id": 402
  },
  {
    "id": "p03986",
    "score": "300",
    "desc": "\nWe have a string X, which has an even number of characters. Half the characters are S, and the other half are T.\nTakahashi, who hates the string ST, will perform the following operation 10^{10000} times:\n\nAmong the occurrences of ST in X as (contiguous) substrings, remove the leftmost one. If there is no occurrence, do nothing.\n\nFind the eventual length of X.\n",
    "constraints": "\n\n2 \u2266 |X| \u2266 200,000\nThe length of X is even.\nHalf the characters in X are S, and the other half are T.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nX\n\n",
    "output_desc": "\nPrint the eventual length of X.\n",
    "sample_input1": "\nTSTTSS\n\n",
    "sample_output1": "\n4\n\nIn the 1-st operation, the 2-nd and 3-rd characters of TSTTSS are removed.\nX becomes TTSS, and since it does not contain ST anymore, nothing is done in the remaining 10^{10000}-1 operations.\nThus, the answer is 4.\n",
    "sample_input2": "\nSSTTST\n\n",
    "sample_output2": "\n0\n\nX will eventually become an empty string: SSTTST \u21d2 STST \u21d2 ST \u21d2 ``.\n",
    "sample_input3": "\nTSSTTTSS\n\n",
    "sample_output3": "\n4\n\nX will become: TSSTTTSS \u21d2 TSTTSS \u21d2 TTSS.",
    "num_id": 403
  },
  {
    "id": "p03997",
    "score": "100",
    "desc": "\nYou are given a trapezoid. The lengths of its upper base, lower base, and height are a, b, and h, respectively.\n\n\nAn example of a trapezoid\n\nFind the area of this trapezoid.\n",
    "constraints": "\n\n1\u2266a\u2266100\n1\u2266b\u2266100\n1\u2266h\u2266100\nAll input values are integers.\nh is even.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\na\nb\nh\n\n",
    "output_desc": "\nPrint the area of the given trapezoid. It is guaranteed that the area is an integer.\n",
    "sample_input1": "\n3\n4\n2\n\n",
    "sample_output1": "\n7\n\nWhen the lengths of the upper base, lower base, and height are 3, 4, and 2, respectively, the area of the trapezoid is (3+4)\u00d72/2 = 7.\n",
    "sample_input2": "\n4\n4\n4\n\n",
    "sample_output2": "\n16\n\nIn this case, a parallelogram is given, which is also a trapezoid.",
    "num_id": 404
  },
  {
    "id": "p04001",
    "score": "300",
    "desc": "\nYou are given a string S consisting of digits between 1 and 9, inclusive.\nYou can insert the letter + into some of the positions (possibly none) between two letters in this string.\nHere, + must not occur consecutively after insertion.\nAll strings that can be obtained in this way can be evaluated as formulas.\nEvaluate all possible formulas, and print the sum of the results.\n",
    "constraints": "\n\n1 \\leq |S| \\leq 10\nAll letters in S are digits between 1 and 9, inclusive.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nS\n\n",
    "output_desc": "\nPrint the sum of the evaluated value over all possible formulas.\n",
    "sample_input1": "\n125\n\n",
    "sample_output1": "\n176\n\nThere are 4 formulas that can be obtained: 125, 1+25, 12+5 and 1+2+5. When each formula is evaluated,\n\n125\n1+25=26\n12+5=17\n1+2+5=8\n\nThus, the sum is 125+26+17+8=176.\n",
    "sample_input2": "\n9999999999\n\n",
    "sample_output2": "\n12656242944\n",
    "num_id": 405
  },
  {
    "id": "p04005",
    "score": "200",
    "desc": "\nWe have a rectangular parallelepiped of size A\u00d7B\u00d7C, built with blocks of size 1\u00d71\u00d71. Snuke will paint each of the A\u00d7B\u00d7C blocks either red or blue, so that:\n\nThere is at least one red block and at least one blue block.\nThe union of all red blocks forms a rectangular parallelepiped.\nThe union of all blue blocks forms a rectangular parallelepiped.\n\nSnuke wants to minimize the difference between the number of red blocks and the number of blue blocks. Find the minimum possible difference.\n",
    "constraints": "\n\n2\u2264A,B,C\u226410^9\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nPrint the minimum possible difference between the number of red blocks and the number of blue blocks.\n",
    "sample_input1": "\n3 3 3\n\n",
    "sample_output1": "\n9\n\nFor example, Snuke can paint the blocks as shown in the diagram below.\nThere are 9 red blocks and 18 blue blocks, thus the difference is 9.\n\n",
    "sample_input2": "\n2 2 4\n\n",
    "sample_output2": "\n0\n\nFor example, Snuke can paint the blocks as shown in the diagram below.\nThere are 8 red blocks and 8 blue blocks, thus the difference is 0.\n\n",
    "sample_input3": "\n5 3 5\n\n",
    "sample_output3": "\n15\n\nFor example, Snuke can paint the blocks as shown in the diagram below.\nThere are 45 red blocks and 30 blue blocks, thus the difference is 9.\n",
    "num_id": 406
  },
  {
    "id": "p04011",
    "score": "100",
    "desc": "\nThere is a hotel with the following accommodation fee:\n\nX yen (the currency of Japan) per night, for the first K nights\nY yen per night, for the (K+1)-th and subsequent nights\n\nTak is staying at this hotel for N consecutive nights.\nFind his total accommodation fee.\n",
    "constraints": "\n\n1 \\leq N, K \\leq 10000\n1 \\leq Y < X \\leq 10000\nN,\\,K,\\,X,\\,Y are integers.\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\nK\nX\nY\n\n",
    "output_desc": "\nPrint Tak's total accommodation fee.\n",
    "sample_input1": "\n5\n3\n10000\n9000\n\n",
    "sample_output1": "\n48000\n\nThe accommodation fee is as follows:\n\n10000 yen for the 1-st night\n10000 yen for the 2-nd night\n10000 yen for the 3-rd night\n9000 yen for the 4-th night\n9000 yen for the 5-th night\n\nThus, the total is 48000 yen.\n",
    "sample_input2": "\n2\n3\n10000\n9000\n\n",
    "sample_output2": "\n20000\n",
    "num_id": 407
  },
  {
    "id": "p04012",
    "score": "200",
    "desc": "\nLet w be a string consisting of lowercase letters.\nWe will call w beautiful if the following condition is satisfied:\n\nEach lowercase letter of the English alphabet occurs even number of times in w.\n\nYou are given the string w. Determine if w is beautiful.\n",
    "constraints": "\n\n1 \\leq |w| \\leq 100\nw consists of lowercase letters (a-z).\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nw\n\n",
    "output_desc": "\nPrint Yes if w is beautiful. Print No otherwise.\n",
    "sample_input1": "\nabaccaba\n\n",
    "sample_output1": "\nYes\n\na occurs four times, b occurs twice, c occurs twice and the other letters occur zero times.\n",
    "sample_input2": "\nhthth\n\n",
    "sample_output2": "\nNo\n",
    "num_id": 408
  },
  {
    "id": "p04025",
    "score": "200",
    "desc": "\nEvi has N integers a_1,a_2,..,a_N. His objective is to have N equal integers by transforming some of them.\nHe may transform each integer at most once. Transforming an integer x into another integer y costs him (x-y)^2 dollars. Even if a_i=a_j (i\u2260j), he has to pay the cost separately for transforming each of them (See Sample 2).\nFind the minimum total cost to achieve his objective.\n",
    "constraints": "\n\n1\u2266N\u2266100\n-100\u2266a_i\u2266100\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\na_1 a_2 ... a_N\n\n",
    "output_desc": "\nPrint the minimum total cost to achieve Evi's objective.\n",
    "sample_input1": "\n2\n4 8\n\n",
    "sample_output1": "\n8\n\nTransforming the both into 6s will cost (4-6)^2+(8-6)^2=8 dollars, which is the minimum.\n",
    "sample_input2": "\n3\n1 1 3\n\n",
    "sample_output2": "\n3\n\nTransforming the all into 2s will cost (1-2)^2+(1-2)^2+(3-2)^2=3 dollars. Note that Evi has to pay (1-2)^2 dollar separately for transforming each of the two 1s.\n",
    "sample_input3": "\n3\n4 2 5\n\n",
    "sample_output3": "\n5\n\nLeaving the 4 as it is and transforming the 2 and the 5 into 4s will achieve the total cost of (2-4)^2+(5-4)^2=5 dollars, which is the minimum.\n",
    "sample_input4": "\n4\n-100 -100 -100 -100\n\n",
    "sample_output4": "\n0\n\nWithout transforming anything, Evi's objective is already achieved. Thus, the necessary cost is 0.",
    "num_id": 409
  },
  {
    "id": "p04029",
    "score": "100",
    "desc": "\nThere are N children in AtCoder Kindergarten. Mr. Evi will arrange the children in a line, then give 1 candy to the first child in the line, 2 candies to the second child, ..., N candies to the N-th child. How many candies will be necessary in total?\n",
    "constraints": "\n\n1\u2266N\u2266100\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\n\n",
    "output_desc": "\nPrint the necessary number of candies in total.\n",
    "sample_input1": "\n3\n\n",
    "sample_output1": "\n6\n\nThe answer is 1+2+3=6.\n",
    "sample_input2": "\n10\n\n",
    "sample_output2": "\n55\n\nThe sum of the integers from 1 to 10 is 55.\n",
    "sample_input3": "\n1\n\n",
    "sample_output3": "\n1\n\nOnly one child. The answer is 1 in this case.",
    "num_id": 410
  },
  {
    "id": "p04031",
    "score": "200",
    "desc": "\nEvi has N integers a_1,a_2,..,a_N. His objective is to have N equal integers by transforming some of them.\nHe may transform each integer at most once. Transforming an integer x into another integer y costs him (x-y)^2 dollars. Even if a_i=a_j (i\u2260j), he has to pay the cost separately for transforming each of them (See Sample 2).\nFind the minimum total cost to achieve his objective.\n",
    "constraints": "\n\n1\u2266N\u2266100\n-100\u2266a_i\u2266100\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN\na_1 a_2 ... a_N\n\n",
    "output_desc": "\nPrint the minimum total cost to achieve Evi's objective.\n",
    "sample_input1": "\n2\n4 8\n\n",
    "sample_output1": "\n8\n\nTransforming the both into 6s will cost (4-6)^2+(8-6)^2=8 dollars, which is the minimum.\n",
    "sample_input2": "\n3\n1 1 3\n\n",
    "sample_output2": "\n3\n\nTransforming the all into 2s will cost (1-2)^2+(1-2)^2+(3-2)^2=3 dollars. Note that Evi has to pay (1-2)^2 dollar separately for transforming each of the two 1s.\n",
    "sample_input3": "\n3\n4 2 5\n\n",
    "sample_output3": "\n5\n\nLeaving the 4 as it is and transforming the 2 and the 5 into 4s will achieve the total cost of (2-4)^2+(5-4)^2=5 dollars, which is the minimum.\n",
    "sample_input4": "\n4\n-100 -100 -100 -100\n\n",
    "sample_output4": "\n0\n\nWithout transforming anything, Evi's objective is already achieved. Thus, the necessary cost is 0.",
    "num_id": 411
  },
  {
    "id": "p04033",
    "score": "a",
    "desc": "\nYou are given two integers a and b (a\u2264b). Determine if the product of the integers a, a+1, \u2026, b is positive, negative or zero.\n",
    "constraints": "\n\na and b are integers.\n-10^9\u2264a\u2264b\u226410^9\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\na b\n\n",
    "output_desc": "\nIf the product is positive, print Positive. If it is negative, print Negative. If it is zero, print Zero.\n",
    "sample_input1": "\n1 3\n\n",
    "sample_output1": "\nPositive\n\n1\u00d72\u00d73=6 is positive.\n",
    "sample_input2": "\n-3 -1\n\n",
    "sample_output2": "\nNegative\n\n(-3)\u00d7(-2)\u00d7(-1)=-6 is negative.\n",
    "sample_input3": "\n-1 1\n\n",
    "sample_output3": "\nZero\n\n(-1)\u00d70\u00d71=0.",
    "num_id": 412
  },
  {
    "id": "p04043",
    "score": "100",
    "desc": "\nIroha loves Haiku. Haiku is a short form of Japanese poetry. A Haiku consists of three phrases with 5, 7 and 5 syllables, in this order.\nTo create a Haiku, Iroha has come up with three different phrases. These phrases have A, B and C syllables, respectively. Determine whether she can construct a Haiku by using each of the phrases once, in some order.\n",
    "constraints": "\n\n1\u2266A,B,C\u226610\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nA B C\n\n",
    "output_desc": "\nIf it is possible to construct a Haiku by using each of the phrases once, print YES (case-sensitive). Otherwise, print NO.\n",
    "sample_input1": "\n5 5 7\n\n",
    "sample_output1": "\nYES\n\nUsing three phrases of length 5, 5 and 7, it is possible to construct a Haiku.\n",
    "sample_input2": "\n7 7 5\n\n",
    "sample_output2": "\nNO\n",
    "num_id": 413
  },
  {
    "id": "p04045",
    "score": "300",
    "desc": "\nIroha is very particular about numbers. There are K digits that she dislikes: D_1, D_2, ..., D_K.\nShe is shopping, and now paying at the cashier.\nHer total is N yen (the currency of Japan), thus she has to hand at least N yen to the cashier (and possibly receive the change).\nHowever, as mentioned before, she is very particular about numbers. When she hands money to the cashier, the decimal notation of the amount must not contain any digits that she dislikes. Under this condition, she will hand the minimum amount of money.\nFind the amount of money that she will hand to the cashier.\n",
    "constraints": "\n\n 1 \u2266 N < 10000\n 1 \u2266 K < 10\n 0 \u2266 D_1 < D_2 < \u2026 < D_K\u22669\n\\{D_1,D_2,...,D_K\\} \u2260 \\{1,2,3,4,5,6,7,8,9\\}\n\n",
    "input_desc": "\nThe input is given from Standard Input in the following format:\nN K\nD_1 D_2 \u2026 D_K\n\n",
    "output_desc": "\nPrint the amount of money that Iroha will hand to the cashier.\n",
    "sample_input1": "\n1000 8\n1 3 4 5 6 7 8 9\n\n",
    "sample_output1": "\n2000\n\nShe dislikes all digits except 0 and 2.\nThe smallest integer equal to or greater than N=1000 whose decimal notation contains only 0 and 2, is 2000.\n",
    "sample_input2": "\n9999 1\n0\n\n",
    "sample_output2": "\n9999\n",
    "num_id": 414
  }
]
